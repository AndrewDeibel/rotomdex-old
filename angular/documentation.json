{
    "pipes": [],
    "interfaces": [
        {
            "name": "CardResults",
            "id": "interface-CardResults-ee72209a045692f73d3c36cf2e639bb1399b03c38cda317df9f57023ed862d0ba7ed8b4f858b362679627885e3fe8eeb526cb13fe0c2fc7d5f075f2b443dea66",
            "file": "src/app/services/cards.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { APIGetPaged, APIResponse } from '@app/models';\r\nimport { Card } from '@app/pages/cards/card/card';\r\n\r\nexport class GetCards extends APIGetPaged {\r\n\tconstructor(init?: Partial<GetCards>) {\r\n\t\tsuper();\r\n\t\tObject.assign(this, init);\r\n\t}\r\n}\r\n\r\nexport class GetCardsFiltered extends APIGetPaged {\r\n\tconstructor(init?: Partial<GetCards>) {\r\n\t\tsuper();\r\n\t\tObject.assign(this, init);\r\n\t}\r\n}\r\n\r\nexport interface CardResults {\r\n\ttotal_value?: number;\r\n\ttotal_results: number;\r\n\ttotal_pages: number;\r\n\tcards?: Card[];\r\n}\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class CardsService {\r\n\tconstructor(private http: HttpClient) {}\r\n\r\n\t// Get cards\r\n\tprivate getCardsSubject = new BehaviorSubject<CardResults>(null);\r\n\tgetCardsObservable() {\r\n\t\tthis.getCardsSubject = new BehaviorSubject<CardResults>(null);\r\n\t\treturn this.getCardsSubject.asObservable();\r\n\t}\r\n\tgetCards(params: GetCards) {\r\n\t\tvar url = params.buildUrl('cards');\r\n\t\tthis.http.get<APIResponse>(url).subscribe((res) => {\r\n\t\t\tlet cards = [];\r\n\t\t\tres.data.forEach((card) => {\r\n\t\t\t\tcards.push(new Card(card));\r\n\t\t\t});\r\n\t\t\tthis.getCardsSubject.next({\r\n\t\t\t\tcards: cards,\r\n\t\t\t\ttotal_pages: res.meta.last_page,\r\n\t\t\t\ttotal_results: res.meta.total,\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\r\n\t// Get cards filtered\r\n\tprivate getCardsFilteredSubject = new BehaviorSubject<CardResults>(null);\r\n\tgetCardsFilteredObservable() {\r\n\t\tthis.getCardsFilteredSubject = new BehaviorSubject<CardResults>(null);\r\n\t\treturn this.getCardsFilteredSubject.asObservable();\r\n\t}\r\n\tgetCardsFiltered(params: GetCardsFiltered) {\r\n\t\tvar url = params.buildUrl('cards/filter');\r\n\t\tthis.http.get<APIResponse>(url).subscribe((res) => {\r\n\t\t\tlet cards = [];\r\n\t\t\tres.data.forEach((card) => {\r\n\t\t\t\tcards.push(new Card(card));\r\n\t\t\t});\r\n\t\t\tthis.getCardsFilteredSubject.next({\r\n\t\t\t\tcards: cards,\r\n\t\t\t\ttotal_pages: res.meta.last_page,\r\n\t\t\t\ttotal_results: res.meta.total,\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n}\r\n",
            "properties": [
                {
                    "name": "cards",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Card[]",
                    "optional": true,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "total_pages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "total_results",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "total_value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 22
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "GetExpansions",
            "id": "interface-GetExpansions-5e47ed4b4d26b3f46a1cc79734d305aba0b7bfc3dd3bba576e763d9f09f0219f2024a045b7444b9e0eb6a5cea839b33bcf59c4b6c0248c7973ff6f2aff1cd2ea",
            "file": "src/app/services/expansions.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { environment } from '@app/../environments/environment';\r\nimport { APIResponse } from '@app/models';\r\nimport { Expansion, Series } from '@app/pages/expansions/expansion/expansion';\r\nimport { CacheGlobal } from './cache/globalCache';\r\n\r\nexport interface GetExpansions {\r\n\tquery: string;\r\n\tsort_by: string;\r\n\tsort_direction: string;\r\n}\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ExpansionsService {\r\n\tconstructor(private http: HttpClient) {}\r\n\r\n\t// Get expansions\r\n\tprivate getExpansionsSubject = new BehaviorSubject<Series[]>(null);\r\n\tgetExpansionsObservable() {\r\n\t\tthis.getExpansionsSubject = new BehaviorSubject<Series[]>(null);\r\n\t\treturn this.getExpansionsSubject.asObservable();\r\n\t}\r\n\tgetExpansions(params: GetExpansions) {\r\n\t\tif (CacheGlobal.expansions) {\r\n\t\t\tthis.getExpansionsSubject.next(\r\n\t\t\t\tthis.handleExpansionsParams(params, CacheGlobal.expansions)\r\n\t\t\t);\r\n\t\t} else {\r\n\t\t\tthis.http\r\n\t\t\t\t.get<APIResponse>(`${environment.api}expansions`)\r\n\t\t\t\t.subscribe((res) => {\r\n\t\t\t\t\tlet series: Series[] = [];\r\n\t\t\t\t\tres.data.forEach((_series) => {\r\n\t\t\t\t\t\tseries.push(new Series(_series));\r\n\t\t\t\t\t});\r\n\t\t\t\t\tCacheGlobal.expansions = series;\r\n\t\t\t\t\tthis.getExpansionsSubject.next(\r\n\t\t\t\t\t\tthis.handleExpansionsParams(params, series)\r\n\t\t\t\t\t);\r\n\t\t\t\t});\r\n\t\t}\r\n\t}\r\n\thandleExpansionsParams(\r\n\t\tparams: GetExpansions,\r\n\t\tseriesCollection: Series[]\r\n\t): Series[] {\r\n\t\t// No data\r\n\t\tif (!seriesCollection.length) {\r\n\t\t\treturn [];\r\n\t\t} else {\r\n\t\t\tlet _seriesCollection: Series[] = [];\r\n\r\n\t\t\t// Query\r\n\t\t\tif (params.query && params.query.length) {\r\n\t\t\t\t// Filter expansions\r\n\t\t\t\tseriesCollection.forEach((series) => {\r\n\t\t\t\t\tlet expansions = series.expansions.filter((expansion) => {\r\n\t\t\t\t\t\treturn expansion.name\r\n\t\t\t\t\t\t\t.toLowerCase()\r\n\t\t\t\t\t\t\t.includes(params.query.toLowerCase());\r\n\t\t\t\t\t});\r\n\t\t\t\t\tif (expansions.length) {\r\n\t\t\t\t\t\tlet _series = Object.assign({}, series);\r\n\t\t\t\t\t\t_series.expansions = expansions;\r\n\t\t\t\t\t\t_seriesCollection.push(_series);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t} else {\r\n\t\t\t\t_seriesCollection = seriesCollection;\r\n\t\t\t}\r\n\r\n\t\t\t// Sort\r\n\t\t\tfunction sortSeriesAsc(a: Series, b: Series) {\r\n\t\t\t\tif (a.id < b.id) {\r\n\t\t\t\t\treturn -1;\r\n\t\t\t\t}\r\n\t\t\t\tif (a.id > b.id) {\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\t}\r\n\t\t\t\treturn 0;\r\n\t\t\t}\r\n\t\t\tfunction sortSeriesDesc(a: Series, b: Series) {\r\n\t\t\t\tif (a.id > b.id) {\r\n\t\t\t\t\treturn -1;\r\n\t\t\t\t}\r\n\t\t\t\tif (a.id < b.id) {\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\t}\r\n\t\t\t\treturn 0;\r\n\t\t\t}\r\n\t\t\tfunction sortExpansionAsc(a: Expansion, b: Expansion) {\r\n\t\t\t\tif (new Date(a.release_date) < new Date(b.release_date)) {\r\n\t\t\t\t\treturn -1;\r\n\t\t\t\t}\r\n\t\t\t\tif (new Date(a.release_date) > new Date(b.release_date)) {\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\t}\r\n\t\t\t\treturn 0;\r\n\t\t\t}\r\n\t\t\tfunction sortExpansionDesc(a: Expansion, b: Expansion) {\r\n\t\t\t\tif (new Date(a.release_date) > new Date(b.release_date)) {\r\n\t\t\t\t\treturn -1;\r\n\t\t\t\t}\r\n\t\t\t\tif (new Date(a.release_date) < new Date(b.release_date)) {\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\t}\r\n\t\t\t\treturn 0;\r\n\t\t\t}\r\n\t\t\tswitch (params.sort_direction) {\r\n\t\t\t\tcase 'asc':\r\n\t\t\t\t\t_seriesCollection.sort(sortSeriesAsc);\r\n\t\t\t\t\t_seriesCollection.forEach((_series) => {\r\n\t\t\t\t\t\t_series.expansions.sort(sortExpansionAsc);\r\n\t\t\t\t\t});\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'desc':\r\n\t\t\t\t\t_seriesCollection.sort(sortSeriesDesc);\r\n\t\t\t\t\t_seriesCollection.forEach((_series) => {\r\n\t\t\t\t\t\t_series.expansions.sort(sortExpansionDesc);\r\n\t\t\t\t\t});\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\treturn _seriesCollection;\r\n\t\t}\r\n\t}\r\n}\r\n",
            "properties": [
                {
                    "name": "query",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "sort_by",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "sort_direction",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "GetScanCardParams",
            "id": "interface-GetScanCardParams-1eb710104c6b5da503132dd1d086d014500650d5746e90c3f845eb3ffa920e5f0805a80505e931142dc82d33fc63a1cc104fde899d17f2be98fb2d08286d0703",
            "file": "src/app/services/scanner.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { environment } from '@app/../environments/environment';\r\n\r\nimport { APIResponse } from '@app/models/api';\r\nimport { ScannerList } from '@app/pages/scanner/scanner-lists/scanner-list/scanner-list';\r\nimport { Card } from '@app/pages/cards/card';\r\nimport { NotificationsService, Notification } from '@app/controls/notifications';\r\nimport { AlertType } from '@app/controls/alert/alert';\r\n\r\nexport enum ScanType {\r\n\tscan = \"scan\",\r\n\tmultiple = \"scan_multiple\",\r\n\tsnapshot = \"snapshot\"\r\n}\r\n\r\nexport interface GetScanCardParams {\r\n\timage: string;\r\n}\r\n\r\nexport interface GetScanCardsParams {\r\n\timage: string;\r\n}\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\n\r\nexport class ScannerService {\r\n\r\n    constructor(\r\n\t\tprivate http: HttpClient,\r\n\t\tprivate notificationService: NotificationsService) {}\r\n\r\n\t// TempId\r\n\tprivate tempId = 0;\r\n\tgetTempId() {\r\n\t\treturn this.tempId++;\r\n\t}\r\n\r\n\t// Scan single card\r\n\tprivate scanCardSubject = new BehaviorSubject<Card>(null);\r\n    getScanCardObservable() {\r\n\t\tthis.scanCardSubject = new BehaviorSubject<Card>(null);\r\n\t\treturn this.scanCardSubject.asObservable();\r\n\t}\r\n    getScanCard(params: GetScanCardParams) {\r\n        this.http.post<APIResponse>(environment.api + \"scanner/detect\", params).subscribe(res => {\r\n\t\t\tif (res.success) {\r\n\t\t\t\tlet card = new Card(res.data.card);\r\n\t\t\t\tif (card.id > 0) {\r\n\t\t\t\t\tthis.scanCardSubject.next(card);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.scanCardSubject.next(null);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t// Scan mutiple cards\r\n\tprivate scanCardsSubject = new BehaviorSubject<Card[]>([]);\r\n\tgetScanCardsObservable() {\r\n\t\tthis.scanCardsSubject = new BehaviorSubject<Card[]>([])\r\n\t\treturn this.scanCardsSubject.asObservable();\r\n\t}\r\n\tgetScanCards(params: GetScanCardsParams) {\r\n\t\tthis.http.post<APIResponse>(environment.api + \"scanner/multiple\", params).subscribe(res => {\r\n\t\t\tif (res.success && res.data.length > 0) {\r\n\t\t\t\tlet cards: Card[] = [];\r\n\t\t\t\tres.data.forEach(card => {\r\n\t\t\t\t\tlet _card = new Card(card);\r\n\t\t\t\t\tif (_card.id > 0) {\r\n\t\t\t\t\t\tcards.push(_card);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\tthis.scanCardsSubject.next(cards);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.scanCardsSubject.next([]);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\t\r\n\t// Scan cache\r\n\tprivate _scannerList: ScannerList = new ScannerList();\r\n\tget scannerList() {\r\n\t\treturn this._scannerList;\r\n\t}\r\n\tset scannerList(scannerList) {\r\n\t\tthis._scannerList = scannerList;\r\n\t}\r\n\r\n\t// Clear cache\r\n\tclearScans() {\r\n\t\tthis._scannerList = new ScannerList();\r\n\t}\r\n\r\n\t// Scan cache\r\n\tprivate scansSubject = new BehaviorSubject<Card[]>([]);\r\n\tgetScansObservable() {\r\n\t\tthis.scansSubject = new BehaviorSubject<Card[]>([]);\r\n\t\treturn this.scansSubject.asObservable();\r\n\t}\r\n\tgetScans() {\r\n\t\tthis.scansSubject.next(this._scannerList.cards);\r\n\t}\r\n\r\n\tchangeVersion(cardOld: Card, cardNew: Card) {\r\n\t\t\r\n\r\n\t\t// Remove old card via tempId\r\n\t\t// this._scannerList.cards = this._scannerList.cards.filter(card => {\r\n\t\t// \treturn card.tempId != cardOld.tempId;\r\n\t\t// });\r\n\t\tlet updatedScannerListCards: Card[] = [];\r\n\t\tthis._scannerList.cards.forEach(card => {\r\n\t\t\tif (card.tempId === cardOld.tempId) {\r\n\t\t\t\tupdatedScannerListCards.push(cardNew);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tupdatedScannerListCards.push(card);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\r\n\t\tthis._scannerList.cards = updatedScannerListCards;\r\n\r\n\t\t// Add new card\r\n\t\t//cardNew.tempId = cardOld.tempId++;\r\n\t\t//this._scannerList.cards.push(cardNew);\r\n\r\n\t\t// Update subscriptions\r\n\t\tthis.scansSubject.next(this._scannerList.cards);\r\n\t}\r\n\r\n\tremoveCard(card: Card) {\r\n\t\tthis._scannerList.cards = this._scannerList.cards.filter(_card => {\r\n\t\t\treturn _card.tempId != card.tempId;\r\n\t\t});\r\n\r\n\t\t// Update subscriptions\r\n\t\tthis.scansSubject.next(this._scannerList.cards);\r\n\r\n\t\tthis.notificationService.addNotifications([\r\n\t\t\tnew Notification({\r\n\t\t\t\talertType: AlertType.success,\r\n\t\t\t\tmessage: \"Removed \" + card.name + \" from results\"\r\n\t\t\t})\r\n\t\t]);\r\n\t}\r\n\r\n}",
            "properties": [
                {
                    "name": "image",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "GetScanCardsParams",
            "id": "interface-GetScanCardsParams-1eb710104c6b5da503132dd1d086d014500650d5746e90c3f845eb3ffa920e5f0805a80505e931142dc82d33fc63a1cc104fde899d17f2be98fb2d08286d0703",
            "file": "src/app/services/scanner.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { environment } from '@app/../environments/environment';\r\n\r\nimport { APIResponse } from '@app/models/api';\r\nimport { ScannerList } from '@app/pages/scanner/scanner-lists/scanner-list/scanner-list';\r\nimport { Card } from '@app/pages/cards/card';\r\nimport { NotificationsService, Notification } from '@app/controls/notifications';\r\nimport { AlertType } from '@app/controls/alert/alert';\r\n\r\nexport enum ScanType {\r\n\tscan = \"scan\",\r\n\tmultiple = \"scan_multiple\",\r\n\tsnapshot = \"snapshot\"\r\n}\r\n\r\nexport interface GetScanCardParams {\r\n\timage: string;\r\n}\r\n\r\nexport interface GetScanCardsParams {\r\n\timage: string;\r\n}\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\n\r\nexport class ScannerService {\r\n\r\n    constructor(\r\n\t\tprivate http: HttpClient,\r\n\t\tprivate notificationService: NotificationsService) {}\r\n\r\n\t// TempId\r\n\tprivate tempId = 0;\r\n\tgetTempId() {\r\n\t\treturn this.tempId++;\r\n\t}\r\n\r\n\t// Scan single card\r\n\tprivate scanCardSubject = new BehaviorSubject<Card>(null);\r\n    getScanCardObservable() {\r\n\t\tthis.scanCardSubject = new BehaviorSubject<Card>(null);\r\n\t\treturn this.scanCardSubject.asObservable();\r\n\t}\r\n    getScanCard(params: GetScanCardParams) {\r\n        this.http.post<APIResponse>(environment.api + \"scanner/detect\", params).subscribe(res => {\r\n\t\t\tif (res.success) {\r\n\t\t\t\tlet card = new Card(res.data.card);\r\n\t\t\t\tif (card.id > 0) {\r\n\t\t\t\t\tthis.scanCardSubject.next(card);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.scanCardSubject.next(null);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t// Scan mutiple cards\r\n\tprivate scanCardsSubject = new BehaviorSubject<Card[]>([]);\r\n\tgetScanCardsObservable() {\r\n\t\tthis.scanCardsSubject = new BehaviorSubject<Card[]>([])\r\n\t\treturn this.scanCardsSubject.asObservable();\r\n\t}\r\n\tgetScanCards(params: GetScanCardsParams) {\r\n\t\tthis.http.post<APIResponse>(environment.api + \"scanner/multiple\", params).subscribe(res => {\r\n\t\t\tif (res.success && res.data.length > 0) {\r\n\t\t\t\tlet cards: Card[] = [];\r\n\t\t\t\tres.data.forEach(card => {\r\n\t\t\t\t\tlet _card = new Card(card);\r\n\t\t\t\t\tif (_card.id > 0) {\r\n\t\t\t\t\t\tcards.push(_card);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\tthis.scanCardsSubject.next(cards);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.scanCardsSubject.next([]);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\t\r\n\t// Scan cache\r\n\tprivate _scannerList: ScannerList = new ScannerList();\r\n\tget scannerList() {\r\n\t\treturn this._scannerList;\r\n\t}\r\n\tset scannerList(scannerList) {\r\n\t\tthis._scannerList = scannerList;\r\n\t}\r\n\r\n\t// Clear cache\r\n\tclearScans() {\r\n\t\tthis._scannerList = new ScannerList();\r\n\t}\r\n\r\n\t// Scan cache\r\n\tprivate scansSubject = new BehaviorSubject<Card[]>([]);\r\n\tgetScansObservable() {\r\n\t\tthis.scansSubject = new BehaviorSubject<Card[]>([]);\r\n\t\treturn this.scansSubject.asObservable();\r\n\t}\r\n\tgetScans() {\r\n\t\tthis.scansSubject.next(this._scannerList.cards);\r\n\t}\r\n\r\n\tchangeVersion(cardOld: Card, cardNew: Card) {\r\n\t\t\r\n\r\n\t\t// Remove old card via tempId\r\n\t\t// this._scannerList.cards = this._scannerList.cards.filter(card => {\r\n\t\t// \treturn card.tempId != cardOld.tempId;\r\n\t\t// });\r\n\t\tlet updatedScannerListCards: Card[] = [];\r\n\t\tthis._scannerList.cards.forEach(card => {\r\n\t\t\tif (card.tempId === cardOld.tempId) {\r\n\t\t\t\tupdatedScannerListCards.push(cardNew);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tupdatedScannerListCards.push(card);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\r\n\t\tthis._scannerList.cards = updatedScannerListCards;\r\n\r\n\t\t// Add new card\r\n\t\t//cardNew.tempId = cardOld.tempId++;\r\n\t\t//this._scannerList.cards.push(cardNew);\r\n\r\n\t\t// Update subscriptions\r\n\t\tthis.scansSubject.next(this._scannerList.cards);\r\n\t}\r\n\r\n\tremoveCard(card: Card) {\r\n\t\tthis._scannerList.cards = this._scannerList.cards.filter(_card => {\r\n\t\t\treturn _card.tempId != card.tempId;\r\n\t\t});\r\n\r\n\t\t// Update subscriptions\r\n\t\tthis.scansSubject.next(this._scannerList.cards);\r\n\r\n\t\tthis.notificationService.addNotifications([\r\n\t\t\tnew Notification({\r\n\t\t\t\talertType: AlertType.success,\r\n\t\t\t\tmessage: \"Removed \" + card.name + \" from results\"\r\n\t\t\t})\r\n\t\t]);\r\n\t}\r\n\r\n}",
            "properties": [
                {
                    "name": "image",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ReleaseNote",
            "id": "interface-ReleaseNote-75f3501d13db17f0f0530f37cc173b649c741a295b1f6bbba58adef03d5f11dd0d946a478f9ee0a7e326d4a99f6987a9341b884076d0a3ed9477523dc487363f",
            "file": "src/app/services/release-notes.services.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\nexport interface ReleaseNote {\r\n\ttitle: string;\r\n\tversion: string;\r\n\tcontent: string;\r\n\tdate: Date;\r\n}\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ReleaseNotesServices {\r\n\tprivate _releaseNotes: ReleaseNote[] = [\r\n\t\t{\r\n\t\t\ttitle: 'Welcome to RotomDex',\r\n\t\t\tcontent: `Our first release is focused on delivering TCG information including expansion, card, and Pokemon data.\r\n\t\t\t\tWe are ironing out initial project startup issue and refining the user interface for desktop and mobile.\r\n\t\t\t\tWe plan to develop addition features including a card scanner and collection management in the future.\r\n\t\t\t\tIf you run into any bugs or have suggestions for improvement we would love to hear from you via our contact from.`,\r\n\t\t\tversion: '0.9.6',\r\n\t\t\tdate: new Date('4/7/2021'),\r\n\t\t},\r\n\t\t{\r\n\t\t\ttitle: 'Our long-term goal',\r\n\t\t\tcontent: `We started building RotomDex after hearing from many friends and people within the Pokemon TCG community.\r\n\t\t\t\tWe all want a better way to manage our ever growing collection of amazing cards!\r\n\t\t\t\tThere are a few existing TCG collection management solutions, but nothing that stands out or has features for Pokemon fans.\r\n\t\t\t\tRotomDex is our solution to this desire, a mobile app and website that makes it easy to catalog every Pokemon card in your collection.`,\r\n\t\t\tversion: '0.9.7',\r\n\t\t\tdate: new Date('5/11/2021'),\r\n\t\t},\r\n\t];\r\n\r\n\t_releaseNotesSorted = this._releaseNotes.sort(\r\n\t\t(a, b) => <any>b.date - <any>a.date\r\n\t);\r\n\r\n\tconstructor(private http: HttpClient) {}\r\n\r\n\t// Get release notes\r\n\tprivate allReleaseNotesSubject = new BehaviorSubject<ReleaseNote[]>([]);\r\n\tgetReleaseNotesObservable() {\r\n\t\tthis.allReleaseNotesSubject = new BehaviorSubject<ReleaseNote[]>([]);\r\n\t\treturn this.allReleaseNotesSubject.asObservable();\r\n\t}\r\n\tgetReleaseNotes() {\r\n\t\tthis.allReleaseNotesSubject.next(this._releaseNotesSorted);\r\n\t}\r\n}\r\n",
            "properties": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "date",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "version",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ResPokemons",
            "id": "interface-ResPokemons-9802f6f2c1c85b93461515b33227824634eae6d693b813561ee265ca08ea2f9d75bdb7798e57162fa645b38371dcb7af129025dd92ee1762c5c75b71d7e0b0d0",
            "file": "src/app/services/pokemons.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { APIGetPaged, APIResponse } from '@app/models';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { environment } from 'src/environments/environment';\r\nimport { Pokemon, PokemonVariant } from '../pages/pokemons/pokemon/pokemon';\r\n\r\nexport class GetPokemons extends APIGetPaged {\r\n\tconstructor(init?: Partial<GetPokemons>) {\r\n\t\tsuper();\r\n\t\tObject.assign(this, init);\r\n\t}\r\n}\r\n\r\nexport interface ResPokemons {\r\n\ttotal_results: number;\r\n\ttotal_pages: number;\r\n\tpokemons?: Pokemon[];\r\n}\r\n\r\nexport class GetPokemonVariants extends APIGetPaged {\r\n\ttype: string;\r\n\tconstructor(init?: Partial<GetPokemonVariants>) {\r\n\t\tsuper();\r\n\t\tObject.assign(this, init);\r\n\t}\r\n}\r\n\r\nexport interface ResPokemonVariants {\r\n\ttotal_results: number;\r\n\ttotal_pages: number;\r\n\tpokemon_variants?: PokemonVariant[];\r\n}\r\n\r\n@Injectable({\r\n\tprovidedIn: 'root',\r\n})\r\nexport class PokemonsService {\r\n\tconstructor(private http: HttpClient) {}\r\n\r\n\t// Get all pokemons\r\n\tprivate getPokemonsSubject = new BehaviorSubject<ResPokemons>(null);\r\n\tgetPokemonsObservable() {\r\n\t\tthis.getPokemonsSubject = new BehaviorSubject<ResPokemons>(null);\r\n\t\treturn this.getPokemonsSubject.asObservable();\r\n\t}\r\n\tgetPokemons(params: GetPokemons) {\r\n\t\tvar url = params.buildUrl('pokemon');\r\n\t\tthis.http.get<APIResponse>(url).subscribe((res) => {\r\n\t\t\tlet pokemons: Pokemon[] = [];\r\n\t\t\tres.data.forEach((pokemon) => {\r\n\t\t\t\tpokemons.push(new Pokemon(pokemon));\r\n\t\t\t});\r\n\t\t\tthis.getPokemonsSubject.next({\r\n\t\t\t\ttotal_pages: res.meta.last_page,\r\n\t\t\t\ttotal_results: res.meta.total,\r\n\t\t\t\tpokemons: pokemons,\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\r\n\t// Get all pokemons\r\n\tprivate getPokemonVariantsSubject = new BehaviorSubject<ResPokemonVariants>(\r\n\t\tnull\r\n\t);\r\n\tgetPokemonVariantsObservable() {\r\n\t\tthis.getPokemonVariantsSubject =\r\n\t\t\tnew BehaviorSubject<ResPokemonVariants>(null);\r\n\t\treturn this.getPokemonVariantsSubject.asObservable();\r\n\t}\r\n\tgetPokemonVariants(params: GetPokemonVariants) {\r\n\t\tvar url = params.buildUrl('pokemon-variants');\r\n\t\tthis.http.get<APIResponse>(url).subscribe((res) => {\r\n\t\t\tlet pokemon_variants: PokemonVariant[] = [];\r\n\t\t\tres.data.forEach((pokemon_variant) => {\r\n\t\t\t\tpokemon_variants.push(new PokemonVariant(pokemon_variant));\r\n\t\t\t});\r\n\t\t\tthis.getPokemonVariantsSubject.next({\r\n\t\t\t\ttotal_pages: res.meta.last_page,\r\n\t\t\t\ttotal_results: res.meta.total,\r\n\t\t\t\tpokemon_variants: pokemon_variants,\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n}\r\n",
            "properties": [
                {
                    "name": "pokemons",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Pokemon[]",
                    "optional": true,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "total_pages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "total_results",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ResPokemonVariantCards",
            "id": "interface-ResPokemonVariantCards-2f51944a47bbaa83050d3811faadd877c6a331b7a3c22d63fea5b816f4ce30a6d3b49dce31f1c230d3f05f676f6d10f8297e81ce452438d9b48a234cbf0cfb41",
            "file": "src/app/services/pokemon.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { HttpClient } from \"@angular/common/http\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { APIGetPaged, APIResponse } from \"@app/models\";\r\nimport { Card } from \"@app/pages/cards\";\r\nimport { BehaviorSubject } from \"rxjs\";\r\nimport { environment } from \"src/environments/environment\";\r\nimport { Pokemon, PokemonVariant } from \"../pages/pokemons/pokemon/pokemon\";\r\nimport { CacheGlobal } from \"./cache/globalCache\";\r\n\r\n// Get pokemon interfaces\r\nexport class GetPokemonVariantCards extends APIGetPaged {\r\n\tslug: string;\r\n\tconstructor(init?:Partial<GetPokemonVariantCards>) {\r\n\t\tsuper();\r\n\t\tObject.assign(this, init);\r\n\t}\r\n}\r\nexport interface ResPokemonVariantCards {\r\n\ttotal_results: number;\r\n\ttotal_pages: number;\r\n\tcards: Card[];\r\n}\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\n\r\nexport class PokemonService {\r\n\r\n\tconstructor(private http: HttpClient) {}\r\n\r\n\t// Get pokemon\r\n\tprivate getPokemonSubject = new BehaviorSubject<Pokemon>(null);\r\n\tgetPokemonObservable() {\r\n\t\tthis.getPokemonSubject = new BehaviorSubject<Pokemon>(null);\r\n\t\treturn this.getPokemonSubject.asObservable();\r\n\t}\r\n\tgetPokemon(slug: string) {\r\n\t\tif (CacheGlobal.pokemon[slug]) {\r\n\t\t\tthis.getPokemonSubject.next(CacheGlobal.pokemon[slug]);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.http.get<APIResponse>(`${environment.api}pokemon/${slug}`).subscribe(res => {\r\n\t\t\t\tthis.getPokemonSubject.next(new Pokemon(res.data));\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t// Get pokemon variant\r\n\tprivate getPokemonVariantSubject = new BehaviorSubject<PokemonVariant>(null);\r\n\tgetPokemonVariantObservable() {\r\n\t\tthis.getPokemonVariantSubject = new BehaviorSubject<PokemonVariant>(null);\r\n\t\treturn this.getPokemonVariantSubject.asObservable();\r\n\t}\r\n\tgetPokemonVariant(slug: string) {\r\n\t\tif (CacheGlobal.pokemonVariant[slug]) {\r\n\t\t\tthis.getPokemonVariantSubject.next(CacheGlobal.pokemonVariant[slug]);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.http.get<APIResponse>(`${environment.api}pokemon-variants/${slug}`).subscribe(res => {\r\n\t\t\t\tthis.getPokemonVariantSubject.next(new PokemonVariant(res.data));\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t// Get pokemon variant cards\r\n\tprivate getPokemonVariantCardsSubject = new BehaviorSubject<ResPokemonVariantCards>(null);\r\n\tgetPokemonVariantCardsObservable() {\r\n\t\tthis.getPokemonVariantCardsSubject = new BehaviorSubject<ResPokemonVariantCards>(null);\r\n\t\treturn this.getPokemonVariantCardsSubject.asObservable();\r\n\t}\r\n\tgetPokemonVariantCards(params: GetPokemonVariantCards) {\r\n\t\tvar url = params.buildUrl(`pokemon-variants/${params.slug}/cards`);\r\n\t\tthis.http.get<APIResponse>(url).subscribe(res => {\r\n\t\t\tlet cards = [];\r\n\t\t\tres.data.forEach(card => {\r\n\t\t\t\tcards.push(new Card(card));\r\n\t\t\t});\r\n\t\t\tthis.getPokemonVariantCardsSubject.next({\r\n\t\t\t\ttotal_pages: res.meta.last_page,\r\n\t\t\t\ttotal_results: res.meta.total,\r\n\t\t\t\tcards: cards\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\r\n}",
            "properties": [
                {
                    "name": "cards",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Card[]",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "total_pages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "total_results",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ResPokemonVariants",
            "id": "interface-ResPokemonVariants-9802f6f2c1c85b93461515b33227824634eae6d693b813561ee265ca08ea2f9d75bdb7798e57162fa645b38371dcb7af129025dd92ee1762c5c75b71d7e0b0d0",
            "file": "src/app/services/pokemons.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { APIGetPaged, APIResponse } from '@app/models';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { environment } from 'src/environments/environment';\r\nimport { Pokemon, PokemonVariant } from '../pages/pokemons/pokemon/pokemon';\r\n\r\nexport class GetPokemons extends APIGetPaged {\r\n\tconstructor(init?: Partial<GetPokemons>) {\r\n\t\tsuper();\r\n\t\tObject.assign(this, init);\r\n\t}\r\n}\r\n\r\nexport interface ResPokemons {\r\n\ttotal_results: number;\r\n\ttotal_pages: number;\r\n\tpokemons?: Pokemon[];\r\n}\r\n\r\nexport class GetPokemonVariants extends APIGetPaged {\r\n\ttype: string;\r\n\tconstructor(init?: Partial<GetPokemonVariants>) {\r\n\t\tsuper();\r\n\t\tObject.assign(this, init);\r\n\t}\r\n}\r\n\r\nexport interface ResPokemonVariants {\r\n\ttotal_results: number;\r\n\ttotal_pages: number;\r\n\tpokemon_variants?: PokemonVariant[];\r\n}\r\n\r\n@Injectable({\r\n\tprovidedIn: 'root',\r\n})\r\nexport class PokemonsService {\r\n\tconstructor(private http: HttpClient) {}\r\n\r\n\t// Get all pokemons\r\n\tprivate getPokemonsSubject = new BehaviorSubject<ResPokemons>(null);\r\n\tgetPokemonsObservable() {\r\n\t\tthis.getPokemonsSubject = new BehaviorSubject<ResPokemons>(null);\r\n\t\treturn this.getPokemonsSubject.asObservable();\r\n\t}\r\n\tgetPokemons(params: GetPokemons) {\r\n\t\tvar url = params.buildUrl('pokemon');\r\n\t\tthis.http.get<APIResponse>(url).subscribe((res) => {\r\n\t\t\tlet pokemons: Pokemon[] = [];\r\n\t\t\tres.data.forEach((pokemon) => {\r\n\t\t\t\tpokemons.push(new Pokemon(pokemon));\r\n\t\t\t});\r\n\t\t\tthis.getPokemonsSubject.next({\r\n\t\t\t\ttotal_pages: res.meta.last_page,\r\n\t\t\t\ttotal_results: res.meta.total,\r\n\t\t\t\tpokemons: pokemons,\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\r\n\t// Get all pokemons\r\n\tprivate getPokemonVariantsSubject = new BehaviorSubject<ResPokemonVariants>(\r\n\t\tnull\r\n\t);\r\n\tgetPokemonVariantsObservable() {\r\n\t\tthis.getPokemonVariantsSubject =\r\n\t\t\tnew BehaviorSubject<ResPokemonVariants>(null);\r\n\t\treturn this.getPokemonVariantsSubject.asObservable();\r\n\t}\r\n\tgetPokemonVariants(params: GetPokemonVariants) {\r\n\t\tvar url = params.buildUrl('pokemon-variants');\r\n\t\tthis.http.get<APIResponse>(url).subscribe((res) => {\r\n\t\t\tlet pokemon_variants: PokemonVariant[] = [];\r\n\t\t\tres.data.forEach((pokemon_variant) => {\r\n\t\t\t\tpokemon_variants.push(new PokemonVariant(pokemon_variant));\r\n\t\t\t});\r\n\t\t\tthis.getPokemonVariantsSubject.next({\r\n\t\t\t\ttotal_pages: res.meta.last_page,\r\n\t\t\t\ttotal_results: res.meta.total,\r\n\t\t\t\tpokemon_variants: pokemon_variants,\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n}\r\n",
            "properties": [
                {
                    "name": "pokemon_variants",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PokemonVariant[]",
                    "optional": true,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "total_pages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "total_results",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 30
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "String",
            "id": "interface-String-4090277bd435ca1b08bed6591f8f240b019e6f0608361d76d0f7ca6e79cc797dda93eb31f27c2b978a220d22c9e1b19fada698ce0cf455bdebc1e6d70775a005",
            "file": "src/app/helpers/string.extensions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "interface String {\r\n    trimEnds(): string;\r\n    parseNewLine(): string;\r\n}\r\n\r\n// Parse new line\r\nString.prototype.parseNewLine = function(): string {\r\n    return this.replace(/(?:\\r\\n|\\r|\\n)/g, '<br>');\r\n}\r\n\r\n// Trim first and last character (\"\")\r\nString.prototype.trimEnds = function(): string {\r\n    return this.substr(1).slice(0, -1);\r\n}",
            "properties": [],
            "indexSignatures": [],
            "kind": 167,
            "methods": [
                {
                    "name": "parseNewLine",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 4,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "trimEnds",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 3,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ]
        },
        {
            "name": "User",
            "id": "interface-User-9c7e5f1bbbab702cb032307d130876cb68969b0cd4eedef32a0c8cad8081a54e5f8f577ed6ad4539c1b99a1d246cb34031d198c2ea8eba440e64e91b14f01fdc",
            "file": "src/stories/User.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {}\n",
            "properties": [],
            "indexSignatures": [],
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "AuthenticationService",
            "id": "injectable-AuthenticationService-0014e59359ad3a982ecf071fe8fa8a4c3fbb00391b20b8a387463afc22c023a04ef3117351992ef9151fe983c6d110c8ab85ec735bdf814d7143f41ece2083ab",
            "file": "src/app/services/auth.service.ts",
            "properties": [
                {
                    "name": "currentUserObservable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<User>",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "currentUserSubject",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<User>",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "forgot",
                    "args": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "login",
                    "args": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "register",
                    "args": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "username",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "password_confirmation",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "username",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password_confirmation",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "reset",
                    "args": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "password_confirmation",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password_confirmation",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport { environment } from '../../environments/environment';\r\nimport { User } from '@app/models/user';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class AuthenticationService {\r\n\tprivate currentUserSubject: BehaviorSubject<User>;\r\n\tpublic currentUserObservable: Observable<User>;\r\n\r\n\tconstructor(private http: HttpClient) {\r\n\t\tthis.currentUserSubject = new BehaviorSubject<User>(\r\n\t\t\tJSON.parse(localStorage.getItem('currentUser'))\r\n\t\t);\r\n\t\tthis.currentUserObservable = this.currentUserSubject.asObservable();\r\n\t}\r\n\r\n\tpublic get currentUserValue(): User {\r\n\t\treturn this.currentUserSubject.value;\r\n\t}\r\n\r\n\tlogin(email: string, password: string) {\r\n\t\treturn this.http\r\n\t\t\t.post<any>(environment.api + 'login', { email, password })\r\n\t\t\t.pipe(\r\n\t\t\t\tmap((res) => {\r\n\t\t\t\t\t// store user details and jwt token in local storage to keep user logged in between page refreshes\r\n\t\t\t\t\tlet user: User = new User(res.data.user);\r\n\t\t\t\t\tuser.token = res.data.token;\r\n\t\t\t\t\tuser.expires_at = res.data.expires_at;\r\n\t\t\t\t\tlocalStorage.setItem('currentUser', JSON.stringify(user));\r\n\t\t\t\t\tthis.currentUserSubject.next(user);\r\n\t\t\t\t\treturn user;\r\n\t\t\t\t})\r\n\t\t\t);\r\n\t}\r\n\r\n\tlogout() {\r\n\t\t// remove user from local storage to log user out\r\n\t\tlocalStorage.removeItem('currentUser');\r\n\t\tthis.currentUserSubject.next(null);\r\n\t\tlocation.reload();\r\n\t}\r\n\r\n\tregister(\r\n\t\temail: string,\r\n\t\tusername: string,\r\n\t\tpassword: string,\r\n\t\tpassword_confirmation: string\r\n\t) {\r\n\t\treturn this.http\r\n\t\t\t.post<any>(environment.api + 'register', {\r\n\t\t\t\temail,\r\n\t\t\t\tusername,\r\n\t\t\t\tpassword,\r\n\t\t\t\tpassword_confirmation,\r\n\t\t\t})\r\n\t\t\t.pipe(\r\n\t\t\t\tmap((res) => {\r\n\t\t\t\t\tlet user: User = new User(res.data.user);\r\n\t\t\t\t\tuser.token = res.data.token;\r\n\t\t\t\t\tlocalStorage.setItem('currentUser', JSON.stringify(user));\r\n\t\t\t\t\tthis.currentUserSubject.next(user);\r\n\t\t\t\t})\r\n\t\t\t);\r\n\t}\r\n\r\n\tforgot(email: string) {\r\n\t\treturn this.http.post<any>(environment.api + 'forgot-password', {\r\n\t\t\temail,\r\n\t\t});\r\n\t}\r\n\r\n\treset(\r\n\t\ttoken: string,\r\n\t\temail: string,\r\n\t\tpassword: string,\r\n\t\tpassword_confirmation: string\r\n\t) {\r\n\t\treturn this.http.post<any>(environment.api + 'password-reset', {\r\n\t\t\ttoken,\r\n\t\t\temail,\r\n\t\t\tpassword,\r\n\t\t\tpassword_confirmation,\r\n\t\t});\r\n\t}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "currentUserValue": {
                    "name": "currentUserValue",
                    "getSignature": {
                        "name": "currentUserValue",
                        "type": "",
                        "returnType": "User",
                        "line": 21
                    }
                }
            },
            "type": "injectable"
        },
        {
            "name": "CardService",
            "id": "injectable-CardService-f7cbff678b57b8cbdb5a164859ddf3f7d3780e89e0a27a0535553f905b59c936a4492bee3f1c13395a8f204cc7fcd8fd847b644940c0e04133d901a72d999d73",
            "file": "src/app/services/card.service.ts",
            "properties": [
                {
                    "name": "getCardSubject",
                    "defaultValue": "new BehaviorSubject<Card>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getCard",
                    "args": [
                        {
                            "name": "code",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "code",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCardObservable",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { LoaderService } from './../controls/loader/loader.service';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { APIResponse } from '@app/models';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { environment } from 'src/environments/environment';\r\nimport { Card } from '../pages/cards/card/card';\r\nimport { CacheGlobal } from './cache/globalCache';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class CardService {\r\n\tconstructor(\r\n\t\tprivate http: HttpClient,\r\n\t\tprivate loaderService: LoaderService\r\n\t) {}\r\n\r\n\t// Get card\r\n\tprivate getCardSubject = new BehaviorSubject<Card>(null);\r\n\tgetCardObservable() {\r\n\t\tthis.getCardSubject = new BehaviorSubject<Card>(null);\r\n\t\treturn this.getCardSubject.asObservable();\r\n\t}\r\n\tgetCard(code: string) {\r\n\t\t// Try cache\r\n\t\tif (CacheGlobal.card[code]) {\r\n\t\t\tthis.getCardSubject.next(CacheGlobal.card[code]);\r\n\t\t} else {\r\n\t\t\t// Show loader\r\n\t\t\tthis.loaderService.addItemLoading('getCard');\r\n\t\t\t// Request\r\n\t\t\tthis.http\r\n\t\t\t\t.get<APIResponse>(environment.api + 'card/' + code)\r\n\t\t\t\t.subscribe((res) => {\r\n\t\t\t\t\tvar card = new Card(res.data);\r\n\t\t\t\t\t// Add to cache\r\n\t\t\t\t\tCacheGlobal.card[code] = card;\r\n\t\t\t\t\tthis.getCardSubject.next(card);\r\n\t\t\t\t\t// Hide loader\r\n\t\t\t\t\tthis.loaderService.clearItemLoading('getCard');\r\n\t\t\t\t});\r\n\t\t}\r\n\t}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "loaderService",
                        "type": "LoaderService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "loaderService",
                        "type": "LoaderService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "CardsService",
            "id": "injectable-CardsService-ee72209a045692f73d3c36cf2e639bb1399b03c38cda317df9f57023ed862d0ba7ed8b4f858b362679627885e3fe8eeb526cb13fe0c2fc7d5f075f2b443dea66",
            "file": "src/app/services/cards.service.ts",
            "properties": [
                {
                    "name": "getCardsFilteredSubject",
                    "defaultValue": "new BehaviorSubject<CardResults>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "getCardsSubject",
                    "defaultValue": "new BehaviorSubject<CardResults>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getCards",
                    "args": [
                        {
                            "name": "params",
                            "type": "GetCards",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "GetCards",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCardsFiltered",
                    "args": [
                        {
                            "name": "params",
                            "type": "GetCardsFiltered",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "GetCardsFiltered",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCardsFilteredObservable",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getCardsObservable",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { APIGetPaged, APIResponse } from '@app/models';\r\nimport { Card } from '@app/pages/cards/card/card';\r\n\r\nexport class GetCards extends APIGetPaged {\r\n\tconstructor(init?: Partial<GetCards>) {\r\n\t\tsuper();\r\n\t\tObject.assign(this, init);\r\n\t}\r\n}\r\n\r\nexport class GetCardsFiltered extends APIGetPaged {\r\n\tconstructor(init?: Partial<GetCards>) {\r\n\t\tsuper();\r\n\t\tObject.assign(this, init);\r\n\t}\r\n}\r\n\r\nexport interface CardResults {\r\n\ttotal_value?: number;\r\n\ttotal_results: number;\r\n\ttotal_pages: number;\r\n\tcards?: Card[];\r\n}\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class CardsService {\r\n\tconstructor(private http: HttpClient) {}\r\n\r\n\t// Get cards\r\n\tprivate getCardsSubject = new BehaviorSubject<CardResults>(null);\r\n\tgetCardsObservable() {\r\n\t\tthis.getCardsSubject = new BehaviorSubject<CardResults>(null);\r\n\t\treturn this.getCardsSubject.asObservable();\r\n\t}\r\n\tgetCards(params: GetCards) {\r\n\t\tvar url = params.buildUrl('cards');\r\n\t\tthis.http.get<APIResponse>(url).subscribe((res) => {\r\n\t\t\tlet cards = [];\r\n\t\t\tres.data.forEach((card) => {\r\n\t\t\t\tcards.push(new Card(card));\r\n\t\t\t});\r\n\t\t\tthis.getCardsSubject.next({\r\n\t\t\t\tcards: cards,\r\n\t\t\t\ttotal_pages: res.meta.last_page,\r\n\t\t\t\ttotal_results: res.meta.total,\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\r\n\t// Get cards filtered\r\n\tprivate getCardsFilteredSubject = new BehaviorSubject<CardResults>(null);\r\n\tgetCardsFilteredObservable() {\r\n\t\tthis.getCardsFilteredSubject = new BehaviorSubject<CardResults>(null);\r\n\t\treturn this.getCardsFilteredSubject.asObservable();\r\n\t}\r\n\tgetCardsFiltered(params: GetCardsFiltered) {\r\n\t\tvar url = params.buildUrl('cards/filter');\r\n\t\tthis.http.get<APIResponse>(url).subscribe((res) => {\r\n\t\t\tlet cards = [];\r\n\t\t\tres.data.forEach((card) => {\r\n\t\t\t\tcards.push(new Card(card));\r\n\t\t\t});\r\n\t\t\tthis.getCardsFilteredSubject.next({\r\n\t\t\t\tcards: cards,\r\n\t\t\t\ttotal_pages: res.meta.last_page,\r\n\t\t\t\ttotal_results: res.meta.total,\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 29,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "DialogService",
            "id": "injectable-DialogService-52de6826ca4ecd290fd80ffe4aa3d132a6eb6cb0d51a3b79522f858662ae36310e1486d8b606d2b085e752c64eb22f01564b11236c01bc3cd5c9658a66a4c957",
            "file": "src/app/controls/dialog/dialog.service.ts",
            "properties": [
                {
                    "name": "dialog",
                    "defaultValue": "new BehaviorSubject(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<Dialog>",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methods": [
                {
                    "name": "setDialog",
                    "args": [
                        {
                            "name": "dialog",
                            "type": "Dialog",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "dialog",
                            "type": "Dialog",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from \"@angular/core\";\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { Dialog } from \"./dialog\";\r\n\r\n@Injectable({\r\n\tprovidedIn: 'root'\r\n})\r\n\r\nexport class DialogService {\r\n\r\n\tdialog: BehaviorSubject<Dialog> = new BehaviorSubject(null);\r\n\tconstructor() {}\r\n\r\n\tsetDialog(dialog: Dialog) {\r\n\t\tthis.dialog.next(dialog);\r\n\t}\r\n\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 11
            },
            "type": "injectable"
        },
        {
            "name": "ExpansionService",
            "id": "injectable-ExpansionService-23ab2b7756a62f2b460ae3082cf43668a520b6a72be509726a2bc15361dabb766813282e211e7dc697f90a11f5982bbf5895502a4f950526695241029f7fe998",
            "file": "src/app/services/expansion.service.ts",
            "properties": [
                {
                    "name": "getExpansionCardsSubject",
                    "defaultValue": "new BehaviorSubject<CardResults>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "getExpansionSubject",
                    "defaultValue": "new BehaviorSubject<Expansion>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getExpansion",
                    "args": [
                        {
                            "name": "params",
                            "type": "GetExpansion",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "GetExpansion",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getExpansionCards",
                    "args": [
                        {
                            "name": "params",
                            "type": "GetExpansionCards",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "GetExpansionCards",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getExpansionCardsObservable",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getExpansionObservable",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from \"@angular/common/http\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { APIGetPaged, APIResponse } from \"@app/models\";\r\nimport { Card, Expansion } from \"@app/pages\";\r\nimport { BehaviorSubject } from \"rxjs\";\r\nimport { CacheGlobal } from \"./cache/globalCache\";\r\nimport { CardResults } from \"./cards.service\";\r\n\r\nexport class GetExpansion extends APIGetPaged {\r\n\tcode: string;\r\n\tconstructor(init?:Partial<GetExpansion>) {\r\n\t\tsuper();\r\n\t\tObject.assign(this, init);\r\n\t}\r\n}\r\n\r\nexport class GetExpansionCards extends APIGetPaged {\r\n\tcode: string;\r\n\tconstructor(init?:Partial<GetExpansion>) {\r\n\t\tsuper();\r\n\t\tObject.assign(this, init);\r\n\t}\r\n}\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\n\r\nexport class ExpansionService {\r\n\r\n\tconstructor(\r\n\t\tprivate http: HttpClient) {}\r\n\r\n\t// Get expansion\r\n    private getExpansionSubject = new BehaviorSubject<Expansion>(null);\r\n\tgetExpansionObservable() {\r\n\t\tthis.getExpansionSubject = new BehaviorSubject<Expansion>(null);\r\n\t\treturn this.getExpansionSubject.asObservable()\r\n\t}\r\n\tgetExpansion(params: GetExpansion) {\r\n\t\tif (CacheGlobal.expansion[params.code]) {\r\n\t\t\tthis.getExpansionSubject.next(CacheGlobal.expansion[params.code]);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tvar url = params.buildUrl(\"expansion/\" + params.code);\r\n\t\t\tthis.http.get<APIResponse>(url).subscribe(res => {\r\n\t\t\t\tvar expansion = new Expansion(res.data);\r\n\t\t\t\tthis.getExpansionSubject.next(expansion);\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t// Expansions cards\r\n    private getExpansionCardsSubject = new BehaviorSubject<CardResults>(null);\r\n    getExpansionCardsObservable() {\r\n\t\tthis.getExpansionCardsSubject = new BehaviorSubject<CardResults>(null);\r\n\t\treturn this.getExpansionCardsSubject.asObservable()\r\n\t}\r\n    getExpansionCards(params: GetExpansionCards) {\r\n\t\tvar url = params.buildUrl(\"expansion/\" + params.code + \"/cards\");\r\n        this.http.get<APIResponse>(url).subscribe(res => {\r\n\t\t\tlet cards: Card[] = [];\r\n\t\t\tres.data.forEach(card => {\r\n\t\t\t\tcards.push(new Card(card));\r\n\t\t\t});\r\n\t\t\tthis.getExpansionCardsSubject.next({\r\n\t\t\t\tcards: cards,\r\n\t\t\t\ttotal_pages: res.meta.last_page,\r\n\t\t\t\ttotal_results: res.meta.total\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 29,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ExpansionsService",
            "id": "injectable-ExpansionsService-5e47ed4b4d26b3f46a1cc79734d305aba0b7bfc3dd3bba576e763d9f09f0219f2024a045b7444b9e0eb6a5cea839b33bcf59c4b6c0248c7973ff6f2aff1cd2ea",
            "file": "src/app/services/expansions.service.ts",
            "properties": [
                {
                    "name": "getExpansionsSubject",
                    "defaultValue": "new BehaviorSubject<Series[]>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getExpansions",
                    "args": [
                        {
                            "name": "params",
                            "type": "GetExpansions",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "GetExpansions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getExpansionsObservable",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "handleExpansionsParams",
                    "args": [
                        {
                            "name": "params",
                            "type": "GetExpansions",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "seriesCollection",
                            "type": "Series[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Series[]",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "GetExpansions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "seriesCollection",
                            "type": "Series[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { environment } from '@app/../environments/environment';\r\nimport { APIResponse } from '@app/models';\r\nimport { Expansion, Series } from '@app/pages/expansions/expansion/expansion';\r\nimport { CacheGlobal } from './cache/globalCache';\r\n\r\nexport interface GetExpansions {\r\n\tquery: string;\r\n\tsort_by: string;\r\n\tsort_direction: string;\r\n}\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ExpansionsService {\r\n\tconstructor(private http: HttpClient) {}\r\n\r\n\t// Get expansions\r\n\tprivate getExpansionsSubject = new BehaviorSubject<Series[]>(null);\r\n\tgetExpansionsObservable() {\r\n\t\tthis.getExpansionsSubject = new BehaviorSubject<Series[]>(null);\r\n\t\treturn this.getExpansionsSubject.asObservable();\r\n\t}\r\n\tgetExpansions(params: GetExpansions) {\r\n\t\tif (CacheGlobal.expansions) {\r\n\t\t\tthis.getExpansionsSubject.next(\r\n\t\t\t\tthis.handleExpansionsParams(params, CacheGlobal.expansions)\r\n\t\t\t);\r\n\t\t} else {\r\n\t\t\tthis.http\r\n\t\t\t\t.get<APIResponse>(`${environment.api}expansions`)\r\n\t\t\t\t.subscribe((res) => {\r\n\t\t\t\t\tlet series: Series[] = [];\r\n\t\t\t\t\tres.data.forEach((_series) => {\r\n\t\t\t\t\t\tseries.push(new Series(_series));\r\n\t\t\t\t\t});\r\n\t\t\t\t\tCacheGlobal.expansions = series;\r\n\t\t\t\t\tthis.getExpansionsSubject.next(\r\n\t\t\t\t\t\tthis.handleExpansionsParams(params, series)\r\n\t\t\t\t\t);\r\n\t\t\t\t});\r\n\t\t}\r\n\t}\r\n\thandleExpansionsParams(\r\n\t\tparams: GetExpansions,\r\n\t\tseriesCollection: Series[]\r\n\t): Series[] {\r\n\t\t// No data\r\n\t\tif (!seriesCollection.length) {\r\n\t\t\treturn [];\r\n\t\t} else {\r\n\t\t\tlet _seriesCollection: Series[] = [];\r\n\r\n\t\t\t// Query\r\n\t\t\tif (params.query && params.query.length) {\r\n\t\t\t\t// Filter expansions\r\n\t\t\t\tseriesCollection.forEach((series) => {\r\n\t\t\t\t\tlet expansions = series.expansions.filter((expansion) => {\r\n\t\t\t\t\t\treturn expansion.name\r\n\t\t\t\t\t\t\t.toLowerCase()\r\n\t\t\t\t\t\t\t.includes(params.query.toLowerCase());\r\n\t\t\t\t\t});\r\n\t\t\t\t\tif (expansions.length) {\r\n\t\t\t\t\t\tlet _series = Object.assign({}, series);\r\n\t\t\t\t\t\t_series.expansions = expansions;\r\n\t\t\t\t\t\t_seriesCollection.push(_series);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t} else {\r\n\t\t\t\t_seriesCollection = seriesCollection;\r\n\t\t\t}\r\n\r\n\t\t\t// Sort\r\n\t\t\tfunction sortSeriesAsc(a: Series, b: Series) {\r\n\t\t\t\tif (a.id < b.id) {\r\n\t\t\t\t\treturn -1;\r\n\t\t\t\t}\r\n\t\t\t\tif (a.id > b.id) {\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\t}\r\n\t\t\t\treturn 0;\r\n\t\t\t}\r\n\t\t\tfunction sortSeriesDesc(a: Series, b: Series) {\r\n\t\t\t\tif (a.id > b.id) {\r\n\t\t\t\t\treturn -1;\r\n\t\t\t\t}\r\n\t\t\t\tif (a.id < b.id) {\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\t}\r\n\t\t\t\treturn 0;\r\n\t\t\t}\r\n\t\t\tfunction sortExpansionAsc(a: Expansion, b: Expansion) {\r\n\t\t\t\tif (new Date(a.release_date) < new Date(b.release_date)) {\r\n\t\t\t\t\treturn -1;\r\n\t\t\t\t}\r\n\t\t\t\tif (new Date(a.release_date) > new Date(b.release_date)) {\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\t}\r\n\t\t\t\treturn 0;\r\n\t\t\t}\r\n\t\t\tfunction sortExpansionDesc(a: Expansion, b: Expansion) {\r\n\t\t\t\tif (new Date(a.release_date) > new Date(b.release_date)) {\r\n\t\t\t\t\treturn -1;\r\n\t\t\t\t}\r\n\t\t\t\tif (new Date(a.release_date) < new Date(b.release_date)) {\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\t}\r\n\t\t\t\treturn 0;\r\n\t\t\t}\r\n\t\t\tswitch (params.sort_direction) {\r\n\t\t\t\tcase 'asc':\r\n\t\t\t\t\t_seriesCollection.sort(sortSeriesAsc);\r\n\t\t\t\t\t_seriesCollection.forEach((_series) => {\r\n\t\t\t\t\t\t_series.expansions.sort(sortExpansionAsc);\r\n\t\t\t\t\t});\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'desc':\r\n\t\t\t\t\t_seriesCollection.sort(sortSeriesDesc);\r\n\t\t\t\t\t_seriesCollection.forEach((_series) => {\r\n\t\t\t\t\t\t_series.expansions.sort(sortExpansionDesc);\r\n\t\t\t\t\t});\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\treturn _seriesCollection;\r\n\t\t}\r\n\t}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "FeaturedService",
            "id": "injectable-FeaturedService-75fa1ea07f3a99e8e65aa7aa9b92c2f6ded5ea608f73cc7b7be74c91920247407fa10304b5a17061e681d6c81d3f19315477cf2a8ff7feac53a20ac70fd413de",
            "file": "src/app/services/featured.service.ts",
            "properties": [
                {
                    "name": "getFeaturedSubject",
                    "defaultValue": "new BehaviorSubject<Featured>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getFeatured",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getFeaturedObservable",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { APIResponse } from './../models/api';\r\nimport { Featured } from './../pages/home/featured';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { environment } from 'src/environments/environment';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class FeaturedService {\r\n\tconstructor(private http: HttpClient) {}\r\n\r\n\t// Get featured\r\n\tprivate getFeaturedSubject = new BehaviorSubject<Featured>(null);\r\n\tgetFeaturedObservable() {\r\n\t\tthis.getFeaturedSubject = new BehaviorSubject<Featured>(null);\r\n\t\treturn this.getFeaturedSubject.asObservable();\r\n\t}\r\n\tgetFeatured() {\r\n\t\tthis.http\r\n\t\t\t.get<APIResponse>(`${environment.api}featured`)\r\n\t\t\t.subscribe((res) => {\r\n\t\t\t\tif (res) {\r\n\t\t\t\t\tlet featured: Featured = new Featured(res.data);\r\n\t\t\t\t\tthis.getFeaturedSubject.next(featured);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "LoaderService",
            "id": "injectable-LoaderService-3b546122bd4508e800656b87f145832f30e30f4751502b6287ec1126776b9b187a13fa76265533f793e9e68a29f6771eeede3eaa00fe08ff8e9fc1b01bd4d90d",
            "file": "src/app/controls/loader/loader.service.ts",
            "properties": [
                {
                    "name": "_itemsLoading",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "loading",
                    "defaultValue": "new BehaviorSubject<boolean>(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methods": [
                {
                    "name": "_hide",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_show",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "addItemLoading",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "clear",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "clearItemLoading",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "update",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from \"@angular/core\";\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\n@Injectable({\r\n\tprovidedIn: 'root'\r\n})\r\n\r\nexport class LoaderService {\r\n\r\n\tprivate _itemsLoading: string[] = [];\r\n\tloading = new BehaviorSubject<boolean>(false);\r\n\tconstructor() {}\r\n\r\n\tprivate _show() {\r\n\t\tif (this.loading.value != true)\r\n\t\t\tthis.loading.next(true);\r\n\t}\r\n\t\r\n\tprivate _hide() {\r\n\t\tif (this.loading.value != false)\r\n\t\t\tthis.loading.next(false);\r\n\t}\r\n\r\n\tupdate() {\r\n\t\tif (this._itemsLoading.length) {\r\n\t\t\tthis._show();\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis._hide();\r\n\t\t}\r\n\t}\r\n\r\n\taddItemLoading(key: string) {\r\n\t\tconsole.log(`Loading: ${key}`);\r\n\t\tthis._itemsLoading.push(key);\r\n\t\tthis.update();\r\n\t}\r\n\r\n\tclearItemLoading(key: string) {\r\n\t\tconsole.log(`Done Loading: ${key}`);\r\n\t\tthis._itemsLoading = this._itemsLoading.filter(item => {\r\n\t\t\treturn item !== key;\r\n\t\t});\r\n\t\tthis.update();\r\n\t}\r\n\r\n\tclear() {\r\n\t\tthis._itemsLoading = [];\r\n\t\tthis.update();\r\n\t}\r\n\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 11
            },
            "type": "injectable"
        },
        {
            "name": "NotificationsService",
            "id": "injectable-NotificationsService-c869ccab395c6d7a62555c5829b5a462a321947f60b1e0550d38fac2d495bf2a5a41c30ef6ab00c295bdec44ec295a2b0b1f3b8cb1fd73bad06258339348b84f",
            "file": "src/app/controls/notifications/notifications.service.ts",
            "properties": [
                {
                    "name": "notificationsSubject",
                    "defaultValue": "new BehaviorSubject<Notification[]>([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addNotifications",
                    "args": [
                        {
                            "name": "notifications",
                            "type": "Notification[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "notifications",
                            "type": "Notification[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "notificationsObservable",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Notification } from './notification';\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\n@Injectable({\r\n\tprovidedIn: 'root'\r\n})\r\n\r\nexport class NotificationsService {\r\n\r\n\tconstructor() { }\r\n\r\n\t// Notifications\r\n\tprivate notificationsSubject = new BehaviorSubject<Notification[]>([]);\r\n\tnotificationsObservable() {\r\n\t\tthis.notificationsSubject = new BehaviorSubject<Notification[]>([]);\r\n\t\treturn this.notificationsSubject.asObservable();\r\n\t}\r\n\taddNotifications(notifications: Notification[]) {\r\n\t\tlet currentValue = this.notificationsSubject.value;\r\n\t\tnotifications.forEach(notification => {\r\n\t\t\tcurrentValue.push(notification);\r\n\t\t})\r\n\t\tthis.notificationsSubject.next(currentValue);\r\n\t}\r\n\t\r\n\t// get notifications() {\r\n\t// \treturn this._notifications;\r\n\t// }\r\n\t// set notifications(notifications: Notification[]) {\r\n\t// \tnotifications.forEach(notification => {\r\n\t// \t\tthis._notifications.push(notification);\r\n\t// \t});\r\n\t// }\r\n\t\r\n\t// getNotifications() {\r\n\t// \treturn this._notifications;\r\n\t// }\r\n\r\n\t// addNotifications(notifications: Notification[]) {\r\n\t// \tnotifications.forEach(notification => {\r\n\t// \t\tthis._notifications.push(notification);\r\n\t// \t});\r\n\t// }\r\n\t\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 9
            },
            "type": "injectable"
        },
        {
            "name": "PokemonService",
            "id": "injectable-PokemonService-2f51944a47bbaa83050d3811faadd877c6a331b7a3c22d63fea5b816f4ce30a6d3b49dce31f1c230d3f05f676f6d10f8297e81ce452438d9b48a234cbf0cfb41",
            "file": "src/app/services/pokemon.service.ts",
            "properties": [
                {
                    "name": "getPokemonSubject",
                    "defaultValue": "new BehaviorSubject<Pokemon>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "getPokemonVariantCardsSubject",
                    "defaultValue": "new BehaviorSubject<ResPokemonVariantCards>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 67,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "getPokemonVariantSubject",
                    "defaultValue": "new BehaviorSubject<PokemonVariant>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 50,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getPokemon",
                    "args": [
                        {
                            "name": "slug",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "slug",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPokemonObservable",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getPokemonVariant",
                    "args": [
                        {
                            "name": "slug",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "slug",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPokemonVariantCards",
                    "args": [
                        {
                            "name": "params",
                            "type": "GetPokemonVariantCards",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "GetPokemonVariantCards",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPokemonVariantCardsObservable",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getPokemonVariantObservable",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from \"@angular/common/http\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { APIGetPaged, APIResponse } from \"@app/models\";\r\nimport { Card } from \"@app/pages/cards\";\r\nimport { BehaviorSubject } from \"rxjs\";\r\nimport { environment } from \"src/environments/environment\";\r\nimport { Pokemon, PokemonVariant } from \"../pages/pokemons/pokemon/pokemon\";\r\nimport { CacheGlobal } from \"./cache/globalCache\";\r\n\r\n// Get pokemon interfaces\r\nexport class GetPokemonVariantCards extends APIGetPaged {\r\n\tslug: string;\r\n\tconstructor(init?:Partial<GetPokemonVariantCards>) {\r\n\t\tsuper();\r\n\t\tObject.assign(this, init);\r\n\t}\r\n}\r\nexport interface ResPokemonVariantCards {\r\n\ttotal_results: number;\r\n\ttotal_pages: number;\r\n\tcards: Card[];\r\n}\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\n\r\nexport class PokemonService {\r\n\r\n\tconstructor(private http: HttpClient) {}\r\n\r\n\t// Get pokemon\r\n\tprivate getPokemonSubject = new BehaviorSubject<Pokemon>(null);\r\n\tgetPokemonObservable() {\r\n\t\tthis.getPokemonSubject = new BehaviorSubject<Pokemon>(null);\r\n\t\treturn this.getPokemonSubject.asObservable();\r\n\t}\r\n\tgetPokemon(slug: string) {\r\n\t\tif (CacheGlobal.pokemon[slug]) {\r\n\t\t\tthis.getPokemonSubject.next(CacheGlobal.pokemon[slug]);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.http.get<APIResponse>(`${environment.api}pokemon/${slug}`).subscribe(res => {\r\n\t\t\t\tthis.getPokemonSubject.next(new Pokemon(res.data));\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t// Get pokemon variant\r\n\tprivate getPokemonVariantSubject = new BehaviorSubject<PokemonVariant>(null);\r\n\tgetPokemonVariantObservable() {\r\n\t\tthis.getPokemonVariantSubject = new BehaviorSubject<PokemonVariant>(null);\r\n\t\treturn this.getPokemonVariantSubject.asObservable();\r\n\t}\r\n\tgetPokemonVariant(slug: string) {\r\n\t\tif (CacheGlobal.pokemonVariant[slug]) {\r\n\t\t\tthis.getPokemonVariantSubject.next(CacheGlobal.pokemonVariant[slug]);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.http.get<APIResponse>(`${environment.api}pokemon-variants/${slug}`).subscribe(res => {\r\n\t\t\t\tthis.getPokemonVariantSubject.next(new PokemonVariant(res.data));\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t// Get pokemon variant cards\r\n\tprivate getPokemonVariantCardsSubject = new BehaviorSubject<ResPokemonVariantCards>(null);\r\n\tgetPokemonVariantCardsObservable() {\r\n\t\tthis.getPokemonVariantCardsSubject = new BehaviorSubject<ResPokemonVariantCards>(null);\r\n\t\treturn this.getPokemonVariantCardsSubject.asObservable();\r\n\t}\r\n\tgetPokemonVariantCards(params: GetPokemonVariantCards) {\r\n\t\tvar url = params.buildUrl(`pokemon-variants/${params.slug}/cards`);\r\n\t\tthis.http.get<APIResponse>(url).subscribe(res => {\r\n\t\t\tlet cards = [];\r\n\t\t\tres.data.forEach(card => {\r\n\t\t\t\tcards.push(new Card(card));\r\n\t\t\t});\r\n\t\t\tthis.getPokemonVariantCardsSubject.next({\r\n\t\t\t\ttotal_pages: res.meta.last_page,\r\n\t\t\t\ttotal_results: res.meta.total,\r\n\t\t\t\tcards: cards\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "PokemonsService",
            "id": "injectable-PokemonsService-9802f6f2c1c85b93461515b33227824634eae6d693b813561ee265ca08ea2f9d75bdb7798e57162fa645b38371dcb7af129025dd92ee1762c5c75b71d7e0b0d0",
            "file": "src/app/services/pokemons.service.ts",
            "properties": [
                {
                    "name": "getPokemonsSubject",
                    "defaultValue": "new BehaviorSubject<ResPokemons>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "getPokemonVariantsSubject",
                    "defaultValue": "new BehaviorSubject<ResPokemonVariants>(\r\n\t\tnull\r\n\t)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 63,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getPokemons",
                    "args": [
                        {
                            "name": "params",
                            "type": "GetPokemons",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "GetPokemons",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPokemonsObservable",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getPokemonVariants",
                    "args": [
                        {
                            "name": "params",
                            "type": "GetPokemonVariants",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "GetPokemonVariants",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPokemonVariantsObservable",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { APIGetPaged, APIResponse } from '@app/models';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { environment } from 'src/environments/environment';\r\nimport { Pokemon, PokemonVariant } from '../pages/pokemons/pokemon/pokemon';\r\n\r\nexport class GetPokemons extends APIGetPaged {\r\n\tconstructor(init?: Partial<GetPokemons>) {\r\n\t\tsuper();\r\n\t\tObject.assign(this, init);\r\n\t}\r\n}\r\n\r\nexport interface ResPokemons {\r\n\ttotal_results: number;\r\n\ttotal_pages: number;\r\n\tpokemons?: Pokemon[];\r\n}\r\n\r\nexport class GetPokemonVariants extends APIGetPaged {\r\n\ttype: string;\r\n\tconstructor(init?: Partial<GetPokemonVariants>) {\r\n\t\tsuper();\r\n\t\tObject.assign(this, init);\r\n\t}\r\n}\r\n\r\nexport interface ResPokemonVariants {\r\n\ttotal_results: number;\r\n\ttotal_pages: number;\r\n\tpokemon_variants?: PokemonVariant[];\r\n}\r\n\r\n@Injectable({\r\n\tprovidedIn: 'root',\r\n})\r\nexport class PokemonsService {\r\n\tconstructor(private http: HttpClient) {}\r\n\r\n\t// Get all pokemons\r\n\tprivate getPokemonsSubject = new BehaviorSubject<ResPokemons>(null);\r\n\tgetPokemonsObservable() {\r\n\t\tthis.getPokemonsSubject = new BehaviorSubject<ResPokemons>(null);\r\n\t\treturn this.getPokemonsSubject.asObservable();\r\n\t}\r\n\tgetPokemons(params: GetPokemons) {\r\n\t\tvar url = params.buildUrl('pokemon');\r\n\t\tthis.http.get<APIResponse>(url).subscribe((res) => {\r\n\t\t\tlet pokemons: Pokemon[] = [];\r\n\t\t\tres.data.forEach((pokemon) => {\r\n\t\t\t\tpokemons.push(new Pokemon(pokemon));\r\n\t\t\t});\r\n\t\t\tthis.getPokemonsSubject.next({\r\n\t\t\t\ttotal_pages: res.meta.last_page,\r\n\t\t\t\ttotal_results: res.meta.total,\r\n\t\t\t\tpokemons: pokemons,\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\r\n\t// Get all pokemons\r\n\tprivate getPokemonVariantsSubject = new BehaviorSubject<ResPokemonVariants>(\r\n\t\tnull\r\n\t);\r\n\tgetPokemonVariantsObservable() {\r\n\t\tthis.getPokemonVariantsSubject =\r\n\t\t\tnew BehaviorSubject<ResPokemonVariants>(null);\r\n\t\treturn this.getPokemonVariantsSubject.asObservable();\r\n\t}\r\n\tgetPokemonVariants(params: GetPokemonVariants) {\r\n\t\tvar url = params.buildUrl('pokemon-variants');\r\n\t\tthis.http.get<APIResponse>(url).subscribe((res) => {\r\n\t\t\tlet pokemon_variants: PokemonVariant[] = [];\r\n\t\t\tres.data.forEach((pokemon_variant) => {\r\n\t\t\t\tpokemon_variants.push(new PokemonVariant(pokemon_variant));\r\n\t\t\t});\r\n\t\t\tthis.getPokemonVariantsSubject.next({\r\n\t\t\t\ttotal_pages: res.meta.last_page,\r\n\t\t\t\ttotal_results: res.meta.total,\r\n\t\t\t\tpokemon_variants: pokemon_variants,\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 38,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ReleaseNotesServices",
            "id": "injectable-ReleaseNotesServices-75f3501d13db17f0f0530f37cc173b649c741a295b1f6bbba58adef03d5f11dd0d946a478f9ee0a7e326d4a99f6987a9341b884076d0a3ed9477523dc487363f",
            "file": "src/app/services/release-notes.services.ts",
            "properties": [
                {
                    "name": "_releaseNotes",
                    "defaultValue": "[\r\n\t\t{\r\n\t\t\ttitle: 'Welcome to RotomDex',\r\n\t\t\tcontent: `Our first release is focused on delivering TCG information including expansion, card, and Pokemon data.\r\n\t\t\t\tWe are ironing out initial project startup issue and refining the user interface for desktop and mobile.\r\n\t\t\t\tWe plan to develop addition features including a card scanner and collection management in the future.\r\n\t\t\t\tIf you run into any bugs or have suggestions for improvement we would love to hear from you via our contact from.`,\r\n\t\t\tversion: '0.9.6',\r\n\t\t\tdate: new Date('4/7/2021'),\r\n\t\t},\r\n\t\t{\r\n\t\t\ttitle: 'Our long-term goal',\r\n\t\t\tcontent: `We started building RotomDex after hearing from many friends and people within the Pokemon TCG community.\r\n\t\t\t\tWe all want a better way to manage our ever growing collection of amazing cards!\r\n\t\t\t\tThere are a few existing TCG collection management solutions, but nothing that stands out or has features for Pokemon fans.\r\n\t\t\t\tRotomDex is our solution to this desire, a mobile app and website that makes it easy to catalog every Pokemon card in your collection.`,\r\n\t\t\tversion: '0.9.7',\r\n\t\t\tdate: new Date('5/11/2021'),\r\n\t\t},\r\n\t]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ReleaseNote[]",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_releaseNotesSorted",
                    "defaultValue": "this._releaseNotes.sort(\r\n\t\t(a, b) => <any>b.date - <any>a.date\r\n\t)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "allReleaseNotesSubject",
                    "defaultValue": "new BehaviorSubject<ReleaseNote[]>([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getReleaseNotes",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getReleaseNotesObservable",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\nexport interface ReleaseNote {\r\n\ttitle: string;\r\n\tversion: string;\r\n\tcontent: string;\r\n\tdate: Date;\r\n}\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ReleaseNotesServices {\r\n\tprivate _releaseNotes: ReleaseNote[] = [\r\n\t\t{\r\n\t\t\ttitle: 'Welcome to RotomDex',\r\n\t\t\tcontent: `Our first release is focused on delivering TCG information including expansion, card, and Pokemon data.\r\n\t\t\t\tWe are ironing out initial project startup issue and refining the user interface for desktop and mobile.\r\n\t\t\t\tWe plan to develop addition features including a card scanner and collection management in the future.\r\n\t\t\t\tIf you run into any bugs or have suggestions for improvement we would love to hear from you via our contact from.`,\r\n\t\t\tversion: '0.9.6',\r\n\t\t\tdate: new Date('4/7/2021'),\r\n\t\t},\r\n\t\t{\r\n\t\t\ttitle: 'Our long-term goal',\r\n\t\t\tcontent: `We started building RotomDex after hearing from many friends and people within the Pokemon TCG community.\r\n\t\t\t\tWe all want a better way to manage our ever growing collection of amazing cards!\r\n\t\t\t\tThere are a few existing TCG collection management solutions, but nothing that stands out or has features for Pokemon fans.\r\n\t\t\t\tRotomDex is our solution to this desire, a mobile app and website that makes it easy to catalog every Pokemon card in your collection.`,\r\n\t\t\tversion: '0.9.7',\r\n\t\t\tdate: new Date('5/11/2021'),\r\n\t\t},\r\n\t];\r\n\r\n\t_releaseNotesSorted = this._releaseNotes.sort(\r\n\t\t(a, b) => <any>b.date - <any>a.date\r\n\t);\r\n\r\n\tconstructor(private http: HttpClient) {}\r\n\r\n\t// Get release notes\r\n\tprivate allReleaseNotesSubject = new BehaviorSubject<ReleaseNote[]>([]);\r\n\tgetReleaseNotesObservable() {\r\n\t\tthis.allReleaseNotesSubject = new BehaviorSubject<ReleaseNote[]>([]);\r\n\t\treturn this.allReleaseNotesSubject.asObservable();\r\n\t}\r\n\tgetReleaseNotes() {\r\n\t\tthis.allReleaseNotesSubject.next(this._releaseNotesSorted);\r\n\t}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 37,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ScannerService",
            "id": "injectable-ScannerService-1eb710104c6b5da503132dd1d086d014500650d5746e90c3f845eb3ffa920e5f0805a80505e931142dc82d33fc63a1cc104fde899d17f2be98fb2d08286d0703",
            "file": "src/app/services/scanner.service.ts",
            "properties": [
                {
                    "name": "_scannerList",
                    "defaultValue": "new ScannerList()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ScannerList",
                    "optional": false,
                    "description": "",
                    "line": 87,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "scanCardsSubject",
                    "defaultValue": "new BehaviorSubject<Card[]>([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 63,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "scanCardSubject",
                    "defaultValue": "new BehaviorSubject<Card>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "scansSubject",
                    "defaultValue": "new BehaviorSubject<Card[]>([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 101,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "tempId",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "changeVersion",
                    "args": [
                        {
                            "name": "cardOld",
                            "type": "Card",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "cardNew",
                            "type": "Card",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 110,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "cardOld",
                            "type": "Card",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "cardNew",
                            "type": "Card",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "clearScans",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getScanCard",
                    "args": [
                        {
                            "name": "params",
                            "type": "GetScanCardParams",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "GetScanCardParams",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getScanCardObservable",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getScanCards",
                    "args": [
                        {
                            "name": "params",
                            "type": "GetScanCardsParams",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "GetScanCardsParams",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getScanCardsObservable",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getScans",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getScansObservable",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getTempId",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "removeCard",
                    "args": [
                        {
                            "name": "card",
                            "type": "Card",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 138,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "card",
                            "type": "Card",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { environment } from '@app/../environments/environment';\r\n\r\nimport { APIResponse } from '@app/models/api';\r\nimport { ScannerList } from '@app/pages/scanner/scanner-lists/scanner-list/scanner-list';\r\nimport { Card } from '@app/pages/cards/card';\r\nimport { NotificationsService, Notification } from '@app/controls/notifications';\r\nimport { AlertType } from '@app/controls/alert/alert';\r\n\r\nexport enum ScanType {\r\n\tscan = \"scan\",\r\n\tmultiple = \"scan_multiple\",\r\n\tsnapshot = \"snapshot\"\r\n}\r\n\r\nexport interface GetScanCardParams {\r\n\timage: string;\r\n}\r\n\r\nexport interface GetScanCardsParams {\r\n\timage: string;\r\n}\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\n\r\nexport class ScannerService {\r\n\r\n    constructor(\r\n\t\tprivate http: HttpClient,\r\n\t\tprivate notificationService: NotificationsService) {}\r\n\r\n\t// TempId\r\n\tprivate tempId = 0;\r\n\tgetTempId() {\r\n\t\treturn this.tempId++;\r\n\t}\r\n\r\n\t// Scan single card\r\n\tprivate scanCardSubject = new BehaviorSubject<Card>(null);\r\n    getScanCardObservable() {\r\n\t\tthis.scanCardSubject = new BehaviorSubject<Card>(null);\r\n\t\treturn this.scanCardSubject.asObservable();\r\n\t}\r\n    getScanCard(params: GetScanCardParams) {\r\n        this.http.post<APIResponse>(environment.api + \"scanner/detect\", params).subscribe(res => {\r\n\t\t\tif (res.success) {\r\n\t\t\t\tlet card = new Card(res.data.card);\r\n\t\t\t\tif (card.id > 0) {\r\n\t\t\t\t\tthis.scanCardSubject.next(card);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.scanCardSubject.next(null);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t// Scan mutiple cards\r\n\tprivate scanCardsSubject = new BehaviorSubject<Card[]>([]);\r\n\tgetScanCardsObservable() {\r\n\t\tthis.scanCardsSubject = new BehaviorSubject<Card[]>([])\r\n\t\treturn this.scanCardsSubject.asObservable();\r\n\t}\r\n\tgetScanCards(params: GetScanCardsParams) {\r\n\t\tthis.http.post<APIResponse>(environment.api + \"scanner/multiple\", params).subscribe(res => {\r\n\t\t\tif (res.success && res.data.length > 0) {\r\n\t\t\t\tlet cards: Card[] = [];\r\n\t\t\t\tres.data.forEach(card => {\r\n\t\t\t\t\tlet _card = new Card(card);\r\n\t\t\t\t\tif (_card.id > 0) {\r\n\t\t\t\t\t\tcards.push(_card);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\tthis.scanCardsSubject.next(cards);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.scanCardsSubject.next([]);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\t\r\n\t// Scan cache\r\n\tprivate _scannerList: ScannerList = new ScannerList();\r\n\tget scannerList() {\r\n\t\treturn this._scannerList;\r\n\t}\r\n\tset scannerList(scannerList) {\r\n\t\tthis._scannerList = scannerList;\r\n\t}\r\n\r\n\t// Clear cache\r\n\tclearScans() {\r\n\t\tthis._scannerList = new ScannerList();\r\n\t}\r\n\r\n\t// Scan cache\r\n\tprivate scansSubject = new BehaviorSubject<Card[]>([]);\r\n\tgetScansObservable() {\r\n\t\tthis.scansSubject = new BehaviorSubject<Card[]>([]);\r\n\t\treturn this.scansSubject.asObservable();\r\n\t}\r\n\tgetScans() {\r\n\t\tthis.scansSubject.next(this._scannerList.cards);\r\n\t}\r\n\r\n\tchangeVersion(cardOld: Card, cardNew: Card) {\r\n\t\t\r\n\r\n\t\t// Remove old card via tempId\r\n\t\t// this._scannerList.cards = this._scannerList.cards.filter(card => {\r\n\t\t// \treturn card.tempId != cardOld.tempId;\r\n\t\t// });\r\n\t\tlet updatedScannerListCards: Card[] = [];\r\n\t\tthis._scannerList.cards.forEach(card => {\r\n\t\t\tif (card.tempId === cardOld.tempId) {\r\n\t\t\t\tupdatedScannerListCards.push(cardNew);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tupdatedScannerListCards.push(card);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\r\n\t\tthis._scannerList.cards = updatedScannerListCards;\r\n\r\n\t\t// Add new card\r\n\t\t//cardNew.tempId = cardOld.tempId++;\r\n\t\t//this._scannerList.cards.push(cardNew);\r\n\r\n\t\t// Update subscriptions\r\n\t\tthis.scansSubject.next(this._scannerList.cards);\r\n\t}\r\n\r\n\tremoveCard(card: Card) {\r\n\t\tthis._scannerList.cards = this._scannerList.cards.filter(_card => {\r\n\t\t\treturn _card.tempId != card.tempId;\r\n\t\t});\r\n\r\n\t\t// Update subscriptions\r\n\t\tthis.scansSubject.next(this._scannerList.cards);\r\n\r\n\t\tthis.notificationService.addNotifications([\r\n\t\t\tnew Notification({\r\n\t\t\t\talertType: AlertType.success,\r\n\t\t\t\tmessage: \"Removed \" + card.name + \" from results\"\r\n\t\t\t})\r\n\t\t]);\r\n\t}\r\n\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "notificationService",
                        "type": "NotificationsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 30,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "notificationService",
                        "type": "NotificationsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "scannerList": {
                    "name": "scannerList",
                    "setSignature": {
                        "name": "scannerList",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "scannerList",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 91,
                        "jsdoctags": [
                            {
                                "name": "scannerList",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "scannerList",
                        "type": "",
                        "returnType": "",
                        "line": 88
                    }
                }
            },
            "type": "injectable"
        },
        {
            "name": "SearchService",
            "id": "injectable-SearchService-96e4cb8ccdbeab279f4afcd787949fe393a8a919732e271e10ceefc87226eba3a64a68b9d4f6928d76ffc3c613927e55fe2400ab0253891cc8f0c2549c1558e8",
            "file": "src/app/services/search.service.ts",
            "properties": [
                {
                    "name": "query",
                    "defaultValue": "new Subject<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<string>",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methods": [
                {
                    "name": "getSearchObservable",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<string>",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "setSearch",
                    "args": [
                        {
                            "name": "_query",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "_query",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from \"@angular/core\";\r\nimport { Observable, Subject } from 'rxjs';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\n\r\nexport class SearchService {\r\n\r\n    query: Subject<string> = new Subject<string>();\r\n\r\n    constructor() {}\r\n\r\n    public getSearchObservable(): Observable<string> {\r\n        return this.query.asObservable();\r\n    }\r\n\r\n    public setSearch(_query) {\r\n        this.query.next(_query);\r\n    }\r\n\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 10
            },
            "type": "injectable"
        },
        {
            "name": "UserCardsService",
            "id": "injectable-UserCardsService-ebad570d3086c784ade077f3e5a967e4e25809b58ed5c73d5c17e6fa715a35546a3940a0941a66b10fa5b1df26a241d03a3c08a27d09e0cdec52a038e9b8b70d",
            "file": "src/app/components/card-collection/card-collection.service.ts",
            "properties": [
                {
                    "name": "addUserCardSubject",
                    "defaultValue": "new BehaviorSubject<CardCollectionItem>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 83,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "getCardUserCardsSubject",
                    "defaultValue": "new BehaviorSubject<CardCollectionItem[]>(\r\n\t\tnull\r\n\t)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 64,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "getUserCardsSubject",
                    "defaultValue": "new BehaviorSubject<CardResults>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addUserCard",
                    "args": [
                        {
                            "name": "userCard",
                            "type": "CardCollectionItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "userCard",
                            "type": "CardCollectionItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addUserCardObservable",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getCardUserCards",
                    "args": [
                        {
                            "name": "slug",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "slug",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCardUserCardsObservable",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getUserCards",
                    "args": [
                        {
                            "name": "params",
                            "type": "GetCards",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "GetCards",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getUserCardsObservable",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "removeUserCard",
                    "args": [
                        {
                            "name": "user_card_id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "user_card_id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateUserCard",
                    "args": [
                        {
                            "name": "userCard",
                            "type": "CardCollectionItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "userCard",
                            "type": "CardCollectionItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { APIResponse, buildUrl } from './../../models/api';\r\nimport { CardResults, GetCards } from './../../services/cards.service';\r\n\r\nimport { AuthenticationService } from '@app/services/auth.service';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { Card } from './../../pages/cards/card/card';\r\nimport { CardCollectionItem } from './card-collection-item/card-collection-item';\r\nimport { Condition } from './../../models/condition';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { HttpParams } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { environment } from './../../../environments/environment';\r\nimport { map } from 'rxjs/operators';\r\n\r\nexport class UpdateUserCard {\r\n\tuser_card_id: number;\r\n\tcondition: string;\r\n\tgraded_by: string;\r\n\tprinting: string;\r\n\tnotes: string;\r\n\tconstructor(init?: Partial<UpdateUserCard>) {\r\n\t\tObject.assign(this, init);\r\n\t}\r\n}\r\n\r\nexport class AddUserCard {\r\n\tcard_id: number;\r\n\tcard_group_id?: number;\r\n\tcondition: string;\r\n\tgraded_by: string;\r\n\tprinting: string;\r\n\tnotes: string;\r\n\tdate_obtained: Date;\r\n\tpurchase_price: number;\r\n\tconstructor(init?: Partial<AddUserCard>) {\r\n\t\tObject.assign(this, init);\r\n\t}\r\n}\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class UserCardsService {\r\n\tconstructor(private http: HttpClient) {}\r\n\r\n\t// Get user cards\r\n\tprivate getUserCardsSubject = new BehaviorSubject<CardResults>(null);\r\n\tgetUserCardsObservable() {\r\n\t\tthis.getUserCardsSubject = new BehaviorSubject<CardResults>(null);\r\n\t\treturn this.getUserCardsSubject.asObservable();\r\n\t}\r\n\tgetUserCards(params: GetCards) {\r\n\t\tvar url = params.buildUrl('user-cards');\r\n\t\tthis.http.get<APIResponse>(url).subscribe((res) => {\r\n\t\t\tthis.getUserCardsSubject.next({\r\n\t\t\t\tcards: res.data.map((card) => {\r\n\t\t\t\t\tnew Card(card);\r\n\t\t\t\t}),\r\n\t\t\t\ttotal_pages: res.meta.last_page,\r\n\t\t\t\ttotal_results: res.meta.total,\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\r\n\t// Get card user cards\r\n\tprivate getCardUserCardsSubject = new BehaviorSubject<CardCollectionItem[]>(\r\n\t\tnull\r\n\t);\r\n\tgetCardUserCardsObservable() {\r\n\t\tthis.getCardUserCardsSubject = new BehaviorSubject<\r\n\t\t\tCardCollectionItem[]\r\n\t\t>(null);\r\n\t\treturn this.getCardUserCardsSubject.asObservable();\r\n\t}\r\n\tgetCardUserCards(slug: string) {\r\n\t\tvar url = buildUrl('user-cards/' + slug);\r\n\t\tthis.http.get<APIResponse>(url).subscribe((res) => {\r\n\t\t\tthis.getCardUserCardsSubject.next(\r\n\t\t\t\tres.data.map((userCard) => new CardCollectionItem(userCard))\r\n\t\t\t);\r\n\t\t});\r\n\t}\r\n\r\n\t// Add user card\r\n\tprivate addUserCardSubject = new BehaviorSubject<CardCollectionItem>(null);\r\n\taddUserCardObservable() {\r\n\t\tthis.addUserCardSubject = new BehaviorSubject<CardCollectionItem>(null);\r\n\t\treturn this.addUserCardSubject.asObservable();\r\n\t}\r\n\taddUserCard(userCard: CardCollectionItem) {\r\n\t\tthis.http\r\n\t\t\t.post<APIResponse>(buildUrl('user-cards/create'), {\r\n\t\t\t\t...userCard,\r\n\t\t\t})\r\n\t\t\t.subscribe((res) => {\r\n\t\t\t\tif (res.success) this.addUserCardSubject.next(userCard);\r\n\t\t\t});\r\n\t}\r\n\r\n\t// Remove user card\r\n\tremoveUserCard(user_card_id: number) {\r\n\t\treturn this.http.post<APIResponse>(buildUrl('user-cards/delete'), {\r\n\t\t\tuser_card_id,\r\n\t\t});\r\n\t}\r\n\r\n\t// Update user card\r\n\tupdateUserCard(userCard: CardCollectionItem) {\r\n\t\treturn this.http.post<APIResponse>(\r\n\t\t\tbuildUrl('user-cards/update'),\r\n\t\t\tuserCard\r\n\t\t);\r\n\t}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 41,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        }
    ],
    "guards": [
        {
            "name": "AuthGuard",
            "id": "injectable-AuthGuard-5fb8158d64935b13b9a0bd2e80e28c5a76eec5a0d309ad693578b88f8de05af49435ed636f0965e36179bd73bdf2b09607bcba52b1c59897fc72d24a7294b8bb",
            "file": "src/app/helpers/auth.guard.ts",
            "properties": [],
            "methods": [
                {
                    "name": "canActivate",
                    "args": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Router, CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\r\nimport { AuthenticationService } from '../services/auth.service';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class AuthGuard implements CanActivate {\r\n    constructor(\r\n        private router: Router,\r\n        private authenticationService: AuthenticationService\r\n    ) { }\r\n\r\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\r\n        const currentUser = this.authenticationService.currentUserValue;\r\n        if (currentUser) {\r\n            // logged in so return true\r\n            return true;\r\n        }\r\n\r\n        // not logged in so redirect to login page with the return url\r\n        this.router.navigate(['/signin'], { queryParams: { returnUrl: state.url } });\r\n        return false;\r\n    }\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authenticationService",
                        "type": "AuthenticationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authenticationService",
                        "type": "AuthenticationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "guard"
        }
    ],
    "interceptors": [
        {
            "name": "ErrorIntercept",
            "id": "injectable-ErrorIntercept-73ac6abeefc4c7b826f335a10c9cee03e19eb4967ec2460bfde18ddf36300876cad40ec5e534e504e3e98d279bded136c2c0795ac4a51b04ab46c1dea86cdf9c",
            "file": "src/app/helpers/error.interceptor.ts",
            "properties": [],
            "methods": [
                {
                    "name": "intercept",
                    "args": [
                        {
                            "name": "request",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpEvent<any>>",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "request",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\r\n\tHttpInterceptor,\r\n\tHttpRequest,\r\n\tHttpHandler,\r\n\tHttpErrorResponse,\r\n\tHttpEvent,\r\n} from '@angular/common/http';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\nimport { Injectable } from '@angular/core';\r\nimport { AuthenticationService } from '@app/services/auth.service';\r\nimport {\r\n\tNotificationsService,\r\n\tNotification,\r\n} from '@app/controls/notifications';\r\nimport { AlertType } from '@app/controls/alert/alert';\r\nimport { LoaderService } from '@app/controls';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ErrorIntercept implements HttpInterceptor {\r\n\tconstructor(\r\n\t\tprivate authenticationService: AuthenticationService,\r\n\t\tprivate notificationService: NotificationsService,\r\n\t\tprivate loaderService: LoaderService\r\n\t) {}\r\n\r\n\tintercept(\r\n\t\trequest: HttpRequest<any>,\r\n\t\tnext: HttpHandler\r\n\t): Observable<HttpEvent<any>> {\r\n\t\treturn next.handle(request).pipe(\r\n\t\t\t//retry(1),\r\n\t\t\tcatchError((error: HttpErrorResponse) => {\r\n\t\t\t\tlet message = '';\r\n\t\t\t\tif (error.error instanceof ErrorEvent) {\r\n\t\t\t\t\t// client-side error\r\n\t\t\t\t\tmessage = error.error.message;\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// server-side error\r\n\t\t\t\t\tif (error.error && error.error.data) {\r\n\t\t\t\t\t\tmessage = error.error.data;\r\n\t\t\t\t\t} else if (error.error && error.error.errors) {\r\n\t\t\t\t\t\tfor (let prop in error.error.errors) {\r\n\t\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\t\tObject.prototype.hasOwnProperty.call(\r\n\t\t\t\t\t\t\t\t\terror.error.errors,\r\n\t\t\t\t\t\t\t\t\tprop\r\n\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\t\tmessage = error.error.errors[prop][0];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else if (error.error && error.error.message) {\r\n\t\t\t\t\t\tmessage = error.error.message;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tmessage = error.message;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Auto logout if 401 response returned from api\r\n\t\t\t\tswitch (error.status) {\r\n\t\t\t\t\tcase 401:\r\n\t\t\t\t\t\tthis.authenticationService.logout();\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 429:\r\n\t\t\t\t\t\tthis.notificationService.addNotifications([\r\n\t\t\t\t\t\t\tnew Notification({\r\n\t\t\t\t\t\t\t\talertType: AlertType.error,\r\n\t\t\t\t\t\t\t\tmessage: 'Too many requests, try again later',\r\n\t\t\t\t\t\t\t}),\r\n\t\t\t\t\t\t]);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tlet _message = '';\r\n\t\t\t\t\t\tswitch (typeof message) {\r\n\t\t\t\t\t\t\tcase 'string': {\r\n\t\t\t\t\t\t\t\t_message = message;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tcase 'object': {\r\n\t\t\t\t\t\t\t\tconst messageCount =\r\n\t\t\t\t\t\t\t\t\tObject.keys(message).length;\r\n\t\t\t\t\t\t\t\tObject.keys(message).forEach((k, i) => {\r\n\t\t\t\t\t\t\t\t\t_message += message[k][0];\r\n\t\t\t\t\t\t\t\t\t// Not last item add space\r\n\t\t\t\t\t\t\t\t\tif (i + 1 !== messageCount) {\r\n\t\t\t\t\t\t\t\t\t\t_message += ' ';\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tthis.notificationService.addNotifications([\r\n\t\t\t\t\t\t\tnew Notification({\r\n\t\t\t\t\t\t\t\talertType: AlertType.error,\r\n\t\t\t\t\t\t\t\tmessage: _message,\r\n\t\t\t\t\t\t\t}),\r\n\t\t\t\t\t\t]);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.loaderService.clear();\r\n\r\n\t\t\t\treturn throwError(message);\r\n\t\t\t})\r\n\t\t);\r\n\t}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authenticationService",
                        "type": "AuthenticationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "notificationService",
                        "type": "NotificationsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "loaderService",
                        "type": "LoaderService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "authenticationService",
                        "type": "AuthenticationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "notificationService",
                        "type": "NotificationsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "loaderService",
                        "type": "LoaderService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "interceptor"
        },
        {
            "name": "JwtInterceptor",
            "id": "injectable-JwtInterceptor-682a905abd70aea6889c50d6611db047e334784bdd73e79c71c3eba3824cf48d6efca28516d7dec37c800c1ca2f9a0c7c1d8e8e4ae0655f66463fcda860870f0",
            "file": "src/app/helpers/jwt.interceptor.ts",
            "properties": [],
            "methods": [
                {
                    "name": "intercept",
                    "args": [
                        {
                            "name": "request",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpEvent<any>>",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "request",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpRequest, HttpHandler, HttpEvent, HttpInterceptor } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { AuthenticationService } from '@app/services/auth.service';\r\n\r\n@Injectable()\r\nexport class JwtInterceptor implements HttpInterceptor {\r\n    constructor(private authenticationService: AuthenticationService) { }\r\n\r\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n        // add authorization header with jwt token if available\r\n        let currentUser = this.authenticationService.currentUserValue;\r\n        if (currentUser && currentUser.token) {\r\n            request = request.clone({\r\n                setHeaders: {\r\n\t\t\t\t\tAuthorization: `Bearer ${currentUser.token}`,\r\n\t\t\t\t\tAccept: 'application/json'\r\n                }\r\n            });\r\n        }\r\n\r\n        return next.handle(request);\r\n    }\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authenticationService",
                        "type": "AuthenticationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "authenticationService",
                        "type": "AuthenticationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "interceptor"
        }
    ],
    "classes": [
        {
            "name": "AddUserCard",
            "id": "class-AddUserCard-ebad570d3086c784ade077f3e5a967e4e25809b58ed5c73d5c17e6fa715a35546a3940a0941a66b10fa5b1df26a241d03a3c08a27d09e0cdec52a038e9b8b70d",
            "file": "src/app/components/card-collection/card-collection.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { APIResponse, buildUrl } from './../../models/api';\r\nimport { CardResults, GetCards } from './../../services/cards.service';\r\n\r\nimport { AuthenticationService } from '@app/services/auth.service';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { Card } from './../../pages/cards/card/card';\r\nimport { CardCollectionItem } from './card-collection-item/card-collection-item';\r\nimport { Condition } from './../../models/condition';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { HttpParams } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { environment } from './../../../environments/environment';\r\nimport { map } from 'rxjs/operators';\r\n\r\nexport class UpdateUserCard {\r\n\tuser_card_id: number;\r\n\tcondition: string;\r\n\tgraded_by: string;\r\n\tprinting: string;\r\n\tnotes: string;\r\n\tconstructor(init?: Partial<UpdateUserCard>) {\r\n\t\tObject.assign(this, init);\r\n\t}\r\n}\r\n\r\nexport class AddUserCard {\r\n\tcard_id: number;\r\n\tcard_group_id?: number;\r\n\tcondition: string;\r\n\tgraded_by: string;\r\n\tprinting: string;\r\n\tnotes: string;\r\n\tdate_obtained: Date;\r\n\tpurchase_price: number;\r\n\tconstructor(init?: Partial<AddUserCard>) {\r\n\t\tObject.assign(this, init);\r\n\t}\r\n}\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class UserCardsService {\r\n\tconstructor(private http: HttpClient) {}\r\n\r\n\t// Get user cards\r\n\tprivate getUserCardsSubject = new BehaviorSubject<CardResults>(null);\r\n\tgetUserCardsObservable() {\r\n\t\tthis.getUserCardsSubject = new BehaviorSubject<CardResults>(null);\r\n\t\treturn this.getUserCardsSubject.asObservable();\r\n\t}\r\n\tgetUserCards(params: GetCards) {\r\n\t\tvar url = params.buildUrl('user-cards');\r\n\t\tthis.http.get<APIResponse>(url).subscribe((res) => {\r\n\t\t\tthis.getUserCardsSubject.next({\r\n\t\t\t\tcards: res.data.map((card) => {\r\n\t\t\t\t\tnew Card(card);\r\n\t\t\t\t}),\r\n\t\t\t\ttotal_pages: res.meta.last_page,\r\n\t\t\t\ttotal_results: res.meta.total,\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\r\n\t// Get card user cards\r\n\tprivate getCardUserCardsSubject = new BehaviorSubject<CardCollectionItem[]>(\r\n\t\tnull\r\n\t);\r\n\tgetCardUserCardsObservable() {\r\n\t\tthis.getCardUserCardsSubject = new BehaviorSubject<\r\n\t\t\tCardCollectionItem[]\r\n\t\t>(null);\r\n\t\treturn this.getCardUserCardsSubject.asObservable();\r\n\t}\r\n\tgetCardUserCards(slug: string) {\r\n\t\tvar url = buildUrl('user-cards/' + slug);\r\n\t\tthis.http.get<APIResponse>(url).subscribe((res) => {\r\n\t\t\tthis.getCardUserCardsSubject.next(\r\n\t\t\t\tres.data.map((userCard) => new CardCollectionItem(userCard))\r\n\t\t\t);\r\n\t\t});\r\n\t}\r\n\r\n\t// Add user card\r\n\tprivate addUserCardSubject = new BehaviorSubject<CardCollectionItem>(null);\r\n\taddUserCardObservable() {\r\n\t\tthis.addUserCardSubject = new BehaviorSubject<CardCollectionItem>(null);\r\n\t\treturn this.addUserCardSubject.asObservable();\r\n\t}\r\n\taddUserCard(userCard: CardCollectionItem) {\r\n\t\tthis.http\r\n\t\t\t.post<APIResponse>(buildUrl('user-cards/create'), {\r\n\t\t\t\t...userCard,\r\n\t\t\t})\r\n\t\t\t.subscribe((res) => {\r\n\t\t\t\tif (res.success) this.addUserCardSubject.next(userCard);\r\n\t\t\t});\r\n\t}\r\n\r\n\t// Remove user card\r\n\tremoveUserCard(user_card_id: number) {\r\n\t\treturn this.http.post<APIResponse>(buildUrl('user-cards/delete'), {\r\n\t\t\tuser_card_id,\r\n\t\t});\r\n\t}\r\n\r\n\t// Update user card\r\n\tupdateUserCard(userCard: CardCollectionItem) {\r\n\t\treturn this.http.post<APIResponse>(\r\n\t\t\tbuildUrl('user-cards/update'),\r\n\t\t\tuserCard\r\n\t\t);\r\n\t}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "init",
                        "type": "Partial<AddUserCard>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 34,
                "jsdoctags": [
                    {
                        "name": "init",
                        "type": "Partial<AddUserCard>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "card_group_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "card_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "condition",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "date_obtained",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "graded_by",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "notes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "printing",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "purchase_price",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 34
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Alert",
            "id": "class-Alert-9d392a873d8df0423a44428fe48030a119fad7527e2f307cfad10827dc8c8a20003edfd35b9369ce5ff7dc2dbba7ee622749a6a4540a5e851d37822a730f4f77",
            "file": "src/app/controls/alert/alert.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class Alert {\r\n\tmessage: string;\r\n\ttype: AlertType;\r\n\r\n    public constructor(init?:Partial<Alert>) {\r\n        Object.assign(this, init);\r\n\t}\r\n}\r\n\r\nexport enum AlertType {\r\n\tsuccess = \"success\",\r\n\tinfo = \"info\",\r\n\twarning = \"warning\",\r\n\terror = \"error\"\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "init",
                        "type": "Partial<Alert>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 3,
                "modifierKind": [
                    123
                ],
                "jsdoctags": [
                    {
                        "name": "init",
                        "type": "Partial<Alert>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AlertType",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "APIGetPaged",
            "id": "class-APIGetPaged-4edd8e7c61bd2311f2d0a7a2a200c06216a3066e715e4d96cd0bab49ed8e0492657c4bc578c7c1ec34ff84a08cb37f6de190bd3a3d84c126a8a3c09ea2d8c6a9",
            "file": "src/app/models/api.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { HttpParams } from '@angular/common/http';\r\nimport { environment } from 'src/environments/environment';\r\n\r\nexport class APIResponse {\r\n\tsuccess: boolean;\r\n\tdata: any;\r\n\tmeta: APIReponseMeta;\r\n}\r\n\r\nexport class APIReponseMeta {\r\n\tcurrent_page: number;\r\n\tfrom: number;\r\n\tlast_page: number;\r\n\tpath: string;\r\n\tper_page: number;\r\n\tto: number;\r\n\ttotal: number;\r\n}\r\n\r\n// Extend/inherit this class\r\n// when using paged API endpoint\r\nexport class APIGetPaged {\r\n\tpage: number;\r\n\tpage_size: number;\r\n\tsort_by: string;\r\n\tsort_direction: string;\r\n\tquery: string;\r\n\tartist: string;\r\n\ttype: string;\r\n\tsupertype: string;\r\n\tsubtype: string;\r\n\trarity: string;\r\n\tuser_id: number;\r\n\tslug: string;\r\n\r\n\turl: string;\r\n\r\n\tbuildUrl = (folder: string) => {\r\n\t\tlet query = new HttpParams();\r\n\r\n\t\t// Page\r\n\t\tif (this.page && this.page.toString().length)\r\n\t\t\tquery = query.set('page', this.page.toString());\r\n\t\telse query = query.delete('page');\r\n\r\n\t\t// Page size\r\n\t\tif (this.page_size && this.page_size.toString().length)\r\n\t\t\tquery = query.set('page_size', this.page_size.toString());\r\n\t\telse query = query.delete('page_size');\r\n\r\n\t\t// Sort by\r\n\t\tif (this.sort_by && this.sort_by.toString().length)\r\n\t\t\tquery = query.set('sort_by', this.sort_by);\r\n\t\telse query = query.delete('sort_by');\r\n\r\n\t\t// Sort direction\r\n\t\tif (this.sort_direction && this.sort_direction.toString().length)\r\n\t\t\tquery = query.set('sort_direction', this.sort_direction);\r\n\t\telse query = query.delete('sort_direction');\r\n\r\n\t\t// Query\r\n\t\tif (this.query && this.query.length)\r\n\t\t\tquery = query.set('search', this.query);\r\n\t\telse query = query.delete('search');\r\n\r\n\t\t// Artist\r\n\t\tif (this.artist && this.artist.length)\r\n\t\t\tquery = query.set('artist', this.artist);\r\n\t\telse query = query.delete('artist');\r\n\r\n\t\t// Type\r\n\t\tif (this.type && this.type.length) query = query.set('type', this.type);\r\n\t\telse query = query.delete('type');\r\n\r\n\t\t// Super type\r\n\t\tif (this.supertype && this.supertype.length)\r\n\t\t\tquery = query.set('supertype', this.supertype);\r\n\t\telse query = query.delete('supertype');\r\n\r\n\t\t// Sub type\r\n\t\tif (this.subtype && this.subtype.length)\r\n\t\t\tquery = query.set('subtype', this.subtype);\r\n\t\telse query = query.delete('subtype');\r\n\r\n\t\t// Rarity\r\n\t\tif (this.rarity && this.rarity.length)\r\n\t\t\tquery = query.set('rarity', this.rarity);\r\n\t\telse query = query.delete('rarity');\r\n\r\n\t\t// User ID\r\n\t\tif (this.user_id && this.user_id.toString().length)\r\n\t\t\tquery = query.set('user_id', this.user_id.toString());\r\n\t\telse query = query.delete('user_id');\r\n\r\n\t\t// Slug\r\n\t\tif (this.slug && this.slug.length) query = query.set('slug', this.slug);\r\n\t\telse query = query.delete('slug');\r\n\r\n\t\t// Include ? and query string if provided\r\n\t\tthis.url = buildUrl(folder, query.toString());\r\n\t\treturn this.url;\r\n\t};\r\n}\r\n\r\nexport const buildUrl = (folder, queryString = '') => {\r\n\treturn `${environment.api}${folder}${\r\n\t\tqueryString.length ? '?' + queryString : ''\r\n\t}`;\r\n};\r\n",
            "properties": [
                {
                    "name": "artist",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "buildUrl",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "page",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "page_size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "query",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "rarity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "slug",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "sort_by",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "sort_direction",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "subtype",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "supertype",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "user_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 33
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "APIReponseMeta",
            "id": "class-APIReponseMeta-4edd8e7c61bd2311f2d0a7a2a200c06216a3066e715e4d96cd0bab49ed8e0492657c4bc578c7c1ec34ff84a08cb37f6de190bd3a3d84c126a8a3c09ea2d8c6a9",
            "file": "src/app/models/api.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { HttpParams } from '@angular/common/http';\r\nimport { environment } from 'src/environments/environment';\r\n\r\nexport class APIResponse {\r\n\tsuccess: boolean;\r\n\tdata: any;\r\n\tmeta: APIReponseMeta;\r\n}\r\n\r\nexport class APIReponseMeta {\r\n\tcurrent_page: number;\r\n\tfrom: number;\r\n\tlast_page: number;\r\n\tpath: string;\r\n\tper_page: number;\r\n\tto: number;\r\n\ttotal: number;\r\n}\r\n\r\n// Extend/inherit this class\r\n// when using paged API endpoint\r\nexport class APIGetPaged {\r\n\tpage: number;\r\n\tpage_size: number;\r\n\tsort_by: string;\r\n\tsort_direction: string;\r\n\tquery: string;\r\n\tartist: string;\r\n\ttype: string;\r\n\tsupertype: string;\r\n\tsubtype: string;\r\n\trarity: string;\r\n\tuser_id: number;\r\n\tslug: string;\r\n\r\n\turl: string;\r\n\r\n\tbuildUrl = (folder: string) => {\r\n\t\tlet query = new HttpParams();\r\n\r\n\t\t// Page\r\n\t\tif (this.page && this.page.toString().length)\r\n\t\t\tquery = query.set('page', this.page.toString());\r\n\t\telse query = query.delete('page');\r\n\r\n\t\t// Page size\r\n\t\tif (this.page_size && this.page_size.toString().length)\r\n\t\t\tquery = query.set('page_size', this.page_size.toString());\r\n\t\telse query = query.delete('page_size');\r\n\r\n\t\t// Sort by\r\n\t\tif (this.sort_by && this.sort_by.toString().length)\r\n\t\t\tquery = query.set('sort_by', this.sort_by);\r\n\t\telse query = query.delete('sort_by');\r\n\r\n\t\t// Sort direction\r\n\t\tif (this.sort_direction && this.sort_direction.toString().length)\r\n\t\t\tquery = query.set('sort_direction', this.sort_direction);\r\n\t\telse query = query.delete('sort_direction');\r\n\r\n\t\t// Query\r\n\t\tif (this.query && this.query.length)\r\n\t\t\tquery = query.set('search', this.query);\r\n\t\telse query = query.delete('search');\r\n\r\n\t\t// Artist\r\n\t\tif (this.artist && this.artist.length)\r\n\t\t\tquery = query.set('artist', this.artist);\r\n\t\telse query = query.delete('artist');\r\n\r\n\t\t// Type\r\n\t\tif (this.type && this.type.length) query = query.set('type', this.type);\r\n\t\telse query = query.delete('type');\r\n\r\n\t\t// Super type\r\n\t\tif (this.supertype && this.supertype.length)\r\n\t\t\tquery = query.set('supertype', this.supertype);\r\n\t\telse query = query.delete('supertype');\r\n\r\n\t\t// Sub type\r\n\t\tif (this.subtype && this.subtype.length)\r\n\t\t\tquery = query.set('subtype', this.subtype);\r\n\t\telse query = query.delete('subtype');\r\n\r\n\t\t// Rarity\r\n\t\tif (this.rarity && this.rarity.length)\r\n\t\t\tquery = query.set('rarity', this.rarity);\r\n\t\telse query = query.delete('rarity');\r\n\r\n\t\t// User ID\r\n\t\tif (this.user_id && this.user_id.toString().length)\r\n\t\t\tquery = query.set('user_id', this.user_id.toString());\r\n\t\telse query = query.delete('user_id');\r\n\r\n\t\t// Slug\r\n\t\tif (this.slug && this.slug.length) query = query.set('slug', this.slug);\r\n\t\telse query = query.delete('slug');\r\n\r\n\t\t// Include ? and query string if provided\r\n\t\tthis.url = buildUrl(folder, query.toString());\r\n\t\treturn this.url;\r\n\t};\r\n}\r\n\r\nexport const buildUrl = (folder, queryString = '') => {\r\n\treturn `${environment.api}${folder}${\r\n\t\tqueryString.length ? '?' + queryString : ''\r\n\t}`;\r\n};\r\n",
            "properties": [
                {
                    "name": "current_page",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "from",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "last_page",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "path",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "per_page",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "to",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "total",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "APIResponse",
            "id": "class-APIResponse-4edd8e7c61bd2311f2d0a7a2a200c06216a3066e715e4d96cd0bab49ed8e0492657c4bc578c7c1ec34ff84a08cb37f6de190bd3a3d84c126a8a3c09ea2d8c6a9",
            "file": "src/app/models/api.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { HttpParams } from '@angular/common/http';\r\nimport { environment } from 'src/environments/environment';\r\n\r\nexport class APIResponse {\r\n\tsuccess: boolean;\r\n\tdata: any;\r\n\tmeta: APIReponseMeta;\r\n}\r\n\r\nexport class APIReponseMeta {\r\n\tcurrent_page: number;\r\n\tfrom: number;\r\n\tlast_page: number;\r\n\tpath: string;\r\n\tper_page: number;\r\n\tto: number;\r\n\ttotal: number;\r\n}\r\n\r\n// Extend/inherit this class\r\n// when using paged API endpoint\r\nexport class APIGetPaged {\r\n\tpage: number;\r\n\tpage_size: number;\r\n\tsort_by: string;\r\n\tsort_direction: string;\r\n\tquery: string;\r\n\tartist: string;\r\n\ttype: string;\r\n\tsupertype: string;\r\n\tsubtype: string;\r\n\trarity: string;\r\n\tuser_id: number;\r\n\tslug: string;\r\n\r\n\turl: string;\r\n\r\n\tbuildUrl = (folder: string) => {\r\n\t\tlet query = new HttpParams();\r\n\r\n\t\t// Page\r\n\t\tif (this.page && this.page.toString().length)\r\n\t\t\tquery = query.set('page', this.page.toString());\r\n\t\telse query = query.delete('page');\r\n\r\n\t\t// Page size\r\n\t\tif (this.page_size && this.page_size.toString().length)\r\n\t\t\tquery = query.set('page_size', this.page_size.toString());\r\n\t\telse query = query.delete('page_size');\r\n\r\n\t\t// Sort by\r\n\t\tif (this.sort_by && this.sort_by.toString().length)\r\n\t\t\tquery = query.set('sort_by', this.sort_by);\r\n\t\telse query = query.delete('sort_by');\r\n\r\n\t\t// Sort direction\r\n\t\tif (this.sort_direction && this.sort_direction.toString().length)\r\n\t\t\tquery = query.set('sort_direction', this.sort_direction);\r\n\t\telse query = query.delete('sort_direction');\r\n\r\n\t\t// Query\r\n\t\tif (this.query && this.query.length)\r\n\t\t\tquery = query.set('search', this.query);\r\n\t\telse query = query.delete('search');\r\n\r\n\t\t// Artist\r\n\t\tif (this.artist && this.artist.length)\r\n\t\t\tquery = query.set('artist', this.artist);\r\n\t\telse query = query.delete('artist');\r\n\r\n\t\t// Type\r\n\t\tif (this.type && this.type.length) query = query.set('type', this.type);\r\n\t\telse query = query.delete('type');\r\n\r\n\t\t// Super type\r\n\t\tif (this.supertype && this.supertype.length)\r\n\t\t\tquery = query.set('supertype', this.supertype);\r\n\t\telse query = query.delete('supertype');\r\n\r\n\t\t// Sub type\r\n\t\tif (this.subtype && this.subtype.length)\r\n\t\t\tquery = query.set('subtype', this.subtype);\r\n\t\telse query = query.delete('subtype');\r\n\r\n\t\t// Rarity\r\n\t\tif (this.rarity && this.rarity.length)\r\n\t\t\tquery = query.set('rarity', this.rarity);\r\n\t\telse query = query.delete('rarity');\r\n\r\n\t\t// User ID\r\n\t\tif (this.user_id && this.user_id.toString().length)\r\n\t\t\tquery = query.set('user_id', this.user_id.toString());\r\n\t\telse query = query.delete('user_id');\r\n\r\n\t\t// Slug\r\n\t\tif (this.slug && this.slug.length) query = query.set('slug', this.slug);\r\n\t\telse query = query.delete('slug');\r\n\r\n\t\t// Include ? and query string if provided\r\n\t\tthis.url = buildUrl(folder, query.toString());\r\n\t\treturn this.url;\r\n\t};\r\n}\r\n\r\nexport const buildUrl = (folder, queryString = '') => {\r\n\treturn `${environment.api}${folder}${\r\n\t\tqueryString.length ? '?' + queryString : ''\r\n\t}`;\r\n};\r\n",
            "properties": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "meta",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "APIReponseMeta",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "success",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "AppPage",
            "id": "class-AppPage-21c7d8a0be483fc28fd747d590d088706f3703ca65a3e46a144e2b5eeeccdc43f1c5482bf5e8aa8964c575e76ed229e02e852d20baa1bb0296da230a3cc778b3",
            "file": "e2e/src/app.po.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { browser, by, element } from 'protractor';\r\n\r\nexport class AppPage {\r\n  navigateTo(): Promise<unknown> {\r\n    return browser.get(browser.baseUrl) as Promise<unknown>;\r\n  }\r\n\r\n  getTitleText(): Promise<string> {\r\n    return element(by.css('app-root .content span')).getText() as Promise<string>;\r\n  }\r\n}\r\n",
            "properties": [],
            "methods": [
                {
                    "name": "getTitleText",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<string>",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "navigateTo",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<>",
                    "typeParameters": [],
                    "line": 4,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "AppSettings",
            "id": "class-AppSettings-c984c83c862aa57df7a734412dc0b182533abfe2322e9f71b739e3a40242882f1c7c6e5e613f50cc782593bd34b15f8a49fcad495f248a09eee464f883b2686b",
            "file": "src/app/app.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export abstract class AppSettings {\r\n\tstatic titlePrefix:string = \"Rotomdex - \";\r\n}",
            "properties": [
                {
                    "name": "titlePrefix",
                    "defaultValue": "\"Rotomdex - \"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2,
                    "modifierKind": [
                        124
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Attack",
            "id": "class-Attack-f5f2f36ddb9717c858a28de3fe93b1f4ca862a989ae6c9b55079d748e35e740031824a503766846e132d58bc5700fbcc7938cfb92cb36ce08da9860edd9e05df",
            "file": "src/app/pages/cards/card/card.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { CardCollectionItem } from './../../../components/card-collection/card-collection-item/card-collection-item';\r\nimport { Select, SelectOption, SelectOptionGroup } from '@app/controls';\r\nimport { Menu } from '@app/controls/menu';\r\nimport '@app/helpers/string.extensions';\r\nimport { ItemsFilter } from '@app/layout';\r\nimport { Icons } from '@app/models';\r\nimport { Expansion } from '@app/pages/expansions';\r\nimport { Pokemon } from '@app/pages/pokemons/pokemon/pokemon';\r\n\r\nexport const DEFAULT_IMAGE = '/assets/back.jpg';\r\n\r\nexport class Weakness {\r\n\ttype: string;\r\n\tvalue: string;\r\n}\r\n\r\nexport class Attack {\r\n\tcost: string[] = [];\r\n\tname: string;\r\n\ttext: string;\r\n\tdamage: number;\r\n\tconvertedEnergyCost: number;\r\n}\r\n\r\nexport class Card {\r\n\tid: number;\r\n\tname: string;\r\n\tslug: string;\r\n\tpokemon: Pokemon;\r\n\texpansion: Expansion;\r\n\tnumber: string;\r\n\trarity: string;\r\n\timage: string;\r\n\timage_high_res?: string;\r\n\tsuper_type: string;\r\n\tsub_type?: string;\r\n\thp?: number;\r\n\tretreat_cost: string[] = [];\r\n\tweaknesses: Weakness[] = [];\r\n\tattacks: Attack[] = [];\r\n\tartist: string;\r\n\tis_shiny: boolean;\r\n\tis_promo: boolean;\r\n\tis_full_art: boolean;\r\n\tis_gold: boolean;\r\n\thas_first_edition: boolean;\r\n\thas_shadowless: boolean;\r\n\thas_reverse_holo: boolean;\r\n\ttypes: string[] = [];\r\n\tlast_prices: CardLastPrices;\r\n\tuser_cards: CardCollectionItem[] = [];\r\n\r\n\troute: string;\r\n\ttempId: number;\r\n\r\n\tgetCardNumber(): string {\r\n\t\t// IS number\r\n\t\tif (!isNaN(+this.number)) {\r\n\t\t\tlet x = `${this.number}`;\r\n\t\t\tlet y = `${this.expansion.total_cards}`;\r\n\t\t\tlet pad = '000';\r\n\t\t\tlet xFormatted = pad.substring(0, pad.length - x.length) + x;\r\n\t\t\tlet yFormatted = pad.substring(0, pad.length - y.length) + y;\r\n\t\t\treturn `${xFormatted}/${yFormatted}`;\r\n\t\t}\r\n\t\t// NOT number (promo)\r\n\t\telse {\r\n\t\t\treturn this.number;\r\n\t\t}\r\n\t}\r\n\r\n\tconstructor(init?: Partial<Card>) {\r\n\t\tObject.assign(this, init);\r\n\r\n\t\t// Route\r\n\t\tthis.route = '/cards/' + this.slug;\r\n\r\n\t\t// Initalize expansion\r\n\t\tif (init.expansion) {\r\n\t\t\tthis.expansion = new Expansion(init.expansion);\r\n\t\t}\r\n\r\n\t\t// Initalize pokemon\r\n\t\tif (init.pokemon) {\r\n\t\t\tthis.pokemon = new Pokemon(init.pokemon);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport class CardLastPrices {\r\n\tcard_id: number;\r\n\tcondition: string;\r\n\tcreated_at: Date;\r\n\tdirect_price: string;\r\n\thigh_price: number;\r\n\tid: number;\r\n\tlow_price: number;\r\n\tmarket_price: number;\r\n\tmid_price: number;\r\n\tsource: string;\r\n\tupdated_at: Date;\r\n\tvariation: string;\r\n\r\n\tconstructor(init?: Partial<CardLastPrices>) {\r\n\t\tObject.assign(this, init);\r\n\t}\r\n}\r\n\r\nexport class CardGroup {\r\n\ttitle: string;\r\n\ticon: Icons;\r\n\tcards: Card[] = [];\r\n\tcount: number = 0;\r\n\tconstructor(init?: Partial<CardGroup>) {\r\n\t\tObject.assign(this, init);\r\n\t}\r\n}\r\n\r\nexport class CardCount {\r\n\tget count(): number {\r\n\t\treturn this.cards.length;\r\n\t}\r\n\tcards: Card[] = [];\r\n\tconstructor(init?: Partial<CardCount>) {\r\n\t\tObject.assign(this, init);\r\n\t}\r\n}\r\n\r\nexport function SetSortByCards(itemFilter: ItemsFilter) {\r\n\titemFilter.selectSortBy.optionGroups[0] = new SelectOptionGroup({\r\n\t\tlabel: 'Sort By',\r\n\t\toptions: [\r\n\t\t\tnew SelectOption({\r\n\t\t\t\ttext: 'Number',\r\n\t\t\t\tvalue: 'number',\r\n\t\t\t}),\r\n\t\t\tnew SelectOption({\r\n\t\t\t\ttext: 'Name',\r\n\t\t\t\tvalue: 'name',\r\n\t\t\t}),\r\n\t\t\t// new SelectOption({\r\n\t\t\t// \ttext: 'Price',\r\n\t\t\t// \tvalue: 'price',\r\n\t\t\t// }),\r\n\t\t\tnew SelectOption({\r\n\t\t\t\ttext: 'Release Date',\r\n\t\t\t\tvalue: 'release_date',\r\n\t\t\t}),\r\n\t\t\t// new SelectOption({\r\n\t\t\t// \ttext: 'Rarity',\r\n\t\t\t// \tvalue: 'rarity',\r\n\t\t\t// }),\r\n\t\t],\r\n\t});\r\n\titemFilter.selectSortBy.value = 'number';\r\n}\r\n",
            "properties": [
                {
                    "name": "convertedEnergyCost",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "cost",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "damage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Button",
            "id": "class-Button-7488db57cbfc254be6e24d4499fa742023e6e899aa6fc1911ea8ae25a8599d2d0f153d175922da25409efed90817cb238dfdbae19ac93a2c3d34b68616954391",
            "file": "src/app/controls/button/button.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Size } from '@app/models/size';\r\n\r\nexport enum ButtonType {\r\n\tbutton = 'button',\r\n\tsubmit = 'submit',\r\n}\r\n\r\nexport class Button {\r\n\ttext: string;\r\n\ticon: string;\r\n\tsymbol: string;\r\n\thref: string;\r\n\troute: string;\r\n\tdisabled: boolean;\r\n\tclasses: string;\r\n\twidth: string;\r\n\ttype: ButtonType = ButtonType.button;\r\n\tprice: number;\r\n\tsize: Size;\r\n\r\n\tpublic click: () => void;\r\n\r\n\tpublic constructor(init?: Partial<Button>) {\r\n\t\tObject.assign(this, init);\r\n\t}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "init",
                        "type": "Partial<Button>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 21,
                "modifierKind": [
                    123
                ],
                "jsdoctags": [
                    {
                        "name": "init",
                        "type": "Partial<Button>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "classes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "click",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "href",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "price",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "route",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Size",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "symbol",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "type",
                    "defaultValue": "ButtonType.button",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ButtonType",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "width",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "CacheGlobal",
            "id": "class-CacheGlobal-317398b1f876a3253a03ca3bfe900d3a3b8e081ea560917aa7a51ea2089f81450b118c352738cae8e355f4104003ab42c7670755dbd796a5904af9a2956d3f5d",
            "file": "src/app/services/cache/globalCache.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Card, Expansion, Pokemon, PokemonVariant, Series } from \"@app/pages\";\r\n\r\nexport abstract class CacheGlobal {\r\n\tstatic expansions: Series[];\r\n\tstatic expansion: {[key: string]: Expansion} = {};\r\n\tstatic card: {[key: string]: Card} = {};\r\n\tstatic pokemon: {[key: string]: Pokemon} = {};\r\n\tstatic pokemonVariant: {[key: string]: PokemonVariant} = {};\r\n\r\n\tstatic clear(type: string, key: string) {\r\n\t\tthis[type][key] = null;\r\n\t}\r\n}",
            "properties": [
                {
                    "name": "card",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "expansion",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "expansions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Series[]",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "pokemon",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "pokemonVariant",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        124
                    ]
                }
            ],
            "methods": [
                {
                    "name": "clear",
                    "args": [
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Card",
            "id": "class-Card-f5f2f36ddb9717c858a28de3fe93b1f4ca862a989ae6c9b55079d748e35e740031824a503766846e132d58bc5700fbcc7938cfb92cb36ce08da9860edd9e05df",
            "file": "src/app/pages/cards/card/card.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { CardCollectionItem } from './../../../components/card-collection/card-collection-item/card-collection-item';\r\nimport { Select, SelectOption, SelectOptionGroup } from '@app/controls';\r\nimport { Menu } from '@app/controls/menu';\r\nimport '@app/helpers/string.extensions';\r\nimport { ItemsFilter } from '@app/layout';\r\nimport { Icons } from '@app/models';\r\nimport { Expansion } from '@app/pages/expansions';\r\nimport { Pokemon } from '@app/pages/pokemons/pokemon/pokemon';\r\n\r\nexport const DEFAULT_IMAGE = '/assets/back.jpg';\r\n\r\nexport class Weakness {\r\n\ttype: string;\r\n\tvalue: string;\r\n}\r\n\r\nexport class Attack {\r\n\tcost: string[] = [];\r\n\tname: string;\r\n\ttext: string;\r\n\tdamage: number;\r\n\tconvertedEnergyCost: number;\r\n}\r\n\r\nexport class Card {\r\n\tid: number;\r\n\tname: string;\r\n\tslug: string;\r\n\tpokemon: Pokemon;\r\n\texpansion: Expansion;\r\n\tnumber: string;\r\n\trarity: string;\r\n\timage: string;\r\n\timage_high_res?: string;\r\n\tsuper_type: string;\r\n\tsub_type?: string;\r\n\thp?: number;\r\n\tretreat_cost: string[] = [];\r\n\tweaknesses: Weakness[] = [];\r\n\tattacks: Attack[] = [];\r\n\tartist: string;\r\n\tis_shiny: boolean;\r\n\tis_promo: boolean;\r\n\tis_full_art: boolean;\r\n\tis_gold: boolean;\r\n\thas_first_edition: boolean;\r\n\thas_shadowless: boolean;\r\n\thas_reverse_holo: boolean;\r\n\ttypes: string[] = [];\r\n\tlast_prices: CardLastPrices;\r\n\tuser_cards: CardCollectionItem[] = [];\r\n\r\n\troute: string;\r\n\ttempId: number;\r\n\r\n\tgetCardNumber(): string {\r\n\t\t// IS number\r\n\t\tif (!isNaN(+this.number)) {\r\n\t\t\tlet x = `${this.number}`;\r\n\t\t\tlet y = `${this.expansion.total_cards}`;\r\n\t\t\tlet pad = '000';\r\n\t\t\tlet xFormatted = pad.substring(0, pad.length - x.length) + x;\r\n\t\t\tlet yFormatted = pad.substring(0, pad.length - y.length) + y;\r\n\t\t\treturn `${xFormatted}/${yFormatted}`;\r\n\t\t}\r\n\t\t// NOT number (promo)\r\n\t\telse {\r\n\t\t\treturn this.number;\r\n\t\t}\r\n\t}\r\n\r\n\tconstructor(init?: Partial<Card>) {\r\n\t\tObject.assign(this, init);\r\n\r\n\t\t// Route\r\n\t\tthis.route = '/cards/' + this.slug;\r\n\r\n\t\t// Initalize expansion\r\n\t\tif (init.expansion) {\r\n\t\t\tthis.expansion = new Expansion(init.expansion);\r\n\t\t}\r\n\r\n\t\t// Initalize pokemon\r\n\t\tif (init.pokemon) {\r\n\t\t\tthis.pokemon = new Pokemon(init.pokemon);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport class CardLastPrices {\r\n\tcard_id: number;\r\n\tcondition: string;\r\n\tcreated_at: Date;\r\n\tdirect_price: string;\r\n\thigh_price: number;\r\n\tid: number;\r\n\tlow_price: number;\r\n\tmarket_price: number;\r\n\tmid_price: number;\r\n\tsource: string;\r\n\tupdated_at: Date;\r\n\tvariation: string;\r\n\r\n\tconstructor(init?: Partial<CardLastPrices>) {\r\n\t\tObject.assign(this, init);\r\n\t}\r\n}\r\n\r\nexport class CardGroup {\r\n\ttitle: string;\r\n\ticon: Icons;\r\n\tcards: Card[] = [];\r\n\tcount: number = 0;\r\n\tconstructor(init?: Partial<CardGroup>) {\r\n\t\tObject.assign(this, init);\r\n\t}\r\n}\r\n\r\nexport class CardCount {\r\n\tget count(): number {\r\n\t\treturn this.cards.length;\r\n\t}\r\n\tcards: Card[] = [];\r\n\tconstructor(init?: Partial<CardCount>) {\r\n\t\tObject.assign(this, init);\r\n\t}\r\n}\r\n\r\nexport function SetSortByCards(itemFilter: ItemsFilter) {\r\n\titemFilter.selectSortBy.optionGroups[0] = new SelectOptionGroup({\r\n\t\tlabel: 'Sort By',\r\n\t\toptions: [\r\n\t\t\tnew SelectOption({\r\n\t\t\t\ttext: 'Number',\r\n\t\t\t\tvalue: 'number',\r\n\t\t\t}),\r\n\t\t\tnew SelectOption({\r\n\t\t\t\ttext: 'Name',\r\n\t\t\t\tvalue: 'name',\r\n\t\t\t}),\r\n\t\t\t// new SelectOption({\r\n\t\t\t// \ttext: 'Price',\r\n\t\t\t// \tvalue: 'price',\r\n\t\t\t// }),\r\n\t\t\tnew SelectOption({\r\n\t\t\t\ttext: 'Release Date',\r\n\t\t\t\tvalue: 'release_date',\r\n\t\t\t}),\r\n\t\t\t// new SelectOption({\r\n\t\t\t// \ttext: 'Rarity',\r\n\t\t\t// \tvalue: 'rarity',\r\n\t\t\t// }),\r\n\t\t],\r\n\t});\r\n\titemFilter.selectSortBy.value = 'number';\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "init",
                        "type": "Partial<Card>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 70,
                "jsdoctags": [
                    {
                        "name": "init",
                        "type": "Partial<Card>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "artist",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "attacks",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Attack[]",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "expansion",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Expansion",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "has_first_edition",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "has_reverse_holo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "has_shadowless",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "hp",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "image",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "image_high_res",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "is_full_art",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "is_gold",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "is_promo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "is_shiny",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "last_prices",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CardLastPrices",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "number",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "pokemon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Pokemon",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "rarity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "retreat_cost",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "route",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "slug",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "sub_type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "super_type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "tempId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "types",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "user_cards",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CardCollectionItem[]",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "weaknesses",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Weakness[]",
                    "optional": false,
                    "description": "",
                    "line": 39
                }
            ],
            "methods": [
                {
                    "name": "getCardNumber",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "CardCollectionItem",
            "id": "class-CardCollectionItem-95ed66798220b5fe927a112c2f1a15b66a998975921c3e82eeffce14824d6a9ce8c6d9d2456b75b6e01c7de857a6249972943a9ac0ffbeff001844a0a16d1baa",
            "file": "src/app/components/card-collection/card-collection-item/card-collection-item.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Condition } from './../../../models/condition';\r\nexport class CardCollectionItem {\r\n\tid: number;\r\n\tuser_card_id: number;\r\n\tcard_id: number;\r\n\tcard_group_id?: number;\r\n\tcondition: string = Condition.Mint;\r\n\tgraded_by: string;\r\n\tprinting: string;\r\n\tnotes: string;\r\n\tdate_obtained: Date;\r\n\tpurchase_price: Number;\r\n\r\n\tconstructor(init?: Partial<CardCollectionItem>) {\r\n\t\tObject.assign(this, init);\r\n\t\tthis.user_card_id = this.id;\r\n\t}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "init",
                        "type": "Partial<CardCollectionItem>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "init",
                        "type": "Partial<CardCollectionItem>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "card_group_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "card_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "condition",
                    "defaultValue": "Condition.Mint",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "date_obtained",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "graded_by",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "notes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "printing",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "purchase_price",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Number",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "user_card_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "CardCount",
            "id": "class-CardCount-f5f2f36ddb9717c858a28de3fe93b1f4ca862a989ae6c9b55079d748e35e740031824a503766846e132d58bc5700fbcc7938cfb92cb36ce08da9860edd9e05df",
            "file": "src/app/pages/cards/card/card.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { CardCollectionItem } from './../../../components/card-collection/card-collection-item/card-collection-item';\r\nimport { Select, SelectOption, SelectOptionGroup } from '@app/controls';\r\nimport { Menu } from '@app/controls/menu';\r\nimport '@app/helpers/string.extensions';\r\nimport { ItemsFilter } from '@app/layout';\r\nimport { Icons } from '@app/models';\r\nimport { Expansion } from '@app/pages/expansions';\r\nimport { Pokemon } from '@app/pages/pokemons/pokemon/pokemon';\r\n\r\nexport const DEFAULT_IMAGE = '/assets/back.jpg';\r\n\r\nexport class Weakness {\r\n\ttype: string;\r\n\tvalue: string;\r\n}\r\n\r\nexport class Attack {\r\n\tcost: string[] = [];\r\n\tname: string;\r\n\ttext: string;\r\n\tdamage: number;\r\n\tconvertedEnergyCost: number;\r\n}\r\n\r\nexport class Card {\r\n\tid: number;\r\n\tname: string;\r\n\tslug: string;\r\n\tpokemon: Pokemon;\r\n\texpansion: Expansion;\r\n\tnumber: string;\r\n\trarity: string;\r\n\timage: string;\r\n\timage_high_res?: string;\r\n\tsuper_type: string;\r\n\tsub_type?: string;\r\n\thp?: number;\r\n\tretreat_cost: string[] = [];\r\n\tweaknesses: Weakness[] = [];\r\n\tattacks: Attack[] = [];\r\n\tartist: string;\r\n\tis_shiny: boolean;\r\n\tis_promo: boolean;\r\n\tis_full_art: boolean;\r\n\tis_gold: boolean;\r\n\thas_first_edition: boolean;\r\n\thas_shadowless: boolean;\r\n\thas_reverse_holo: boolean;\r\n\ttypes: string[] = [];\r\n\tlast_prices: CardLastPrices;\r\n\tuser_cards: CardCollectionItem[] = [];\r\n\r\n\troute: string;\r\n\ttempId: number;\r\n\r\n\tgetCardNumber(): string {\r\n\t\t// IS number\r\n\t\tif (!isNaN(+this.number)) {\r\n\t\t\tlet x = `${this.number}`;\r\n\t\t\tlet y = `${this.expansion.total_cards}`;\r\n\t\t\tlet pad = '000';\r\n\t\t\tlet xFormatted = pad.substring(0, pad.length - x.length) + x;\r\n\t\t\tlet yFormatted = pad.substring(0, pad.length - y.length) + y;\r\n\t\t\treturn `${xFormatted}/${yFormatted}`;\r\n\t\t}\r\n\t\t// NOT number (promo)\r\n\t\telse {\r\n\t\t\treturn this.number;\r\n\t\t}\r\n\t}\r\n\r\n\tconstructor(init?: Partial<Card>) {\r\n\t\tObject.assign(this, init);\r\n\r\n\t\t// Route\r\n\t\tthis.route = '/cards/' + this.slug;\r\n\r\n\t\t// Initalize expansion\r\n\t\tif (init.expansion) {\r\n\t\t\tthis.expansion = new Expansion(init.expansion);\r\n\t\t}\r\n\r\n\t\t// Initalize pokemon\r\n\t\tif (init.pokemon) {\r\n\t\t\tthis.pokemon = new Pokemon(init.pokemon);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport class CardLastPrices {\r\n\tcard_id: number;\r\n\tcondition: string;\r\n\tcreated_at: Date;\r\n\tdirect_price: string;\r\n\thigh_price: number;\r\n\tid: number;\r\n\tlow_price: number;\r\n\tmarket_price: number;\r\n\tmid_price: number;\r\n\tsource: string;\r\n\tupdated_at: Date;\r\n\tvariation: string;\r\n\r\n\tconstructor(init?: Partial<CardLastPrices>) {\r\n\t\tObject.assign(this, init);\r\n\t}\r\n}\r\n\r\nexport class CardGroup {\r\n\ttitle: string;\r\n\ticon: Icons;\r\n\tcards: Card[] = [];\r\n\tcount: number = 0;\r\n\tconstructor(init?: Partial<CardGroup>) {\r\n\t\tObject.assign(this, init);\r\n\t}\r\n}\r\n\r\nexport class CardCount {\r\n\tget count(): number {\r\n\t\treturn this.cards.length;\r\n\t}\r\n\tcards: Card[] = [];\r\n\tconstructor(init?: Partial<CardCount>) {\r\n\t\tObject.assign(this, init);\r\n\t}\r\n}\r\n\r\nexport function SetSortByCards(itemFilter: ItemsFilter) {\r\n\titemFilter.selectSortBy.optionGroups[0] = new SelectOptionGroup({\r\n\t\tlabel: 'Sort By',\r\n\t\toptions: [\r\n\t\t\tnew SelectOption({\r\n\t\t\t\ttext: 'Number',\r\n\t\t\t\tvalue: 'number',\r\n\t\t\t}),\r\n\t\t\tnew SelectOption({\r\n\t\t\t\ttext: 'Name',\r\n\t\t\t\tvalue: 'name',\r\n\t\t\t}),\r\n\t\t\t// new SelectOption({\r\n\t\t\t// \ttext: 'Price',\r\n\t\t\t// \tvalue: 'price',\r\n\t\t\t// }),\r\n\t\t\tnew SelectOption({\r\n\t\t\t\ttext: 'Release Date',\r\n\t\t\t\tvalue: 'release_date',\r\n\t\t\t}),\r\n\t\t\t// new SelectOption({\r\n\t\t\t// \ttext: 'Rarity',\r\n\t\t\t// \tvalue: 'rarity',\r\n\t\t\t// }),\r\n\t\t],\r\n\t});\r\n\titemFilter.selectSortBy.value = 'number';\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "init",
                        "type": "Partial<CardCount>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 123,
                "jsdoctags": [
                    {
                        "name": "init",
                        "type": "Partial<CardCount>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "cards",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Card[]",
                    "optional": false,
                    "description": "",
                    "line": 123
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "accessors": {
                "count": {
                    "name": "count",
                    "getSignature": {
                        "name": "count",
                        "type": "number",
                        "returnType": "number",
                        "line": 120
                    }
                }
            },
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "CardFactory",
            "id": "class-CardFactory-be211a00075f74454d6f5b42630fdb8f856ad0ac18a88f06c1ed1e313d79a8c600ebe9a00db6b9cecd0bbc1a962c142368499c62a248707b455a4ea0d7f664ab",
            "file": "src/app/services/factory/card.factory.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Card } from \"../../pages/cards/card/card\"\r\n\r\nexport class CardFactory {\r\n\tcards = [\r\n\t\t{\r\n\t\t\tid: 1,\r\n\t\t\tname: \"Charizard GX\",\r\n\t\t\tnumber: \"SV49\",\r\n\t\t\trarity: \"Rare\",\r\n\t\t\timage: \"https://pod.pokellector.com/cards/279/Charizard-GX.HIF.SV49.29005.png\",\r\n\t\t\thp: 250,\r\n\t\t\tslug: \"charizard1\",\r\n\t\t\tartist: \"Andrew Deibel\",\r\n\t\t\tprice: 200,\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 2,\r\n\t\t\tname: \"Charizard V\",\r\n\t\t\tnumber: \"79/73\",\r\n\t\t\trarity: \"Secret Rare\",\r\n\t\t\timage: \"https://pod.pokellector.com/cards/298/Charizard-V.SWSH3.79.35778.png\",\r\n\t\t\thp: 220,\r\n\t\t\tslug: \"charizard2\",\r\n\t\t\tartist: \"Andrew Deibel\",\r\n\t\t\tprice: 200,\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 3,\r\n\t\t\tname: \"Charizard VMAX\",\r\n\t\t\tnumber: \"20/189\",\r\n\t\t\trarity: \"Rare\",\r\n\t\t\timage: \"https://pod.pokellector.com/cards/296/Charizard-VMAX.SWSH3.20.35112.png\",\r\n\t\t\thp: 330,\r\n\t\t\tslug: \"charizard3\",\r\n\t\t\tartist: \"Andrew Deibel\",\r\n\t\t\tprice: 200,\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 4,\r\n\t\t\tname: \"Charizard V\",\r\n\t\t\tnumber: \"50/107\",\r\n\t\t\trarity: \"Common\",\r\n\t\t\timage: \"https://pod.pokellector.com/cards/287/Charizard-V.SWSH.50.35783.png\",\r\n\t\t\thp: 220,\r\n\t\t\tslug: \"charizard4\",\r\n\t\t\tartist: \"Andrew Deibel\",\r\n\t\t\tprice: 200,\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 5,\r\n\t\t\tname: \"Charizard & Braixen GX\",\r\n\t\t\tnumber: \"22/236\",\r\n\t\t\trarity: \"Rare\",\r\n\t\t\timage: \"https://pod.pokellector.com/cards/280/Charizard-Braixen-GX.CEC.22.30121.png\",\r\n\t\t\thp: 270,\r\n\t\t\tslug: \"charizard5\",\r\n\t\t\tartist: \"Andrew Deibel\",\r\n\t\t\tprice: 200,\r\n\t\t}\r\n\t]\r\n\tcreateCards(cardCount: number = 1): Card[] {\r\n\t\tvar cards = [];\r\n\t\tArray.from(Array(cardCount)).forEach(() => {\r\n\t\t\tvar randomCard = new Card(this.cards[Math.floor(Math.random() * this.cards.length)]);\r\n\t\t\tcards.push(randomCard);\r\n\t\t});\r\n\t\treturn cards;\r\n\t}\r\n}",
            "properties": [
                {
                    "name": "cards",
                    "defaultValue": "[\r\n\t\t{\r\n\t\t\tid: 1,\r\n\t\t\tname: \"Charizard GX\",\r\n\t\t\tnumber: \"SV49\",\r\n\t\t\trarity: \"Rare\",\r\n\t\t\timage: \"https://pod.pokellector.com/cards/279/Charizard-GX.HIF.SV49.29005.png\",\r\n\t\t\thp: 250,\r\n\t\t\tslug: \"charizard1\",\r\n\t\t\tartist: \"Andrew Deibel\",\r\n\t\t\tprice: 200,\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 2,\r\n\t\t\tname: \"Charizard V\",\r\n\t\t\tnumber: \"79/73\",\r\n\t\t\trarity: \"Secret Rare\",\r\n\t\t\timage: \"https://pod.pokellector.com/cards/298/Charizard-V.SWSH3.79.35778.png\",\r\n\t\t\thp: 220,\r\n\t\t\tslug: \"charizard2\",\r\n\t\t\tartist: \"Andrew Deibel\",\r\n\t\t\tprice: 200,\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 3,\r\n\t\t\tname: \"Charizard VMAX\",\r\n\t\t\tnumber: \"20/189\",\r\n\t\t\trarity: \"Rare\",\r\n\t\t\timage: \"https://pod.pokellector.com/cards/296/Charizard-VMAX.SWSH3.20.35112.png\",\r\n\t\t\thp: 330,\r\n\t\t\tslug: \"charizard3\",\r\n\t\t\tartist: \"Andrew Deibel\",\r\n\t\t\tprice: 200,\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 4,\r\n\t\t\tname: \"Charizard V\",\r\n\t\t\tnumber: \"50/107\",\r\n\t\t\trarity: \"Common\",\r\n\t\t\timage: \"https://pod.pokellector.com/cards/287/Charizard-V.SWSH.50.35783.png\",\r\n\t\t\thp: 220,\r\n\t\t\tslug: \"charizard4\",\r\n\t\t\tartist: \"Andrew Deibel\",\r\n\t\t\tprice: 200,\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 5,\r\n\t\t\tname: \"Charizard & Braixen GX\",\r\n\t\t\tnumber: \"22/236\",\r\n\t\t\trarity: \"Rare\",\r\n\t\t\timage: \"https://pod.pokellector.com/cards/280/Charizard-Braixen-GX.CEC.22.30121.png\",\r\n\t\t\thp: 270,\r\n\t\t\tslug: \"charizard5\",\r\n\t\t\tartist: \"Andrew Deibel\",\r\n\t\t\tprice: 200,\r\n\t\t}\r\n\t]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "methods": [
                {
                    "name": "createCards",
                    "args": [
                        {
                            "name": "cardCount",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "1"
                        }
                    ],
                    "optional": false,
                    "returnType": "Card[]",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "cardCount",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "1",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "CardGroup",
            "id": "class-CardGroup-f5f2f36ddb9717c858a28de3fe93b1f4ca862a989ae6c9b55079d748e35e740031824a503766846e132d58bc5700fbcc7938cfb92cb36ce08da9860edd9e05df",
            "file": "src/app/pages/cards/card/card.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { CardCollectionItem } from './../../../components/card-collection/card-collection-item/card-collection-item';\r\nimport { Select, SelectOption, SelectOptionGroup } from '@app/controls';\r\nimport { Menu } from '@app/controls/menu';\r\nimport '@app/helpers/string.extensions';\r\nimport { ItemsFilter } from '@app/layout';\r\nimport { Icons } from '@app/models';\r\nimport { Expansion } from '@app/pages/expansions';\r\nimport { Pokemon } from '@app/pages/pokemons/pokemon/pokemon';\r\n\r\nexport const DEFAULT_IMAGE = '/assets/back.jpg';\r\n\r\nexport class Weakness {\r\n\ttype: string;\r\n\tvalue: string;\r\n}\r\n\r\nexport class Attack {\r\n\tcost: string[] = [];\r\n\tname: string;\r\n\ttext: string;\r\n\tdamage: number;\r\n\tconvertedEnergyCost: number;\r\n}\r\n\r\nexport class Card {\r\n\tid: number;\r\n\tname: string;\r\n\tslug: string;\r\n\tpokemon: Pokemon;\r\n\texpansion: Expansion;\r\n\tnumber: string;\r\n\trarity: string;\r\n\timage: string;\r\n\timage_high_res?: string;\r\n\tsuper_type: string;\r\n\tsub_type?: string;\r\n\thp?: number;\r\n\tretreat_cost: string[] = [];\r\n\tweaknesses: Weakness[] = [];\r\n\tattacks: Attack[] = [];\r\n\tartist: string;\r\n\tis_shiny: boolean;\r\n\tis_promo: boolean;\r\n\tis_full_art: boolean;\r\n\tis_gold: boolean;\r\n\thas_first_edition: boolean;\r\n\thas_shadowless: boolean;\r\n\thas_reverse_holo: boolean;\r\n\ttypes: string[] = [];\r\n\tlast_prices: CardLastPrices;\r\n\tuser_cards: CardCollectionItem[] = [];\r\n\r\n\troute: string;\r\n\ttempId: number;\r\n\r\n\tgetCardNumber(): string {\r\n\t\t// IS number\r\n\t\tif (!isNaN(+this.number)) {\r\n\t\t\tlet x = `${this.number}`;\r\n\t\t\tlet y = `${this.expansion.total_cards}`;\r\n\t\t\tlet pad = '000';\r\n\t\t\tlet xFormatted = pad.substring(0, pad.length - x.length) + x;\r\n\t\t\tlet yFormatted = pad.substring(0, pad.length - y.length) + y;\r\n\t\t\treturn `${xFormatted}/${yFormatted}`;\r\n\t\t}\r\n\t\t// NOT number (promo)\r\n\t\telse {\r\n\t\t\treturn this.number;\r\n\t\t}\r\n\t}\r\n\r\n\tconstructor(init?: Partial<Card>) {\r\n\t\tObject.assign(this, init);\r\n\r\n\t\t// Route\r\n\t\tthis.route = '/cards/' + this.slug;\r\n\r\n\t\t// Initalize expansion\r\n\t\tif (init.expansion) {\r\n\t\t\tthis.expansion = new Expansion(init.expansion);\r\n\t\t}\r\n\r\n\t\t// Initalize pokemon\r\n\t\tif (init.pokemon) {\r\n\t\t\tthis.pokemon = new Pokemon(init.pokemon);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport class CardLastPrices {\r\n\tcard_id: number;\r\n\tcondition: string;\r\n\tcreated_at: Date;\r\n\tdirect_price: string;\r\n\thigh_price: number;\r\n\tid: number;\r\n\tlow_price: number;\r\n\tmarket_price: number;\r\n\tmid_price: number;\r\n\tsource: string;\r\n\tupdated_at: Date;\r\n\tvariation: string;\r\n\r\n\tconstructor(init?: Partial<CardLastPrices>) {\r\n\t\tObject.assign(this, init);\r\n\t}\r\n}\r\n\r\nexport class CardGroup {\r\n\ttitle: string;\r\n\ticon: Icons;\r\n\tcards: Card[] = [];\r\n\tcount: number = 0;\r\n\tconstructor(init?: Partial<CardGroup>) {\r\n\t\tObject.assign(this, init);\r\n\t}\r\n}\r\n\r\nexport class CardCount {\r\n\tget count(): number {\r\n\t\treturn this.cards.length;\r\n\t}\r\n\tcards: Card[] = [];\r\n\tconstructor(init?: Partial<CardCount>) {\r\n\t\tObject.assign(this, init);\r\n\t}\r\n}\r\n\r\nexport function SetSortByCards(itemFilter: ItemsFilter) {\r\n\titemFilter.selectSortBy.optionGroups[0] = new SelectOptionGroup({\r\n\t\tlabel: 'Sort By',\r\n\t\toptions: [\r\n\t\t\tnew SelectOption({\r\n\t\t\t\ttext: 'Number',\r\n\t\t\t\tvalue: 'number',\r\n\t\t\t}),\r\n\t\t\tnew SelectOption({\r\n\t\t\t\ttext: 'Name',\r\n\t\t\t\tvalue: 'name',\r\n\t\t\t}),\r\n\t\t\t// new SelectOption({\r\n\t\t\t// \ttext: 'Price',\r\n\t\t\t// \tvalue: 'price',\r\n\t\t\t// }),\r\n\t\t\tnew SelectOption({\r\n\t\t\t\ttext: 'Release Date',\r\n\t\t\t\tvalue: 'release_date',\r\n\t\t\t}),\r\n\t\t\t// new SelectOption({\r\n\t\t\t// \ttext: 'Rarity',\r\n\t\t\t// \tvalue: 'rarity',\r\n\t\t\t// }),\r\n\t\t],\r\n\t});\r\n\titemFilter.selectSortBy.value = 'number';\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "init",
                        "type": "Partial<CardGroup>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 113,
                "jsdoctags": [
                    {
                        "name": "init",
                        "type": "Partial<CardGroup>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "cards",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Card[]",
                    "optional": false,
                    "description": "",
                    "line": 112
                },
                {
                    "name": "count",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 113
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Icons",
                    "optional": false,
                    "description": "",
                    "line": 111
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 110
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "CardLastPrices",
            "id": "class-CardLastPrices-f5f2f36ddb9717c858a28de3fe93b1f4ca862a989ae6c9b55079d748e35e740031824a503766846e132d58bc5700fbcc7938cfb92cb36ce08da9860edd9e05df",
            "file": "src/app/pages/cards/card/card.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { CardCollectionItem } from './../../../components/card-collection/card-collection-item/card-collection-item';\r\nimport { Select, SelectOption, SelectOptionGroup } from '@app/controls';\r\nimport { Menu } from '@app/controls/menu';\r\nimport '@app/helpers/string.extensions';\r\nimport { ItemsFilter } from '@app/layout';\r\nimport { Icons } from '@app/models';\r\nimport { Expansion } from '@app/pages/expansions';\r\nimport { Pokemon } from '@app/pages/pokemons/pokemon/pokemon';\r\n\r\nexport const DEFAULT_IMAGE = '/assets/back.jpg';\r\n\r\nexport class Weakness {\r\n\ttype: string;\r\n\tvalue: string;\r\n}\r\n\r\nexport class Attack {\r\n\tcost: string[] = [];\r\n\tname: string;\r\n\ttext: string;\r\n\tdamage: number;\r\n\tconvertedEnergyCost: number;\r\n}\r\n\r\nexport class Card {\r\n\tid: number;\r\n\tname: string;\r\n\tslug: string;\r\n\tpokemon: Pokemon;\r\n\texpansion: Expansion;\r\n\tnumber: string;\r\n\trarity: string;\r\n\timage: string;\r\n\timage_high_res?: string;\r\n\tsuper_type: string;\r\n\tsub_type?: string;\r\n\thp?: number;\r\n\tretreat_cost: string[] = [];\r\n\tweaknesses: Weakness[] = [];\r\n\tattacks: Attack[] = [];\r\n\tartist: string;\r\n\tis_shiny: boolean;\r\n\tis_promo: boolean;\r\n\tis_full_art: boolean;\r\n\tis_gold: boolean;\r\n\thas_first_edition: boolean;\r\n\thas_shadowless: boolean;\r\n\thas_reverse_holo: boolean;\r\n\ttypes: string[] = [];\r\n\tlast_prices: CardLastPrices;\r\n\tuser_cards: CardCollectionItem[] = [];\r\n\r\n\troute: string;\r\n\ttempId: number;\r\n\r\n\tgetCardNumber(): string {\r\n\t\t// IS number\r\n\t\tif (!isNaN(+this.number)) {\r\n\t\t\tlet x = `${this.number}`;\r\n\t\t\tlet y = `${this.expansion.total_cards}`;\r\n\t\t\tlet pad = '000';\r\n\t\t\tlet xFormatted = pad.substring(0, pad.length - x.length) + x;\r\n\t\t\tlet yFormatted = pad.substring(0, pad.length - y.length) + y;\r\n\t\t\treturn `${xFormatted}/${yFormatted}`;\r\n\t\t}\r\n\t\t// NOT number (promo)\r\n\t\telse {\r\n\t\t\treturn this.number;\r\n\t\t}\r\n\t}\r\n\r\n\tconstructor(init?: Partial<Card>) {\r\n\t\tObject.assign(this, init);\r\n\r\n\t\t// Route\r\n\t\tthis.route = '/cards/' + this.slug;\r\n\r\n\t\t// Initalize expansion\r\n\t\tif (init.expansion) {\r\n\t\t\tthis.expansion = new Expansion(init.expansion);\r\n\t\t}\r\n\r\n\t\t// Initalize pokemon\r\n\t\tif (init.pokemon) {\r\n\t\t\tthis.pokemon = new Pokemon(init.pokemon);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport class CardLastPrices {\r\n\tcard_id: number;\r\n\tcondition: string;\r\n\tcreated_at: Date;\r\n\tdirect_price: string;\r\n\thigh_price: number;\r\n\tid: number;\r\n\tlow_price: number;\r\n\tmarket_price: number;\r\n\tmid_price: number;\r\n\tsource: string;\r\n\tupdated_at: Date;\r\n\tvariation: string;\r\n\r\n\tconstructor(init?: Partial<CardLastPrices>) {\r\n\t\tObject.assign(this, init);\r\n\t}\r\n}\r\n\r\nexport class CardGroup {\r\n\ttitle: string;\r\n\ticon: Icons;\r\n\tcards: Card[] = [];\r\n\tcount: number = 0;\r\n\tconstructor(init?: Partial<CardGroup>) {\r\n\t\tObject.assign(this, init);\r\n\t}\r\n}\r\n\r\nexport class CardCount {\r\n\tget count(): number {\r\n\t\treturn this.cards.length;\r\n\t}\r\n\tcards: Card[] = [];\r\n\tconstructor(init?: Partial<CardCount>) {\r\n\t\tObject.assign(this, init);\r\n\t}\r\n}\r\n\r\nexport function SetSortByCards(itemFilter: ItemsFilter) {\r\n\titemFilter.selectSortBy.optionGroups[0] = new SelectOptionGroup({\r\n\t\tlabel: 'Sort By',\r\n\t\toptions: [\r\n\t\t\tnew SelectOption({\r\n\t\t\t\ttext: 'Number',\r\n\t\t\t\tvalue: 'number',\r\n\t\t\t}),\r\n\t\t\tnew SelectOption({\r\n\t\t\t\ttext: 'Name',\r\n\t\t\t\tvalue: 'name',\r\n\t\t\t}),\r\n\t\t\t// new SelectOption({\r\n\t\t\t// \ttext: 'Price',\r\n\t\t\t// \tvalue: 'price',\r\n\t\t\t// }),\r\n\t\t\tnew SelectOption({\r\n\t\t\t\ttext: 'Release Date',\r\n\t\t\t\tvalue: 'release_date',\r\n\t\t\t}),\r\n\t\t\t// new SelectOption({\r\n\t\t\t// \ttext: 'Rarity',\r\n\t\t\t// \tvalue: 'rarity',\r\n\t\t\t// }),\r\n\t\t],\r\n\t});\r\n\titemFilter.selectSortBy.value = 'number';\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "init",
                        "type": "Partial<CardLastPrices>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 102,
                "jsdoctags": [
                    {
                        "name": "init",
                        "type": "Partial<CardLastPrices>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "card_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 91
                },
                {
                    "name": "condition",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 92
                },
                {
                    "name": "created_at",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 93
                },
                {
                    "name": "direct_price",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 94
                },
                {
                    "name": "high_price",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 95
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 96
                },
                {
                    "name": "low_price",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 97
                },
                {
                    "name": "market_price",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 98
                },
                {
                    "name": "mid_price",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 99
                },
                {
                    "name": "source",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 100
                },
                {
                    "name": "updated_at",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 101
                },
                {
                    "name": "variation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 102
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Cards",
            "id": "class-Cards-d51fa1f113ba035837439ad8b9e2fb5ba192439645296de38b9e0a7f296528d0fcc81be3a433030e2a175ffc0da9148b44e3b4ecd7b532ae45f2c04ed731363f",
            "file": "src/app/pages/cards/cards.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Items } from '@app/layout/main/items/items';\r\n\r\nexport class Cards {\r\n\titems: Items = new Items();\r\n\r\n\thidePaging: boolean = false;\r\n\ttotalCards: number;\r\n\tart: boolean;\r\n\tisDefault: boolean = false;\r\n\tgetCardsOnInit: boolean = true;\r\n\r\n    constructor(init?:Partial<Cards>) {\r\n\t\tObject.assign(this, init);\r\n\t}\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "init",
                        "type": "Partial<Cards>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "init",
                        "type": "Partial<Cards>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "art",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "getCardsOnInit",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "hidePaging",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "isDefault",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "items",
                    "defaultValue": "new Items()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Items",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "totalCards",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Checkbox",
            "id": "class-Checkbox-aecfb15e9cf268dfe986df92c290da69c971f0513cf383b64116149d86d7a160095a9b0a74507d03ff61a0609cb9d5a5fd1e747f86a62436b87310faac79a3cb",
            "file": "src/app/controls/checkbox/checkbox.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Size } from '@app/models/size';\r\n\r\nexport class Checkbox {\r\n\tid?: string;\r\n\ttext?: string;\r\n\tsize: Size = Size.medium;\r\n\tdisabled: boolean = false;\r\n\tchecked: boolean = false;\r\n\r\n    public constructor(init?:Partial<Checkbox>) {\r\n        Object.assign(this, init);\r\n    }\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "init",
                        "type": "Partial<Checkbox>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 8,
                "modifierKind": [
                    123
                ],
                "jsdoctags": [
                    {
                        "name": "init",
                        "type": "Partial<Checkbox>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "checked",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "size",
                    "defaultValue": "Size.medium",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Size",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Collection",
            "id": "class-Collection-6b176b2e976072d11367d6d165b29ed5ba1abd7cd2f639b12cf48920f48a8aa5f62d04ba0bd431d4bb012a66fd5cdaebf28686a3a220b6443bc1cb578fc56d56",
            "file": "src/app/pages/collection/collection.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class Collection {}\r\n",
            "properties": [],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Dialog",
            "id": "class-Dialog-abb0b06dbecae867bccc881c32cf92398e6723cddf1a0185b520583c18d2ba80a3b18460f79b7265d71f003201ea110b6d0463993ac00d45d2e94620e5148503",
            "file": "src/app/controls/dialog/dialog.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { MBForm } from './../form/form';\r\nimport { Button } from '../button';\r\n\r\nexport class Dialog {\r\n\ttitle: string;\r\n\tbuttons: Button[] = [];\r\n\tcomponent: any;\r\n\tcontent: string;\r\n\tactive: boolean;\r\n\tform: MBForm;\r\n\tautoOpen: boolean = true;\r\n\tclose = () => {\r\n\t\tthis.active = false;\r\n\t\tif (this.onClose) this.onClose();\r\n\t};\r\n\topen = () => {\r\n\t\tthis.active = true;\r\n\t};\r\n\r\n\tonOpen: () => void;\r\n\tonClose: () => void;\r\n\r\n\tpublic constructor(init?: Partial<Dialog>) {\r\n\t\tObject.assign(this, init);\r\n\t\tif (this.autoOpen) this.open();\r\n\t}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "init",
                        "type": "Partial<Dialog>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 21,
                "modifierKind": [
                    123
                ],
                "jsdoctags": [
                    {
                        "name": "init",
                        "type": "Partial<Dialog>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "active",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "autoOpen",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "buttons",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Button[]",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "close",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "component",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MBForm",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "onClose",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "onOpen",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "open",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Editor",
            "id": "class-Editor-f0ee6b7ce9f1b5db05dbd7e1c82f5349fb41a4f2bbe2a9193e09e6ee1e24d3b290f72f1babd62e441fe5852db22e93a4e8cd528d0ef219480df747a554f3ea93",
            "file": "src/app/controls/editor/editor.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class Editor {\r\n\tlabel: string;\r\n\tvalue: string = \"\";\r\n\r\n    constructor(init?:Partial<Editor>) {\r\n\t\tObject.assign(this, init);\r\n\t}\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "init",
                        "type": "Partial<Editor>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 3,
                "jsdoctags": [
                    {
                        "name": "init",
                        "type": "Partial<Editor>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "value",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Empty",
            "id": "class-Empty-d13a502af512af83a5c838c0739be3a3b9f5024df55a46353ddd3c5602665823d9850edf2259dea67004e17cb60d873ae2a3853b501b99f5ee70d43dc5659c83",
            "file": "src/app/controls/empty/empty.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Icons } from \"@app/models\";\r\nimport { Button } from \"../button\";\r\n\r\nexport class Empty {\r\n\ttext: string;\r\n\ticon: string;\r\n\timage: string;\r\n\tbutton: Button;\r\n\r\n    constructor(init?:Partial<Empty>) {\r\n\t\tObject.assign(this, init);\r\n\t}\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "init",
                        "type": "Partial<Empty>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "init",
                        "type": "Partial<Empty>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "button",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Button",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "image",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "EvolutionChain",
            "id": "class-EvolutionChain-aba163b1d543eed83d8b961e3d81d2db91ab66b82733b3b71e51a6c92790580202fe98ab88610447e8a4c09cd23d1200284462978bc11b9488bdeefb1e3d1f89",
            "file": "src/app/pages/pokemons/pokemon/pokemon.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Select, SelectOption, SelectOptionGroup } from '@app/controls';\r\n\r\nexport class EvolutionChain {\r\n\tid: number;\r\n\tname: string;\r\n\tnational_dex_number: number;\r\n\tsprite: string;\r\n}\r\n\r\nexport class PokemonGeneration {\r\n\tid: number;\r\n\tname: string;\r\n\tregion: string;\r\n\tconstructor(init?: Partial<PokemonGeneration>) {\r\n\t\tObject.assign(this, init);\r\n\t}\r\n}\r\n\r\nexport class Pokemon {\r\n\tid: number;\r\n\tname: string;\r\n\tgeneration: PokemonGeneration;\r\n\tnational_dex_number: number;\r\n\torder: number;\r\n\tis_baby: boolean;\r\n\tis_legendary: boolean;\r\n\tis_mythical: boolean;\r\n\tcolor: string;\r\n\tshape: string;\r\n\tflavor_texts: string;\r\n\tevolves_from_pokemon: number;\r\n\timage: string;\r\n\tslug: string;\r\n\tvariants: PokemonVariant[] = [];\r\n\tvariant: PokemonVariant;\r\n\tsprites: PokemonSprites;\r\n\ttypes: string[] = [];\r\n\theight: number;\r\n\tweight: number;\r\n\tevolution_chain: EvolutionChain[] = [];\r\n\r\n\troute: string;\r\n\r\n\tconstructor(init?: Partial<Pokemon>) {\r\n\t\tObject.assign(this, init);\r\n\r\n\t\t// Route\r\n\t\tthis.route = `/pokemon/${this.slug}`;\r\n\r\n\t\t// Initalize variants\r\n\t\tif (init.variants) {\r\n\t\t\tthis.variants = [];\r\n\t\t\tinit.variants.forEach((variant) => {\r\n\t\t\t\tthis.variants.push(new PokemonVariant(variant));\r\n\t\t\t});\r\n\t\t}\r\n\t\tif (init.variant) {\r\n\t\t\tthis.variant = new PokemonVariant(this.variant);\r\n\t\t\tthis.variant.pokemon = this;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport class PokemonVariant {\r\n\tprogress: number = 80;\r\n\ttotal_cards: number = 100;\r\n\tid: number;\r\n\tpokemon: Pokemon;\r\n\tname: string;\r\n\tslug: string;\r\n\tis_default: boolean;\r\n\tsprites: PokemonSprites;\r\n\theight: number;\r\n\tweight: number;\r\n\ttypes: string[] = [];\r\n\tprevious_pokemon: string;\r\n\tnext_pokemon: string;\r\n\tother_variants: PokemonVariant[] = [];\r\n\r\n\troute: string;\r\n\r\n\tconstructor(init?: Partial<PokemonVariant>) {\r\n\t\tObject.assign(this, init);\r\n\r\n\t\t// Route\r\n\t\tif (!this.slug && this.name)\r\n\t\t\tthis.slug = this.name.toLowerCase().replace(' ', '-');\r\n\t\tthis.route = `/pokemon/${this.slug}`;\r\n\r\n\t\t// Init sprites\r\n\t\tthis.sprites = new PokemonSprites(init.sprites);\r\n\r\n\t\tif (init.other_variants)\r\n\t\t\tthis.other_variants = init.other_variants.map(\r\n\t\t\t\t(variant) => new PokemonVariant(variant)\r\n\t\t\t);\r\n\t}\r\n}\r\n\r\nexport class PokemonSprites {\r\n\tdefault?: string;\r\n\tofficial?: string;\r\n\tshiny?: string;\r\n\ticon?: string;\r\n\r\n\tconstructor(init?: Partial<PokemonSprites>) {\r\n\t\tObject.assign(this, init);\r\n\t}\r\n}\r\n\r\nexport function SetSortByPokemon(select: Select) {\r\n\tselect.optionGroups[0] = new SelectOptionGroup({\r\n\t\tlabel: 'Sort By',\r\n\t\toptions: [\r\n\t\t\tnew SelectOption({\r\n\t\t\t\ttext: 'Number',\r\n\t\t\t\tvalue: 'pokemon.order',\r\n\t\t\t}),\r\n\t\t\tnew SelectOption({\r\n\t\t\t\ttext: 'Name',\r\n\t\t\t\tvalue: 'pokemon_variants.name',\r\n\t\t\t}),\r\n\t\t\tnew SelectOption({\r\n\t\t\t\ttext: 'Weight',\r\n\t\t\t\tvalue: 'pokemon_variants.weight',\r\n\t\t\t}),\r\n\t\t\tnew SelectOption({\r\n\t\t\t\ttext: 'Height',\r\n\t\t\t\tvalue: 'pokemon_variants.height',\r\n\t\t\t}),\r\n\t\t],\r\n\t});\r\n\tselect.value = 'pokemon.order';\r\n}\r\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "national_dex_number",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "sprite",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Expansion",
            "id": "class-Expansion-1e54cd66cc1376ffc63728eb970a6f5919a3d610c920329e229c3f998a617ae2b57eca67aac6b41836f88f9b528412b30e0278e735ac5c0d66624ce85df890e2",
            "file": "src/app/pages/expansions/expansion/expansion.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Select, SelectOption, SelectOptionGroup } from '@app/controls';\r\nimport { ItemsFilter, ItemsFooter } from '@app/layout/main';\r\nimport { Card } from '@app/pages/cards';\r\n\r\nexport class Expansion {\r\n\tid: number;\r\n\tname: string;\r\n\tcode: string;\r\n\tptcgo_code?: string;\r\n\tseries: Series;\r\n\tstandard_legal: boolean;\r\n\texpanded_legal: boolean;\r\n\ttotal_cards: number;\r\n\trelease_date: Date;\r\n\tsymbol: string;\r\n\tlogo: string;\r\n\tprogress: number = 17;\r\n\r\n\troute: string;\r\n\tcards: Card[] = [];\r\n\r\n\tconstructor(init?: Partial<Expansion>) {\r\n\t\tObject.assign(this, init);\r\n\r\n\t\t// Route\r\n\t\tthis.route = `/expansions/${this.code}`;\r\n\r\n\t\t// Initalize cards\r\n\t\tif (init.cards) {\r\n\t\t\tthis.cards = [];\r\n\t\t\tinit.cards.forEach((card) => {\r\n\t\t\t\tthis.cards.push(new Card(card));\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport class Series {\r\n\tid: number;\r\n\tname: string;\r\n\texpansions: Expansion[] = [];\r\n\r\n\tconstructor(init?: Partial<Series>) {\r\n\t\tObject.assign(this, init);\r\n\r\n\t\t// Initalize expanions\r\n\t\tif (init.expansions) {\r\n\t\t\tthis.expansions = [];\r\n\t\t\tinit.expansions.forEach((expansion) => {\r\n\t\t\t\tthis.expansions.push(new Expansion(expansion));\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport function SetSortByExpansions(itemFilter: ItemsFilter) {\r\n\titemFilter.selectSortBy.optionGroups[0] = new SelectOptionGroup({\r\n\t\tlabel: 'Sort By',\r\n\t\toptions: [\r\n\t\t\tnew SelectOption({\r\n\t\t\t\ttext: 'Release Date',\r\n\t\t\t\tvalue: 'expansion.release_date',\r\n\t\t\t}),\r\n\t\t],\r\n\t});\r\n\titemFilter.selectSortBy.value = 'expansion.release_date';\r\n}\r\n\r\nexport function SetSortByExpansion(itemFilter: ItemsFilter) {\r\n\titemFilter.selectSortBy.optionGroups[0] = new SelectOptionGroup({\r\n\t\tlabel: 'Sort By',\r\n\t\toptions: [\r\n\t\t\tnew SelectOption({\r\n\t\t\t\ttext: 'Number',\r\n\t\t\t\tvalue: 'number',\r\n\t\t\t}),\r\n\t\t\tnew SelectOption({\r\n\t\t\t\ttext: 'Name',\r\n\t\t\t\tvalue: 'name',\r\n\t\t\t}),\r\n\t\t],\r\n\t});\r\n\titemFilter.selectSortBy.value = 'number';\r\n}\r\n\r\nexport function SetPageSize(itemFooter: ItemsFooter) {\r\n\titemFooter.selectPageSize.value = itemFooter.pageSize.toString();\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "init",
                        "type": "Partial<Expansion>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "init",
                        "type": "Partial<Expansion>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "cards",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Card[]",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "code",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "expanded_legal",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "logo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "progress",
                    "defaultValue": "17",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "ptcgo_code",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "release_date",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "route",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "series",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Series",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "standard_legal",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "symbol",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "total_cards",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ExpansionFactory",
            "id": "class-ExpansionFactory-a9d4397c7bbd3289a35a713e7710af243a266bc6e9181f3a7522ea6b3b60a9a78b751c5eef6e7de679d4712e00c5c07fa64c865103f6e125443f7c3cd23481bc",
            "file": "src/app/services/factory/expansion.factory.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Expansion, Series } from \"../../pages/expansions/expansion/expansion\";\r\n\r\nexport class ExpansionFactory {\r\n\texpansions = [\r\n\t\t{\r\n\t\t\tname: \"Battle Styles\",\r\n\t\t\tlogo: \"https://pod.pokellector.com/logos/Battle-Styles.logo.305.png\",\r\n\t\t\trelease_date: new Date(),\r\n\t\t\tcode: \"battle-styles\"\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Vivid Voltage\",\r\n\t\t\tlogo: \"https://pod.pokellector.com/logos/Vivid-Voltage.logo.299.png\",\r\n\t\t\trelease_date: new Date(),\r\n\t\t\tcode: \"vivid-voltage\"\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Cosmic Eclipse\",\r\n\t\t\tlogo: \"https://pod.pokellector.com/logos/Cosmic-Eclipse.logo.280.png\",\r\n\t\t\trelease_date: new Date(),\r\n\t\t\tcode: \"cosmic-eclipse\"\r\n\t\t}\r\n\t]\r\n\tcreateExpasion() {\r\n\t\treturn new Expansion(this.expansions[Math.floor(Math.random() * this.expansions.length)]);\r\n\t}\r\n}\r\n\r\nexport class SeriesFactory {\r\n\tseries = [\r\n\t\t{\r\n\t\t\tname: \"Sword & Shield\",\r\n\t\t\tid: 1\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Sun & Moon\",\r\n\t\t\tid: 2\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"XY\",\r\n\t\t\tid: 3\r\n\t\t}\r\n\t]\r\n\tcreateSeries(seriesCount: number = 1, expansionCount: number = 0): Series[] {\r\n\t\tvar series = [];\r\n\t\tArray.from(Array(seriesCount)).forEach(() => {\r\n\t\t\tvar randomSeries = new Series(this.series[Math.floor(Math.random() * this.series.length)]);\r\n\t\t\tif (expansionCount > 0) {\r\n\t\t\t\tvar factory = new ExpansionFactory();\r\n\t\t\t\tArray.from(Array(expansionCount)).forEach(() => {\r\n\t\t\t\t\trandomSeries.expansions.push(factory.createExpasion());\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\tseries.push(randomSeries);\r\n\t\t});\r\n\t\treturn series;\r\n\t}\r\n}",
            "properties": [
                {
                    "name": "expansions",
                    "defaultValue": "[\r\n\t\t{\r\n\t\t\tname: \"Battle Styles\",\r\n\t\t\tlogo: \"https://pod.pokellector.com/logos/Battle-Styles.logo.305.png\",\r\n\t\t\trelease_date: new Date(),\r\n\t\t\tcode: \"battle-styles\"\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Vivid Voltage\",\r\n\t\t\tlogo: \"https://pod.pokellector.com/logos/Vivid-Voltage.logo.299.png\",\r\n\t\t\trelease_date: new Date(),\r\n\t\t\tcode: \"vivid-voltage\"\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Cosmic Eclipse\",\r\n\t\t\tlogo: \"https://pod.pokellector.com/logos/Cosmic-Eclipse.logo.280.png\",\r\n\t\t\trelease_date: new Date(),\r\n\t\t\tcode: \"cosmic-eclipse\"\r\n\t\t}\r\n\t]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "methods": [
                {
                    "name": "createExpasion",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Featured",
            "id": "class-Featured-965c682e6b7701271a0e5c704c41dd432bcde861448f375881ddc36bf4d73d852b02ca0b2399a3d2cef6064d0e78a10b78f5a07105b87f82a6b6d4a683132686",
            "file": "src/app/pages/home/featured.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { PokemonVariant } from './../pokemons/pokemon/pokemon';\r\nimport { Expansion } from './../expansions/expansion/expansion';\r\nimport { Card } from './../cards/card/card';\r\n\r\nexport class Featured {\r\n\tcards: Card[] = [];\r\n\texpansions: Expansion[] = [];\r\n\tpokemon: PokemonVariant[] = [];\r\n\r\n\tconstructor(init?: Partial<Featured>) {\r\n\t\tObject.assign(this, init);\r\n\t\tif (init.cards) this.cards = init.cards.map((card) => new Card(card));\r\n\t\tif (init.expansions)\r\n\t\t\tthis.expansions = init.expansions.map(\r\n\t\t\t\t(expansion) => new Expansion(expansion)\r\n\t\t\t);\r\n\t\tif (init.pokemon)\r\n\t\t\tthis.pokemon = init.pokemon.map(\r\n\t\t\t\t(pokemon) => new PokemonVariant(pokemon)\r\n\t\t\t);\r\n\t}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "init",
                        "type": "Partial<Featured>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "init",
                        "type": "Partial<Featured>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "cards",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Card[]",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "expansions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Expansion[]",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "pokemon",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PokemonVariant[]",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "GetCards",
            "id": "class-GetCards-ee72209a045692f73d3c36cf2e639bb1399b03c38cda317df9f57023ed862d0ba7ed8b4f858b362679627885e3fe8eeb526cb13fe0c2fc7d5f075f2b443dea66",
            "file": "src/app/services/cards.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { APIGetPaged, APIResponse } from '@app/models';\r\nimport { Card } from '@app/pages/cards/card/card';\r\n\r\nexport class GetCards extends APIGetPaged {\r\n\tconstructor(init?: Partial<GetCards>) {\r\n\t\tsuper();\r\n\t\tObject.assign(this, init);\r\n\t}\r\n}\r\n\r\nexport class GetCardsFiltered extends APIGetPaged {\r\n\tconstructor(init?: Partial<GetCards>) {\r\n\t\tsuper();\r\n\t\tObject.assign(this, init);\r\n\t}\r\n}\r\n\r\nexport interface CardResults {\r\n\ttotal_value?: number;\r\n\ttotal_results: number;\r\n\ttotal_pages: number;\r\n\tcards?: Card[];\r\n}\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class CardsService {\r\n\tconstructor(private http: HttpClient) {}\r\n\r\n\t// Get cards\r\n\tprivate getCardsSubject = new BehaviorSubject<CardResults>(null);\r\n\tgetCardsObservable() {\r\n\t\tthis.getCardsSubject = new BehaviorSubject<CardResults>(null);\r\n\t\treturn this.getCardsSubject.asObservable();\r\n\t}\r\n\tgetCards(params: GetCards) {\r\n\t\tvar url = params.buildUrl('cards');\r\n\t\tthis.http.get<APIResponse>(url).subscribe((res) => {\r\n\t\t\tlet cards = [];\r\n\t\t\tres.data.forEach((card) => {\r\n\t\t\t\tcards.push(new Card(card));\r\n\t\t\t});\r\n\t\t\tthis.getCardsSubject.next({\r\n\t\t\t\tcards: cards,\r\n\t\t\t\ttotal_pages: res.meta.last_page,\r\n\t\t\t\ttotal_results: res.meta.total,\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\r\n\t// Get cards filtered\r\n\tprivate getCardsFilteredSubject = new BehaviorSubject<CardResults>(null);\r\n\tgetCardsFilteredObservable() {\r\n\t\tthis.getCardsFilteredSubject = new BehaviorSubject<CardResults>(null);\r\n\t\treturn this.getCardsFilteredSubject.asObservable();\r\n\t}\r\n\tgetCardsFiltered(params: GetCardsFiltered) {\r\n\t\tvar url = params.buildUrl('cards/filter');\r\n\t\tthis.http.get<APIResponse>(url).subscribe((res) => {\r\n\t\t\tlet cards = [];\r\n\t\t\tres.data.forEach((card) => {\r\n\t\t\t\tcards.push(new Card(card));\r\n\t\t\t});\r\n\t\t\tthis.getCardsFilteredSubject.next({\r\n\t\t\t\tcards: cards,\r\n\t\t\t\ttotal_pages: res.meta.last_page,\r\n\t\t\t\ttotal_results: res.meta.total,\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "init",
                        "type": "Partial<GetCards>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "init",
                        "type": "Partial<GetCards>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "artist",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "inheritance": {
                        "file": "APIGetPaged"
                    }
                },
                {
                    "name": "buildUrl",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "inheritance": {
                        "file": "APIGetPaged"
                    }
                },
                {
                    "name": "page",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "inheritance": {
                        "file": "APIGetPaged"
                    }
                },
                {
                    "name": "page_size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "inheritance": {
                        "file": "APIGetPaged"
                    }
                },
                {
                    "name": "query",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "inheritance": {
                        "file": "APIGetPaged"
                    }
                },
                {
                    "name": "rarity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "inheritance": {
                        "file": "APIGetPaged"
                    }
                },
                {
                    "name": "slug",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "inheritance": {
                        "file": "APIGetPaged"
                    }
                },
                {
                    "name": "sort_by",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "inheritance": {
                        "file": "APIGetPaged"
                    }
                },
                {
                    "name": "sort_direction",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "inheritance": {
                        "file": "APIGetPaged"
                    }
                },
                {
                    "name": "subtype",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "inheritance": {
                        "file": "APIGetPaged"
                    }
                },
                {
                    "name": "supertype",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "inheritance": {
                        "file": "APIGetPaged"
                    }
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "inheritance": {
                        "file": "APIGetPaged"
                    }
                },
                {
                    "name": "url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "inheritance": {
                        "file": "APIGetPaged"
                    }
                },
                {
                    "name": "user_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "inheritance": {
                        "file": "APIGetPaged"
                    }
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": "APIGetPaged",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "GetCardsFiltered",
            "id": "class-GetCardsFiltered-ee72209a045692f73d3c36cf2e639bb1399b03c38cda317df9f57023ed862d0ba7ed8b4f858b362679627885e3fe8eeb526cb13fe0c2fc7d5f075f2b443dea66",
            "file": "src/app/services/cards.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { APIGetPaged, APIResponse } from '@app/models';\r\nimport { Card } from '@app/pages/cards/card/card';\r\n\r\nexport class GetCards extends APIGetPaged {\r\n\tconstructor(init?: Partial<GetCards>) {\r\n\t\tsuper();\r\n\t\tObject.assign(this, init);\r\n\t}\r\n}\r\n\r\nexport class GetCardsFiltered extends APIGetPaged {\r\n\tconstructor(init?: Partial<GetCards>) {\r\n\t\tsuper();\r\n\t\tObject.assign(this, init);\r\n\t}\r\n}\r\n\r\nexport interface CardResults {\r\n\ttotal_value?: number;\r\n\ttotal_results: number;\r\n\ttotal_pages: number;\r\n\tcards?: Card[];\r\n}\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class CardsService {\r\n\tconstructor(private http: HttpClient) {}\r\n\r\n\t// Get cards\r\n\tprivate getCardsSubject = new BehaviorSubject<CardResults>(null);\r\n\tgetCardsObservable() {\r\n\t\tthis.getCardsSubject = new BehaviorSubject<CardResults>(null);\r\n\t\treturn this.getCardsSubject.asObservable();\r\n\t}\r\n\tgetCards(params: GetCards) {\r\n\t\tvar url = params.buildUrl('cards');\r\n\t\tthis.http.get<APIResponse>(url).subscribe((res) => {\r\n\t\t\tlet cards = [];\r\n\t\t\tres.data.forEach((card) => {\r\n\t\t\t\tcards.push(new Card(card));\r\n\t\t\t});\r\n\t\t\tthis.getCardsSubject.next({\r\n\t\t\t\tcards: cards,\r\n\t\t\t\ttotal_pages: res.meta.last_page,\r\n\t\t\t\ttotal_results: res.meta.total,\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\r\n\t// Get cards filtered\r\n\tprivate getCardsFilteredSubject = new BehaviorSubject<CardResults>(null);\r\n\tgetCardsFilteredObservable() {\r\n\t\tthis.getCardsFilteredSubject = new BehaviorSubject<CardResults>(null);\r\n\t\treturn this.getCardsFilteredSubject.asObservable();\r\n\t}\r\n\tgetCardsFiltered(params: GetCardsFiltered) {\r\n\t\tvar url = params.buildUrl('cards/filter');\r\n\t\tthis.http.get<APIResponse>(url).subscribe((res) => {\r\n\t\t\tlet cards = [];\r\n\t\t\tres.data.forEach((card) => {\r\n\t\t\t\tcards.push(new Card(card));\r\n\t\t\t});\r\n\t\t\tthis.getCardsFilteredSubject.next({\r\n\t\t\t\tcards: cards,\r\n\t\t\t\ttotal_pages: res.meta.last_page,\r\n\t\t\t\ttotal_results: res.meta.total,\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "init",
                        "type": "Partial<GetCards>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "init",
                        "type": "Partial<GetCards>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "artist",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "inheritance": {
                        "file": "APIGetPaged"
                    }
                },
                {
                    "name": "buildUrl",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "inheritance": {
                        "file": "APIGetPaged"
                    }
                },
                {
                    "name": "page",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "inheritance": {
                        "file": "APIGetPaged"
                    }
                },
                {
                    "name": "page_size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "inheritance": {
                        "file": "APIGetPaged"
                    }
                },
                {
                    "name": "query",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "inheritance": {
                        "file": "APIGetPaged"
                    }
                },
                {
                    "name": "rarity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "inheritance": {
                        "file": "APIGetPaged"
                    }
                },
                {
                    "name": "slug",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "inheritance": {
                        "file": "APIGetPaged"
                    }
                },
                {
                    "name": "sort_by",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "inheritance": {
                        "file": "APIGetPaged"
                    }
                },
                {
                    "name": "sort_direction",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "inheritance": {
                        "file": "APIGetPaged"
                    }
                },
                {
                    "name": "subtype",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "inheritance": {
                        "file": "APIGetPaged"
                    }
                },
                {
                    "name": "supertype",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "inheritance": {
                        "file": "APIGetPaged"
                    }
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "inheritance": {
                        "file": "APIGetPaged"
                    }
                },
                {
                    "name": "url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "inheritance": {
                        "file": "APIGetPaged"
                    }
                },
                {
                    "name": "user_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "inheritance": {
                        "file": "APIGetPaged"
                    }
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": "APIGetPaged",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "GetExpansion",
            "id": "class-GetExpansion-23ab2b7756a62f2b460ae3082cf43668a520b6a72be509726a2bc15361dabb766813282e211e7dc697f90a11f5982bbf5895502a4f950526695241029f7fe998",
            "file": "src/app/services/expansion.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { HttpClient } from \"@angular/common/http\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { APIGetPaged, APIResponse } from \"@app/models\";\r\nimport { Card, Expansion } from \"@app/pages\";\r\nimport { BehaviorSubject } from \"rxjs\";\r\nimport { CacheGlobal } from \"./cache/globalCache\";\r\nimport { CardResults } from \"./cards.service\";\r\n\r\nexport class GetExpansion extends APIGetPaged {\r\n\tcode: string;\r\n\tconstructor(init?:Partial<GetExpansion>) {\r\n\t\tsuper();\r\n\t\tObject.assign(this, init);\r\n\t}\r\n}\r\n\r\nexport class GetExpansionCards extends APIGetPaged {\r\n\tcode: string;\r\n\tconstructor(init?:Partial<GetExpansion>) {\r\n\t\tsuper();\r\n\t\tObject.assign(this, init);\r\n\t}\r\n}\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\n\r\nexport class ExpansionService {\r\n\r\n\tconstructor(\r\n\t\tprivate http: HttpClient) {}\r\n\r\n\t// Get expansion\r\n    private getExpansionSubject = new BehaviorSubject<Expansion>(null);\r\n\tgetExpansionObservable() {\r\n\t\tthis.getExpansionSubject = new BehaviorSubject<Expansion>(null);\r\n\t\treturn this.getExpansionSubject.asObservable()\r\n\t}\r\n\tgetExpansion(params: GetExpansion) {\r\n\t\tif (CacheGlobal.expansion[params.code]) {\r\n\t\t\tthis.getExpansionSubject.next(CacheGlobal.expansion[params.code]);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tvar url = params.buildUrl(\"expansion/\" + params.code);\r\n\t\t\tthis.http.get<APIResponse>(url).subscribe(res => {\r\n\t\t\t\tvar expansion = new Expansion(res.data);\r\n\t\t\t\tthis.getExpansionSubject.next(expansion);\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t// Expansions cards\r\n    private getExpansionCardsSubject = new BehaviorSubject<CardResults>(null);\r\n    getExpansionCardsObservable() {\r\n\t\tthis.getExpansionCardsSubject = new BehaviorSubject<CardResults>(null);\r\n\t\treturn this.getExpansionCardsSubject.asObservable()\r\n\t}\r\n    getExpansionCards(params: GetExpansionCards) {\r\n\t\tvar url = params.buildUrl(\"expansion/\" + params.code + \"/cards\");\r\n        this.http.get<APIResponse>(url).subscribe(res => {\r\n\t\t\tlet cards: Card[] = [];\r\n\t\t\tres.data.forEach(card => {\r\n\t\t\t\tcards.push(new Card(card));\r\n\t\t\t});\r\n\t\t\tthis.getExpansionCardsSubject.next({\r\n\t\t\t\tcards: cards,\r\n\t\t\t\ttotal_pages: res.meta.last_page,\r\n\t\t\t\ttotal_results: res.meta.total\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "init",
                        "type": "Partial<GetExpansion>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "init",
                        "type": "Partial<GetExpansion>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "code",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "artist",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "inheritance": {
                        "file": "APIGetPaged"
                    }
                },
                {
                    "name": "buildUrl",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "inheritance": {
                        "file": "APIGetPaged"
                    }
                },
                {
                    "name": "page",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "inheritance": {
                        "file": "APIGetPaged"
                    }
                },
                {
                    "name": "page_size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "inheritance": {
                        "file": "APIGetPaged"
                    }
                },
                {
                    "name": "query",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "inheritance": {
                        "file": "APIGetPaged"
                    }
                },
                {
                    "name": "rarity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "inheritance": {
                        "file": "APIGetPaged"
                    }
                },
                {
                    "name": "slug",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "inheritance": {
                        "file": "APIGetPaged"
                    }
                },
                {
                    "name": "sort_by",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "inheritance": {
                        "file": "APIGetPaged"
                    }
                },
                {
                    "name": "sort_direction",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "inheritance": {
                        "file": "APIGetPaged"
                    }
                },
                {
                    "name": "subtype",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "inheritance": {
                        "file": "APIGetPaged"
                    }
                },
                {
                    "name": "supertype",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "inheritance": {
                        "file": "APIGetPaged"
                    }
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "inheritance": {
                        "file": "APIGetPaged"
                    }
                },
                {
                    "name": "url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "inheritance": {
                        "file": "APIGetPaged"
                    }
                },
                {
                    "name": "user_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "inheritance": {
                        "file": "APIGetPaged"
                    }
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": "APIGetPaged",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "GetExpansionCards",
            "id": "class-GetExpansionCards-23ab2b7756a62f2b460ae3082cf43668a520b6a72be509726a2bc15361dabb766813282e211e7dc697f90a11f5982bbf5895502a4f950526695241029f7fe998",
            "file": "src/app/services/expansion.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { HttpClient } from \"@angular/common/http\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { APIGetPaged, APIResponse } from \"@app/models\";\r\nimport { Card, Expansion } from \"@app/pages\";\r\nimport { BehaviorSubject } from \"rxjs\";\r\nimport { CacheGlobal } from \"./cache/globalCache\";\r\nimport { CardResults } from \"./cards.service\";\r\n\r\nexport class GetExpansion extends APIGetPaged {\r\n\tcode: string;\r\n\tconstructor(init?:Partial<GetExpansion>) {\r\n\t\tsuper();\r\n\t\tObject.assign(this, init);\r\n\t}\r\n}\r\n\r\nexport class GetExpansionCards extends APIGetPaged {\r\n\tcode: string;\r\n\tconstructor(init?:Partial<GetExpansion>) {\r\n\t\tsuper();\r\n\t\tObject.assign(this, init);\r\n\t}\r\n}\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\n\r\nexport class ExpansionService {\r\n\r\n\tconstructor(\r\n\t\tprivate http: HttpClient) {}\r\n\r\n\t// Get expansion\r\n    private getExpansionSubject = new BehaviorSubject<Expansion>(null);\r\n\tgetExpansionObservable() {\r\n\t\tthis.getExpansionSubject = new BehaviorSubject<Expansion>(null);\r\n\t\treturn this.getExpansionSubject.asObservable()\r\n\t}\r\n\tgetExpansion(params: GetExpansion) {\r\n\t\tif (CacheGlobal.expansion[params.code]) {\r\n\t\t\tthis.getExpansionSubject.next(CacheGlobal.expansion[params.code]);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tvar url = params.buildUrl(\"expansion/\" + params.code);\r\n\t\t\tthis.http.get<APIResponse>(url).subscribe(res => {\r\n\t\t\t\tvar expansion = new Expansion(res.data);\r\n\t\t\t\tthis.getExpansionSubject.next(expansion);\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t// Expansions cards\r\n    private getExpansionCardsSubject = new BehaviorSubject<CardResults>(null);\r\n    getExpansionCardsObservable() {\r\n\t\tthis.getExpansionCardsSubject = new BehaviorSubject<CardResults>(null);\r\n\t\treturn this.getExpansionCardsSubject.asObservable()\r\n\t}\r\n    getExpansionCards(params: GetExpansionCards) {\r\n\t\tvar url = params.buildUrl(\"expansion/\" + params.code + \"/cards\");\r\n        this.http.get<APIResponse>(url).subscribe(res => {\r\n\t\t\tlet cards: Card[] = [];\r\n\t\t\tres.data.forEach(card => {\r\n\t\t\t\tcards.push(new Card(card));\r\n\t\t\t});\r\n\t\t\tthis.getExpansionCardsSubject.next({\r\n\t\t\t\tcards: cards,\r\n\t\t\t\ttotal_pages: res.meta.last_page,\r\n\t\t\t\ttotal_results: res.meta.total\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "init",
                        "type": "Partial<GetExpansion>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "init",
                        "type": "Partial<GetExpansion>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "code",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "artist",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "inheritance": {
                        "file": "APIGetPaged"
                    }
                },
                {
                    "name": "buildUrl",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "inheritance": {
                        "file": "APIGetPaged"
                    }
                },
                {
                    "name": "page",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "inheritance": {
                        "file": "APIGetPaged"
                    }
                },
                {
                    "name": "page_size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "inheritance": {
                        "file": "APIGetPaged"
                    }
                },
                {
                    "name": "query",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "inheritance": {
                        "file": "APIGetPaged"
                    }
                },
                {
                    "name": "rarity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "inheritance": {
                        "file": "APIGetPaged"
                    }
                },
                {
                    "name": "slug",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "inheritance": {
                        "file": "APIGetPaged"
                    }
                },
                {
                    "name": "sort_by",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "inheritance": {
                        "file": "APIGetPaged"
                    }
                },
                {
                    "name": "sort_direction",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "inheritance": {
                        "file": "APIGetPaged"
                    }
                },
                {
                    "name": "subtype",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "inheritance": {
                        "file": "APIGetPaged"
                    }
                },
                {
                    "name": "supertype",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "inheritance": {
                        "file": "APIGetPaged"
                    }
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "inheritance": {
                        "file": "APIGetPaged"
                    }
                },
                {
                    "name": "url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "inheritance": {
                        "file": "APIGetPaged"
                    }
                },
                {
                    "name": "user_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "inheritance": {
                        "file": "APIGetPaged"
                    }
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": "APIGetPaged",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "GetPokemons",
            "id": "class-GetPokemons-9802f6f2c1c85b93461515b33227824634eae6d693b813561ee265ca08ea2f9d75bdb7798e57162fa645b38371dcb7af129025dd92ee1762c5c75b71d7e0b0d0",
            "file": "src/app/services/pokemons.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { APIGetPaged, APIResponse } from '@app/models';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { environment } from 'src/environments/environment';\r\nimport { Pokemon, PokemonVariant } from '../pages/pokemons/pokemon/pokemon';\r\n\r\nexport class GetPokemons extends APIGetPaged {\r\n\tconstructor(init?: Partial<GetPokemons>) {\r\n\t\tsuper();\r\n\t\tObject.assign(this, init);\r\n\t}\r\n}\r\n\r\nexport interface ResPokemons {\r\n\ttotal_results: number;\r\n\ttotal_pages: number;\r\n\tpokemons?: Pokemon[];\r\n}\r\n\r\nexport class GetPokemonVariants extends APIGetPaged {\r\n\ttype: string;\r\n\tconstructor(init?: Partial<GetPokemonVariants>) {\r\n\t\tsuper();\r\n\t\tObject.assign(this, init);\r\n\t}\r\n}\r\n\r\nexport interface ResPokemonVariants {\r\n\ttotal_results: number;\r\n\ttotal_pages: number;\r\n\tpokemon_variants?: PokemonVariant[];\r\n}\r\n\r\n@Injectable({\r\n\tprovidedIn: 'root',\r\n})\r\nexport class PokemonsService {\r\n\tconstructor(private http: HttpClient) {}\r\n\r\n\t// Get all pokemons\r\n\tprivate getPokemonsSubject = new BehaviorSubject<ResPokemons>(null);\r\n\tgetPokemonsObservable() {\r\n\t\tthis.getPokemonsSubject = new BehaviorSubject<ResPokemons>(null);\r\n\t\treturn this.getPokemonsSubject.asObservable();\r\n\t}\r\n\tgetPokemons(params: GetPokemons) {\r\n\t\tvar url = params.buildUrl('pokemon');\r\n\t\tthis.http.get<APIResponse>(url).subscribe((res) => {\r\n\t\t\tlet pokemons: Pokemon[] = [];\r\n\t\t\tres.data.forEach((pokemon) => {\r\n\t\t\t\tpokemons.push(new Pokemon(pokemon));\r\n\t\t\t});\r\n\t\t\tthis.getPokemonsSubject.next({\r\n\t\t\t\ttotal_pages: res.meta.last_page,\r\n\t\t\t\ttotal_results: res.meta.total,\r\n\t\t\t\tpokemons: pokemons,\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\r\n\t// Get all pokemons\r\n\tprivate getPokemonVariantsSubject = new BehaviorSubject<ResPokemonVariants>(\r\n\t\tnull\r\n\t);\r\n\tgetPokemonVariantsObservable() {\r\n\t\tthis.getPokemonVariantsSubject =\r\n\t\t\tnew BehaviorSubject<ResPokemonVariants>(null);\r\n\t\treturn this.getPokemonVariantsSubject.asObservable();\r\n\t}\r\n\tgetPokemonVariants(params: GetPokemonVariants) {\r\n\t\tvar url = params.buildUrl('pokemon-variants');\r\n\t\tthis.http.get<APIResponse>(url).subscribe((res) => {\r\n\t\t\tlet pokemon_variants: PokemonVariant[] = [];\r\n\t\t\tres.data.forEach((pokemon_variant) => {\r\n\t\t\t\tpokemon_variants.push(new PokemonVariant(pokemon_variant));\r\n\t\t\t});\r\n\t\t\tthis.getPokemonVariantsSubject.next({\r\n\t\t\t\ttotal_pages: res.meta.last_page,\r\n\t\t\t\ttotal_results: res.meta.total,\r\n\t\t\t\tpokemon_variants: pokemon_variants,\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "init",
                        "type": "Partial<GetPokemons>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "init",
                        "type": "Partial<GetPokemons>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "artist",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "inheritance": {
                        "file": "APIGetPaged"
                    }
                },
                {
                    "name": "buildUrl",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "inheritance": {
                        "file": "APIGetPaged"
                    }
                },
                {
                    "name": "page",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "inheritance": {
                        "file": "APIGetPaged"
                    }
                },
                {
                    "name": "page_size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "inheritance": {
                        "file": "APIGetPaged"
                    }
                },
                {
                    "name": "query",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "inheritance": {
                        "file": "APIGetPaged"
                    }
                },
                {
                    "name": "rarity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "inheritance": {
                        "file": "APIGetPaged"
                    }
                },
                {
                    "name": "slug",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "inheritance": {
                        "file": "APIGetPaged"
                    }
                },
                {
                    "name": "sort_by",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "inheritance": {
                        "file": "APIGetPaged"
                    }
                },
                {
                    "name": "sort_direction",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "inheritance": {
                        "file": "APIGetPaged"
                    }
                },
                {
                    "name": "subtype",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "inheritance": {
                        "file": "APIGetPaged"
                    }
                },
                {
                    "name": "supertype",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "inheritance": {
                        "file": "APIGetPaged"
                    }
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "inheritance": {
                        "file": "APIGetPaged"
                    }
                },
                {
                    "name": "url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "inheritance": {
                        "file": "APIGetPaged"
                    }
                },
                {
                    "name": "user_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "inheritance": {
                        "file": "APIGetPaged"
                    }
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": "APIGetPaged",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "GetPokemonVariantCards",
            "id": "class-GetPokemonVariantCards-2f51944a47bbaa83050d3811faadd877c6a331b7a3c22d63fea5b816f4ce30a6d3b49dce31f1c230d3f05f676f6d10f8297e81ce452438d9b48a234cbf0cfb41",
            "file": "src/app/services/pokemon.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { HttpClient } from \"@angular/common/http\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { APIGetPaged, APIResponse } from \"@app/models\";\r\nimport { Card } from \"@app/pages/cards\";\r\nimport { BehaviorSubject } from \"rxjs\";\r\nimport { environment } from \"src/environments/environment\";\r\nimport { Pokemon, PokemonVariant } from \"../pages/pokemons/pokemon/pokemon\";\r\nimport { CacheGlobal } from \"./cache/globalCache\";\r\n\r\n// Get pokemon interfaces\r\nexport class GetPokemonVariantCards extends APIGetPaged {\r\n\tslug: string;\r\n\tconstructor(init?:Partial<GetPokemonVariantCards>) {\r\n\t\tsuper();\r\n\t\tObject.assign(this, init);\r\n\t}\r\n}\r\nexport interface ResPokemonVariantCards {\r\n\ttotal_results: number;\r\n\ttotal_pages: number;\r\n\tcards: Card[];\r\n}\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\n\r\nexport class PokemonService {\r\n\r\n\tconstructor(private http: HttpClient) {}\r\n\r\n\t// Get pokemon\r\n\tprivate getPokemonSubject = new BehaviorSubject<Pokemon>(null);\r\n\tgetPokemonObservable() {\r\n\t\tthis.getPokemonSubject = new BehaviorSubject<Pokemon>(null);\r\n\t\treturn this.getPokemonSubject.asObservable();\r\n\t}\r\n\tgetPokemon(slug: string) {\r\n\t\tif (CacheGlobal.pokemon[slug]) {\r\n\t\t\tthis.getPokemonSubject.next(CacheGlobal.pokemon[slug]);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.http.get<APIResponse>(`${environment.api}pokemon/${slug}`).subscribe(res => {\r\n\t\t\t\tthis.getPokemonSubject.next(new Pokemon(res.data));\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t// Get pokemon variant\r\n\tprivate getPokemonVariantSubject = new BehaviorSubject<PokemonVariant>(null);\r\n\tgetPokemonVariantObservable() {\r\n\t\tthis.getPokemonVariantSubject = new BehaviorSubject<PokemonVariant>(null);\r\n\t\treturn this.getPokemonVariantSubject.asObservable();\r\n\t}\r\n\tgetPokemonVariant(slug: string) {\r\n\t\tif (CacheGlobal.pokemonVariant[slug]) {\r\n\t\t\tthis.getPokemonVariantSubject.next(CacheGlobal.pokemonVariant[slug]);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.http.get<APIResponse>(`${environment.api}pokemon-variants/${slug}`).subscribe(res => {\r\n\t\t\t\tthis.getPokemonVariantSubject.next(new PokemonVariant(res.data));\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t// Get pokemon variant cards\r\n\tprivate getPokemonVariantCardsSubject = new BehaviorSubject<ResPokemonVariantCards>(null);\r\n\tgetPokemonVariantCardsObservable() {\r\n\t\tthis.getPokemonVariantCardsSubject = new BehaviorSubject<ResPokemonVariantCards>(null);\r\n\t\treturn this.getPokemonVariantCardsSubject.asObservable();\r\n\t}\r\n\tgetPokemonVariantCards(params: GetPokemonVariantCards) {\r\n\t\tvar url = params.buildUrl(`pokemon-variants/${params.slug}/cards`);\r\n\t\tthis.http.get<APIResponse>(url).subscribe(res => {\r\n\t\t\tlet cards = [];\r\n\t\t\tres.data.forEach(card => {\r\n\t\t\t\tcards.push(new Card(card));\r\n\t\t\t});\r\n\t\t\tthis.getPokemonVariantCardsSubject.next({\r\n\t\t\t\ttotal_pages: res.meta.last_page,\r\n\t\t\t\ttotal_results: res.meta.total,\r\n\t\t\t\tcards: cards\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "init",
                        "type": "Partial<GetPokemonVariantCards>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "init",
                        "type": "Partial<GetPokemonVariantCards>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "slug",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "inheritance": {
                        "file": "APIGetPaged"
                    }
                },
                {
                    "name": "artist",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "inheritance": {
                        "file": "APIGetPaged"
                    }
                },
                {
                    "name": "buildUrl",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "inheritance": {
                        "file": "APIGetPaged"
                    }
                },
                {
                    "name": "page",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "inheritance": {
                        "file": "APIGetPaged"
                    }
                },
                {
                    "name": "page_size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "inheritance": {
                        "file": "APIGetPaged"
                    }
                },
                {
                    "name": "query",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "inheritance": {
                        "file": "APIGetPaged"
                    }
                },
                {
                    "name": "rarity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "inheritance": {
                        "file": "APIGetPaged"
                    }
                },
                {
                    "name": "sort_by",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "inheritance": {
                        "file": "APIGetPaged"
                    }
                },
                {
                    "name": "sort_direction",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "inheritance": {
                        "file": "APIGetPaged"
                    }
                },
                {
                    "name": "subtype",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "inheritance": {
                        "file": "APIGetPaged"
                    }
                },
                {
                    "name": "supertype",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "inheritance": {
                        "file": "APIGetPaged"
                    }
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "inheritance": {
                        "file": "APIGetPaged"
                    }
                },
                {
                    "name": "url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "inheritance": {
                        "file": "APIGetPaged"
                    }
                },
                {
                    "name": "user_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "inheritance": {
                        "file": "APIGetPaged"
                    }
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": "APIGetPaged",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "GetPokemonVariants",
            "id": "class-GetPokemonVariants-9802f6f2c1c85b93461515b33227824634eae6d693b813561ee265ca08ea2f9d75bdb7798e57162fa645b38371dcb7af129025dd92ee1762c5c75b71d7e0b0d0",
            "file": "src/app/services/pokemons.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { APIGetPaged, APIResponse } from '@app/models';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { environment } from 'src/environments/environment';\r\nimport { Pokemon, PokemonVariant } from '../pages/pokemons/pokemon/pokemon';\r\n\r\nexport class GetPokemons extends APIGetPaged {\r\n\tconstructor(init?: Partial<GetPokemons>) {\r\n\t\tsuper();\r\n\t\tObject.assign(this, init);\r\n\t}\r\n}\r\n\r\nexport interface ResPokemons {\r\n\ttotal_results: number;\r\n\ttotal_pages: number;\r\n\tpokemons?: Pokemon[];\r\n}\r\n\r\nexport class GetPokemonVariants extends APIGetPaged {\r\n\ttype: string;\r\n\tconstructor(init?: Partial<GetPokemonVariants>) {\r\n\t\tsuper();\r\n\t\tObject.assign(this, init);\r\n\t}\r\n}\r\n\r\nexport interface ResPokemonVariants {\r\n\ttotal_results: number;\r\n\ttotal_pages: number;\r\n\tpokemon_variants?: PokemonVariant[];\r\n}\r\n\r\n@Injectable({\r\n\tprovidedIn: 'root',\r\n})\r\nexport class PokemonsService {\r\n\tconstructor(private http: HttpClient) {}\r\n\r\n\t// Get all pokemons\r\n\tprivate getPokemonsSubject = new BehaviorSubject<ResPokemons>(null);\r\n\tgetPokemonsObservable() {\r\n\t\tthis.getPokemonsSubject = new BehaviorSubject<ResPokemons>(null);\r\n\t\treturn this.getPokemonsSubject.asObservable();\r\n\t}\r\n\tgetPokemons(params: GetPokemons) {\r\n\t\tvar url = params.buildUrl('pokemon');\r\n\t\tthis.http.get<APIResponse>(url).subscribe((res) => {\r\n\t\t\tlet pokemons: Pokemon[] = [];\r\n\t\t\tres.data.forEach((pokemon) => {\r\n\t\t\t\tpokemons.push(new Pokemon(pokemon));\r\n\t\t\t});\r\n\t\t\tthis.getPokemonsSubject.next({\r\n\t\t\t\ttotal_pages: res.meta.last_page,\r\n\t\t\t\ttotal_results: res.meta.total,\r\n\t\t\t\tpokemons: pokemons,\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\r\n\t// Get all pokemons\r\n\tprivate getPokemonVariantsSubject = new BehaviorSubject<ResPokemonVariants>(\r\n\t\tnull\r\n\t);\r\n\tgetPokemonVariantsObservable() {\r\n\t\tthis.getPokemonVariantsSubject =\r\n\t\t\tnew BehaviorSubject<ResPokemonVariants>(null);\r\n\t\treturn this.getPokemonVariantsSubject.asObservable();\r\n\t}\r\n\tgetPokemonVariants(params: GetPokemonVariants) {\r\n\t\tvar url = params.buildUrl('pokemon-variants');\r\n\t\tthis.http.get<APIResponse>(url).subscribe((res) => {\r\n\t\t\tlet pokemon_variants: PokemonVariant[] = [];\r\n\t\t\tres.data.forEach((pokemon_variant) => {\r\n\t\t\t\tpokemon_variants.push(new PokemonVariant(pokemon_variant));\r\n\t\t\t});\r\n\t\t\tthis.getPokemonVariantsSubject.next({\r\n\t\t\t\ttotal_pages: res.meta.last_page,\r\n\t\t\t\ttotal_results: res.meta.total,\r\n\t\t\t\tpokemon_variants: pokemon_variants,\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "init",
                        "type": "Partial<GetPokemonVariants>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "init",
                        "type": "Partial<GetPokemonVariants>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "inheritance": {
                        "file": "APIGetPaged"
                    }
                },
                {
                    "name": "artist",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "inheritance": {
                        "file": "APIGetPaged"
                    }
                },
                {
                    "name": "buildUrl",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "inheritance": {
                        "file": "APIGetPaged"
                    }
                },
                {
                    "name": "page",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "inheritance": {
                        "file": "APIGetPaged"
                    }
                },
                {
                    "name": "page_size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "inheritance": {
                        "file": "APIGetPaged"
                    }
                },
                {
                    "name": "query",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "inheritance": {
                        "file": "APIGetPaged"
                    }
                },
                {
                    "name": "rarity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "inheritance": {
                        "file": "APIGetPaged"
                    }
                },
                {
                    "name": "slug",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "inheritance": {
                        "file": "APIGetPaged"
                    }
                },
                {
                    "name": "sort_by",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "inheritance": {
                        "file": "APIGetPaged"
                    }
                },
                {
                    "name": "sort_direction",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "inheritance": {
                        "file": "APIGetPaged"
                    }
                },
                {
                    "name": "subtype",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "inheritance": {
                        "file": "APIGetPaged"
                    }
                },
                {
                    "name": "supertype",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "inheritance": {
                        "file": "APIGetPaged"
                    }
                },
                {
                    "name": "url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "inheritance": {
                        "file": "APIGetPaged"
                    }
                },
                {
                    "name": "user_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "inheritance": {
                        "file": "APIGetPaged"
                    }
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": "APIGetPaged",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ItemGroup",
            "id": "class-ItemGroup-65e33e0c52b69ddf548375900306d115327bbb72e0d5de7d7bc9f4853c365c29a60021819a932318335b7762116392a199c875ffbf6b252c006b82673c112aed",
            "file": "src/app/layout/main/items/items-groups/item-group.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class ItemGroup {\r\n\tname: string;\r\n\tprogress?: number;\r\n\ttotal_cards?: number;\r\n\titems: any[] = [];\r\n\tconstructor(init?:Partial<ItemGroup>) {\r\n\t\tObject.assign(this, init);\r\n\t}\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "init",
                        "type": "Partial<ItemGroup>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 5,
                "jsdoctags": [
                    {
                        "name": "init",
                        "type": "Partial<ItemGroup>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "items",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "progress",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "total_cards",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 4
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Items",
            "id": "class-Items-f1910e3812549c76fef06a8e97329eb36b05279024ea47b331ae97be16cbcc73a0225db292e446ecfa1caa41b3c6707471820eec71b0e7bf62ebf6bd08013c46",
            "file": "src/app/layout/main/items/items.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { ItemsHeader } from './items-header/items-header';\r\nimport { ItemsFooter } from './items-footer/items-footer';\r\nimport { ItemsFilter, ItemDisplayType } from './items-filter/items-filter';\r\nimport { Button } from '@app/controls/button/button';\r\nimport { ItemGroup } from './items-groups/item-group';\r\nimport { Icons } from '@app/models';\r\n\r\nexport class Items {\r\n\tshowHeader: boolean = true;\r\n\tshowFilters: boolean = true;\r\n\tshowFooter: boolean = true;\r\n\theader: ItemsHeader = new ItemsHeader();\r\n\tfilter: ItemsFilter = new ItemsFilter();\r\n\tfooter: ItemsFooter = new ItemsFooter();\r\n\r\n\titemClasses: string;\r\n\r\n\titemDisplayType: ItemDisplayType = ItemDisplayType.grid;\r\n\titemGroups: ItemGroup[] = [];\r\n\tgetItems: (_this: any) => void;\r\n\r\n\t_this: any;\r\n\r\n\tbuttonNoResults: Button;\r\n\tnoResults: string = \"No items found\";\r\n\tnoResultsIcon: string = Icons.archive;\r\n\tnoResultsImage: string;\r\n\r\n    constructor(init?:Partial<Items>) {\r\n\t\tObject.assign(this, init);\r\n\t\tthis.header.getItems = this.getItems;\r\n\t\tthis.footer.getItems = this.getItems;\r\n\t\tthis.header._this = this._this;\r\n\t\tthis.footer._this = this._this;\r\n\t}\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "init",
                        "type": "Partial<Items>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "init",
                        "type": "Partial<Items>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "_this",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "buttonNoResults",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Button",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "filter",
                    "defaultValue": "new ItemsFilter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ItemsFilter",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "footer",
                    "defaultValue": "new ItemsFooter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ItemsFooter",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "getItems",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "header",
                    "defaultValue": "new ItemsHeader()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ItemsHeader",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "itemClasses",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "itemDisplayType",
                    "defaultValue": "ItemDisplayType.grid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ItemDisplayType",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "itemGroups",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ItemGroup[]",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "noResults",
                    "defaultValue": "\"No items found\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "noResultsIcon",
                    "defaultValue": "Icons.archive",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "noResultsImage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "showFilters",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "showFooter",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "showHeader",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ItemsFilter",
            "id": "class-ItemsFilter-c3869ddd9cbf2edc4269b542255afa71adc1126da2c429c7f9b5a502753a0013b4350100cbf05164e16628807cf8dd956965741ea0f8b23e8e6c5932e4484fcf",
            "file": "src/app/layout/main/items/items-filter/items-filter.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Textbox  } from '@app/controls/textbox';\r\nimport { Select, SelectOptionGroup, SelectOption } from '@app/controls/select';\r\nimport { Menu, MenuItem } from '@app/controls/menu';\r\nimport { Icons } from '@app/models/icons';\r\n\r\nexport enum ItemDisplayType {\r\n\tgrid = \"Grid\",\r\n\tlist = \"List\",\r\n}\r\n\r\nexport class ItemsFilter {\r\n\r\n\t// Values\r\n\tdisplayMode: ItemDisplayType = ItemDisplayType.grid;\r\n\tshowGridDisplayMode: boolean = true;\r\n\tshowListDisplayMode: boolean = true;\r\n\tshowSimpleDisplayMode: boolean = false;\r\n\tshowVisualDisplayMode: boolean = false;\r\n\tshowSort: boolean = true;\r\n\r\n\t// Controls\r\n\ttextboxSearch: Textbox;\r\n\tselectSortBy: Select;\r\n\tselectSortDirection: Select;\r\n\tmenuDisplayMode: Menu;\r\n\tmenuItemGridDisplayMode: MenuItem = new MenuItem();\r\n\tmenuItemListDisplayMode: MenuItem = new MenuItem();\r\n\tmenuItemSimpleDisplayMode: MenuItem = new MenuItem();\r\n\tmenuItemVisualDisplayMode: MenuItem = new MenuItem();\r\n\r\n    constructor(init?:Partial<ItemsFilter>) {\r\n\t\tObject.assign(this, init);\r\n\r\n\t\t// Search\r\n\t\tthis.textboxSearch = new Textbox({\r\n\t\t\ticon: Icons.search,\r\n\t\t\tplaceholder: \"Search items...\",\r\n\t\t\tclearable: true,\r\n\t\t\tautoComplete: false\r\n\t\t});\r\n\r\n\t\t// Sort by\r\n\t\tthis.selectSortBy = new Select({\r\n\t\t\tclasses: \"square-right\",\r\n\t\t\toptionGroups: [\r\n\t\t\t\tnew SelectOptionGroup({\r\n\t\t\t\t\tlabel: \"Sort By\",\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t});\r\n\r\n\t\t// Sort direction\r\n\t\tthis.selectSortDirection = new Select({\r\n\t\t\tclasses: \"square-left\",\r\n\t\t\tvalue: \"asc\",\r\n\t\t\toptionGroups: [\r\n\t\t\t\tnew SelectOptionGroup({\r\n\t\t\t\t\tlabel: \"Sort Direction\",\r\n\t\t\t\t\toptions: [\r\n\t\t\t\t\t\tnew SelectOption({\r\n\t\t\t\t\t\t\ttext: \"Asc\",\r\n\t\t\t\t\t\t\tvalue: \"asc\"\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\tnew SelectOption({\r\n\t\t\t\t\t\t\ttext: \"Desc\",\r\n\t\t\t\t\t\t\tvalue: \"desc\"\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t});\r\n\t}\r\n\r\n\r\n\tsetDisplayMode(type: ItemDisplayType) {\r\n\t\tthis.displayMode = type;\r\n\t\tthis.menuItemGridDisplayMode.active = false;\r\n\t\tthis.menuItemListDisplayMode.active = false;\r\n\t\tthis.menuItemSimpleDisplayMode.active = false;\r\n\t\tthis.menuItemVisualDisplayMode.active = false;\r\n\t\tswitch (type) {\r\n\t\t\tcase ItemDisplayType.grid: {\r\n\t\t\t\tthis.menuItemGridDisplayMode.active = true;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase ItemDisplayType.list: {\r\n\t\t\t\tthis.menuItemListDisplayMode.active = true;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "init",
                        "type": "Partial<ItemsFilter>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 29,
                "jsdoctags": [
                    {
                        "name": "init",
                        "type": "Partial<ItemsFilter>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "displayMode",
                    "defaultValue": "ItemDisplayType.grid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ItemDisplayType",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "menuDisplayMode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Menu",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "menuItemGridDisplayMode",
                    "defaultValue": "new MenuItem()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MenuItem",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "menuItemListDisplayMode",
                    "defaultValue": "new MenuItem()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MenuItem",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "menuItemSimpleDisplayMode",
                    "defaultValue": "new MenuItem()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MenuItem",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "menuItemVisualDisplayMode",
                    "defaultValue": "new MenuItem()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MenuItem",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "selectSortBy",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Select",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "selectSortDirection",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Select",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "showGridDisplayMode",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "showListDisplayMode",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "showSimpleDisplayMode",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "showSort",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "showVisualDisplayMode",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "textboxSearch",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Textbox",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methods": [
                {
                    "name": "setDisplayMode",
                    "args": [
                        {
                            "name": "type",
                            "type": "ItemDisplayType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "ItemDisplayType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ItemsFooter",
            "id": "class-ItemsFooter-18a9d789ae3de801a56ddc311abb0462da4df780c3c5d764a805a42a79859df53d855d035388c94b27f7367c8e78009d0742b18d397dbac4e3e9dac9b244f365",
            "file": "src/app/layout/main/items/items-footer/items-footer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Select } from '@app/controls/select';\r\nimport { Button } from '@app/controls/button';\r\nimport { Textbox } from '@app/controls/textbox';\r\n\r\nexport class ItemsFooter {\r\n\t// Values\r\n\tpage: number = 1;\r\n\tpageSize: number = 24;\r\n\ttotalPages: number;\r\n\ttotalItems: number;\r\n\r\n\t// Controls\r\n\tselectPageSize: Select = new Select();\r\n\tbuttonPrev: Button = new Button({\r\n\t\tclasses: 'square-right',\r\n\t});\r\n\tbuttonNext: Button = new Button({\r\n\t\tclasses: 'square-left',\r\n\t});\r\n\ttextboxPage: Textbox = new Textbox({\r\n\t\tclasses: 'square',\r\n\t});\r\n\r\n\t_this: any;\r\n\tgetItems: (_this: any) => void;\r\n\r\n\tconstructor(init?: Partial<ItemsFooter>) {\r\n\t\tObject.assign(this, init);\r\n\t}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "init",
                        "type": "Partial<ItemsFooter>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "init",
                        "type": "Partial<ItemsFooter>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "_this",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "buttonNext",
                    "defaultValue": "new Button({\r\n\t\tclasses: 'square-left',\r\n\t})",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Button",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "buttonPrev",
                    "defaultValue": "new Button({\r\n\t\tclasses: 'square-right',\r\n\t})",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Button",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "getItems",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "page",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "pageSize",
                    "defaultValue": "24",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "selectPageSize",
                    "defaultValue": "new Select()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Select",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "textboxPage",
                    "defaultValue": "new Textbox({\r\n\t\tclasses: 'square',\r\n\t})",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Textbox",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "totalItems",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "totalPages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ItemsHeader",
            "id": "class-ItemsHeader-868b0a71dd21bcbf1f07a3b5953bd8a829e325bacd74fd449a449c37c3767de8832dbcdd7604634ae8cc19bee2d5e17581c2c1df900da74a3abcba3485a64c6f",
            "file": "src/app/layout/main/items/items-header/items-header.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Menu } from '@app/controls/menu';\r\nimport { Tag } from '@app/controls/tag';\r\nimport { Icons } from '@app/models/icons';\r\nimport { Button } from '@app/controls/button';\r\nimport { Toggle } from '@app/controls/toggle';\r\nimport { ProgressBar } from '@app/controls/progress-bar/progress-bar';\r\n\r\nexport class ItemsHeader {\r\n\ttitle: string;\r\n\ttitleRoute: string;\r\n\tsubtitle: string;\r\n\ttags: Tag[] = [];\r\n\tsymbol: string;\r\n\tsymbolRarity: string;\r\n\ticon: Icons;\r\n\tprice: number;\r\n\tmenu: Menu;\r\n\tbutton: Button;\r\n\ttoggle: Toggle;\r\n\tprogressBar: ProgressBar;\r\n\r\n\t_this: any;\r\n\tgetItems: (_this: any) => void;\r\n\r\n    constructor(init?:Partial<ItemsHeader>) {\r\n\t\tObject.assign(this, init);\r\n\t}\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "init",
                        "type": "Partial<ItemsHeader>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "init",
                        "type": "Partial<ItemsHeader>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "_this",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "button",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Button",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "getItems",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Icons",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "menu",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Menu",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "price",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "progressBar",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ProgressBar",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "subtitle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "symbol",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "symbolRarity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "tags",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Tag[]",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "titleRoute",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "toggle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Toggle",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "MBForm",
            "id": "class-MBForm-f53027a267032672863748c29385f9ac886d9bd668fe78134d003c34c6470e8130be169004bded02481c2966961037beab869dc9f1fb2d514603a4facbff74d9",
            "file": "src/app/controls/form/form.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { MBFormGroup } from './form-group/form-group';\r\nimport { FormGroup } from '@angular/forms';\r\n\r\nexport class MBForm {\r\n\ttitle: string;\r\n\tgroups: MBFormGroup[];\r\n\tformGroup: FormGroup;\r\n\r\n    constructor(init?:Partial<MBForm>) {\r\n\t\tObject.assign(this, init);\r\n\t}\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "init",
                        "type": "Partial<MBForm>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "init",
                        "type": "Partial<MBForm>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "formGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "groups",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MBFormGroup[]",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "MBFormControl",
            "id": "class-MBFormControl-3043915f39be259825730eacddf4f7d86d715dcb6352d929e37cb6b5b59f8b1cb46157f9984d7f59af6eeb7fa63ee14cf651397010f17486a073992b1ceecfba",
            "file": "src/app/controls/form/form-group/form-control/form-control.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class MBFormControl {\r\n\tcontrol: any;\r\n\tclasses: string;\r\n\tformControl: any;\r\n\r\n\tconstructor(init?: Partial<MBFormControl>) {\r\n\t\tObject.assign(this, init);\r\n\t}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "init",
                        "type": "Partial<MBFormControl>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 4,
                "jsdoctags": [
                    {
                        "name": "init",
                        "type": "Partial<MBFormControl>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "classes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "formControl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "MBFormGroup",
            "id": "class-MBFormGroup-cd5e64e062dad1c3e8f4995e60c00b756b4c929a263a84a5a3bda7e060f3f8b7c803ba0e6066fb4c6b563c305d1881b11414655c54034abe3c9c35f273c66c85",
            "file": "src/app/controls/form/form-group/form-group.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { MBFormControl } from './form-control/form-control';\r\n\r\nexport class MBFormGroup {\r\n\ttitle: string;\r\n\tsubtitle: string;\r\n\tcontrols: MBFormControl[];\r\n\r\n    constructor(init?:Partial<MBFormGroup>) {\r\n\t\tObject.assign(this, init);\r\n\t}\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "init",
                        "type": "Partial<MBFormGroup>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "init",
                        "type": "Partial<MBFormGroup>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "controls",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MBFormControl[]",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "subtitle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Menu",
            "id": "class-Menu-f89e79c35f20576475e546d26a8fb5174e989c4d153e79f8e3919025e076c7801631af490c86e049fd036adea8fd15ab6512d157ffa0d05d2e62922aa4fee5c7",
            "file": "src/app/controls/menu/menu.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Size } from '@app/models/size';\r\nimport { Textbox } from '../textbox';\r\nimport { Button } from '../button';\r\nimport { Icons } from '@app/models';\r\n\r\nexport class Menu {\r\n\titems: MenuItem[] = [];\r\n\tunfilteredItems: MenuItem[] = [];\r\n\thorizontal: boolean = false;\r\n\tround: boolean = true;\r\n\ttabs: boolean = false;\r\n\tclasses?: string;\r\n\tsize: Size = Size.medium;\r\n\tminHeight?: string;\r\n\tminWidth?: string;\r\n\tmaxHeight?: string;\r\n\tmaxWidth?: string;\r\n\tborders: boolean = false;\r\n\tclearActiveClickOutside: boolean = true;\r\n\ttextboxSearch: Textbox;\r\n\tsearch: boolean;\r\n\tdark: boolean;\r\n\r\n\tconstructor(init?: Partial<Menu>) {\r\n\t\tObject.assign(this, init);\r\n\t\tthis.setupControls();\r\n\t}\r\n\r\n\tsetupControls() {\r\n\t\tthis.textboxSearch = new Textbox({\r\n\t\t\ticon: Icons.search,\r\n\t\t\tclearable: true,\r\n\t\t\tplaceholder: 'Search...',\r\n\t\t\tkeydownEnter: (value) => {\r\n\t\t\t\tthis.searchItems(value);\r\n\t\t\t},\r\n\t\t\tclickIcon: (value) => {\r\n\t\t\t\tthis.searchItems(value);\r\n\t\t\t},\r\n\t\t});\r\n\t}\r\n\r\n\tsearchItems(query: string) {\r\n\t\tif (query.length) {\r\n\t\t\tif (!this.unfilteredItems.length) {\r\n\t\t\t\tthis.unfilteredItems = this.items;\r\n\t\t\t}\r\n\t\t\tthis.items = this.items.filter((menuItem: MenuItem) => {\r\n\t\t\t\treturn menuItem.text\r\n\t\t\t\t\t.toLowerCase()\r\n\t\t\t\t\t.includes(query.toLowerCase());\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tthis.items = this.unfilteredItems;\r\n\t\t}\r\n\t}\r\n\r\n\tclearActive() {\r\n\t\tif (this.items.length) {\r\n\t\t\tthis.items.forEach((item) => {\r\n\t\t\t\titem.active = false;\r\n\t\t\t\tif (item.menu && item.menu.items.length) {\r\n\t\t\t\t\titem.menu.clearActive();\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport class MenuItem {\r\n\ttext?: string;\r\n\troute?: string;\r\n\thref?: string;\r\n\ticon?: string;\r\n\tactive: boolean = false;\r\n\tmenu?: Menu;\r\n\tprice?: number;\r\n\tsymbol?: string;\r\n\tclasses?: string;\r\n\tclassesLink?: string;\r\n\ttextbox?: Textbox;\r\n\tbutton?: Button;\r\n\tdisabled: boolean;\r\n\tseparator: boolean = false;\r\n\ttarget?: string;\r\n\texactMatch: boolean = false;\r\n\r\n\tpublic click: (event: any) => void;\r\n\r\n\tpublic constructor(init?: Partial<MenuItem>) {\r\n\t\tObject.assign(this, init);\r\n\t\tif (this.href) {\r\n\t\t\tthis.target = '_blank';\r\n\t\t}\r\n\t}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "init",
                        "type": "Partial<Menu>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "init",
                        "type": "Partial<Menu>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "borders",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "classes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "clearActiveClickOutside",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "dark",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "horizontal",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "items",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MenuItem[]",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "maxHeight",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "maxWidth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "minHeight",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "minWidth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "round",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "search",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "size",
                    "defaultValue": "Size.medium",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Size",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "tabs",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "textboxSearch",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Textbox",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "unfilteredItems",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MenuItem[]",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "methods": [
                {
                    "name": "clearActive",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "searchItems",
                    "args": [
                        {
                            "name": "query",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "query",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setupControls",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "MenuItem",
            "id": "class-MenuItem-f89e79c35f20576475e546d26a8fb5174e989c4d153e79f8e3919025e076c7801631af490c86e049fd036adea8fd15ab6512d157ffa0d05d2e62922aa4fee5c7",
            "file": "src/app/controls/menu/menu.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Size } from '@app/models/size';\r\nimport { Textbox } from '../textbox';\r\nimport { Button } from '../button';\r\nimport { Icons } from '@app/models';\r\n\r\nexport class Menu {\r\n\titems: MenuItem[] = [];\r\n\tunfilteredItems: MenuItem[] = [];\r\n\thorizontal: boolean = false;\r\n\tround: boolean = true;\r\n\ttabs: boolean = false;\r\n\tclasses?: string;\r\n\tsize: Size = Size.medium;\r\n\tminHeight?: string;\r\n\tminWidth?: string;\r\n\tmaxHeight?: string;\r\n\tmaxWidth?: string;\r\n\tborders: boolean = false;\r\n\tclearActiveClickOutside: boolean = true;\r\n\ttextboxSearch: Textbox;\r\n\tsearch: boolean;\r\n\tdark: boolean;\r\n\r\n\tconstructor(init?: Partial<Menu>) {\r\n\t\tObject.assign(this, init);\r\n\t\tthis.setupControls();\r\n\t}\r\n\r\n\tsetupControls() {\r\n\t\tthis.textboxSearch = new Textbox({\r\n\t\t\ticon: Icons.search,\r\n\t\t\tclearable: true,\r\n\t\t\tplaceholder: 'Search...',\r\n\t\t\tkeydownEnter: (value) => {\r\n\t\t\t\tthis.searchItems(value);\r\n\t\t\t},\r\n\t\t\tclickIcon: (value) => {\r\n\t\t\t\tthis.searchItems(value);\r\n\t\t\t},\r\n\t\t});\r\n\t}\r\n\r\n\tsearchItems(query: string) {\r\n\t\tif (query.length) {\r\n\t\t\tif (!this.unfilteredItems.length) {\r\n\t\t\t\tthis.unfilteredItems = this.items;\r\n\t\t\t}\r\n\t\t\tthis.items = this.items.filter((menuItem: MenuItem) => {\r\n\t\t\t\treturn menuItem.text\r\n\t\t\t\t\t.toLowerCase()\r\n\t\t\t\t\t.includes(query.toLowerCase());\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tthis.items = this.unfilteredItems;\r\n\t\t}\r\n\t}\r\n\r\n\tclearActive() {\r\n\t\tif (this.items.length) {\r\n\t\t\tthis.items.forEach((item) => {\r\n\t\t\t\titem.active = false;\r\n\t\t\t\tif (item.menu && item.menu.items.length) {\r\n\t\t\t\t\titem.menu.clearActive();\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport class MenuItem {\r\n\ttext?: string;\r\n\troute?: string;\r\n\thref?: string;\r\n\ticon?: string;\r\n\tactive: boolean = false;\r\n\tmenu?: Menu;\r\n\tprice?: number;\r\n\tsymbol?: string;\r\n\tclasses?: string;\r\n\tclassesLink?: string;\r\n\ttextbox?: Textbox;\r\n\tbutton?: Button;\r\n\tdisabled: boolean;\r\n\tseparator: boolean = false;\r\n\ttarget?: string;\r\n\texactMatch: boolean = false;\r\n\r\n\tpublic click: (event: any) => void;\r\n\r\n\tpublic constructor(init?: Partial<MenuItem>) {\r\n\t\tObject.assign(this, init);\r\n\t\tif (this.href) {\r\n\t\t\tthis.target = '_blank';\r\n\t\t}\r\n\t}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "init",
                        "type": "Partial<MenuItem>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 88,
                "modifierKind": [
                    123
                ],
                "jsdoctags": [
                    {
                        "name": "init",
                        "type": "Partial<MenuItem>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "active",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 75
                },
                {
                    "name": "button",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Button",
                    "optional": true,
                    "description": "",
                    "line": 82
                },
                {
                    "name": "classes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 79
                },
                {
                    "name": "classesLink",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 80
                },
                {
                    "name": "click",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 88,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 83
                },
                {
                    "name": "exactMatch",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 86
                },
                {
                    "name": "href",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 73
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 74
                },
                {
                    "name": "menu",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Menu",
                    "optional": true,
                    "description": "",
                    "line": 76
                },
                {
                    "name": "price",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 77
                },
                {
                    "name": "route",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 72
                },
                {
                    "name": "separator",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 84
                },
                {
                    "name": "symbol",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 78
                },
                {
                    "name": "target",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 85
                },
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 71
                },
                {
                    "name": "textbox",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Textbox",
                    "optional": true,
                    "description": "",
                    "line": 81
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Notification",
            "id": "class-Notification-3f80f48a21f0020708cfe16bcfb68ec4d3fd38f9381e278085b42f5b77dab88f78151b15c3c2d0c419f948714f50231052c3bc6ca91f397a33f1fd4a2489e451",
            "file": "src/app/controls/notifications/notification.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Icons } from '@app/models/icons';\r\nimport { AlertType } from '../alert/alert';\r\n\r\nexport class Notification {\r\n\tid: number;\r\n\tmessage: string;\r\n\talertType: AlertType;\r\n\ticon: Icons;\r\n\thidden: boolean;\r\n\tduration?: number; // Null duration = dismiss required\r\n\tdestroy: () => void;\r\n\tclick = () => {};\r\n\r\n\tpublic constructor(init?: Partial<Notification>) {\r\n\t\tObject.assign(this, init);\r\n\t\tthis.setupDefaults();\r\n\t}\r\n\r\n\tsetupDefaults() {\r\n\t\tlet defaultDuration = 5000;\r\n\t\tswitch (this.alertType) {\r\n\t\t\tcase AlertType.success: {\r\n\t\t\t\tif (!this.duration) {\r\n\t\t\t\t\tthis.duration = defaultDuration;\r\n\t\t\t\t}\r\n\t\t\t\tthis.icon = Icons.check;\r\n\t\t\t\tthis.click = () => {\r\n\t\t\t\t\tthis.hide();\r\n\t\t\t\t};\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase AlertType.info: {\r\n\t\t\t\tthis.icon = Icons.info;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase AlertType.warning: {\r\n\t\t\t\tif (!this.duration) {\r\n\t\t\t\t\tthis.duration = defaultDuration;\r\n\t\t\t\t}\r\n\t\t\t\tthis.icon = Icons.warning;\r\n\t\t\t\tthis.click = () => {\r\n\t\t\t\t\tthis.hide();\r\n\t\t\t\t};\r\n\t\t\t\tthis.icon = Icons.warning;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase AlertType.error: {\r\n\t\t\t\tthis.icon = Icons.error;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (this.duration) {\r\n\t\t\tthis.startTimer();\r\n\t\t}\r\n\t}\r\n\r\n\tstartTimer() {\r\n\t\tsetTimeout(() => {\r\n\t\t\tthis.hide();\r\n\t\t}, this.duration);\r\n\t}\r\n\r\n\thide() {\r\n\t\tthis.hidden = true;\r\n\t\tsetTimeout(() => {\r\n\t\t\tif (this.destroy) {\r\n\t\t\t\tthis.destroy();\r\n\t\t\t}\r\n\t\t}, 1000);\r\n\t}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "init",
                        "type": "Partial<Notification>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 12,
                "modifierKind": [
                    123
                ],
                "jsdoctags": [
                    {
                        "name": "init",
                        "type": "Partial<Notification>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "alertType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AlertType",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "click",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "destroy",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "duration",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "hidden",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Icons",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "methods": [
                {
                    "name": "hide",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setupDefaults",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "startTimer",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Pokemon",
            "id": "class-Pokemon-aba163b1d543eed83d8b961e3d81d2db91ab66b82733b3b71e51a6c92790580202fe98ab88610447e8a4c09cd23d1200284462978bc11b9488bdeefb1e3d1f89",
            "file": "src/app/pages/pokemons/pokemon/pokemon.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Select, SelectOption, SelectOptionGroup } from '@app/controls';\r\n\r\nexport class EvolutionChain {\r\n\tid: number;\r\n\tname: string;\r\n\tnational_dex_number: number;\r\n\tsprite: string;\r\n}\r\n\r\nexport class PokemonGeneration {\r\n\tid: number;\r\n\tname: string;\r\n\tregion: string;\r\n\tconstructor(init?: Partial<PokemonGeneration>) {\r\n\t\tObject.assign(this, init);\r\n\t}\r\n}\r\n\r\nexport class Pokemon {\r\n\tid: number;\r\n\tname: string;\r\n\tgeneration: PokemonGeneration;\r\n\tnational_dex_number: number;\r\n\torder: number;\r\n\tis_baby: boolean;\r\n\tis_legendary: boolean;\r\n\tis_mythical: boolean;\r\n\tcolor: string;\r\n\tshape: string;\r\n\tflavor_texts: string;\r\n\tevolves_from_pokemon: number;\r\n\timage: string;\r\n\tslug: string;\r\n\tvariants: PokemonVariant[] = [];\r\n\tvariant: PokemonVariant;\r\n\tsprites: PokemonSprites;\r\n\ttypes: string[] = [];\r\n\theight: number;\r\n\tweight: number;\r\n\tevolution_chain: EvolutionChain[] = [];\r\n\r\n\troute: string;\r\n\r\n\tconstructor(init?: Partial<Pokemon>) {\r\n\t\tObject.assign(this, init);\r\n\r\n\t\t// Route\r\n\t\tthis.route = `/pokemon/${this.slug}`;\r\n\r\n\t\t// Initalize variants\r\n\t\tif (init.variants) {\r\n\t\t\tthis.variants = [];\r\n\t\t\tinit.variants.forEach((variant) => {\r\n\t\t\t\tthis.variants.push(new PokemonVariant(variant));\r\n\t\t\t});\r\n\t\t}\r\n\t\tif (init.variant) {\r\n\t\t\tthis.variant = new PokemonVariant(this.variant);\r\n\t\t\tthis.variant.pokemon = this;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport class PokemonVariant {\r\n\tprogress: number = 80;\r\n\ttotal_cards: number = 100;\r\n\tid: number;\r\n\tpokemon: Pokemon;\r\n\tname: string;\r\n\tslug: string;\r\n\tis_default: boolean;\r\n\tsprites: PokemonSprites;\r\n\theight: number;\r\n\tweight: number;\r\n\ttypes: string[] = [];\r\n\tprevious_pokemon: string;\r\n\tnext_pokemon: string;\r\n\tother_variants: PokemonVariant[] = [];\r\n\r\n\troute: string;\r\n\r\n\tconstructor(init?: Partial<PokemonVariant>) {\r\n\t\tObject.assign(this, init);\r\n\r\n\t\t// Route\r\n\t\tif (!this.slug && this.name)\r\n\t\t\tthis.slug = this.name.toLowerCase().replace(' ', '-');\r\n\t\tthis.route = `/pokemon/${this.slug}`;\r\n\r\n\t\t// Init sprites\r\n\t\tthis.sprites = new PokemonSprites(init.sprites);\r\n\r\n\t\tif (init.other_variants)\r\n\t\t\tthis.other_variants = init.other_variants.map(\r\n\t\t\t\t(variant) => new PokemonVariant(variant)\r\n\t\t\t);\r\n\t}\r\n}\r\n\r\nexport class PokemonSprites {\r\n\tdefault?: string;\r\n\tofficial?: string;\r\n\tshiny?: string;\r\n\ticon?: string;\r\n\r\n\tconstructor(init?: Partial<PokemonSprites>) {\r\n\t\tObject.assign(this, init);\r\n\t}\r\n}\r\n\r\nexport function SetSortByPokemon(select: Select) {\r\n\tselect.optionGroups[0] = new SelectOptionGroup({\r\n\t\tlabel: 'Sort By',\r\n\t\toptions: [\r\n\t\t\tnew SelectOption({\r\n\t\t\t\ttext: 'Number',\r\n\t\t\t\tvalue: 'pokemon.order',\r\n\t\t\t}),\r\n\t\t\tnew SelectOption({\r\n\t\t\t\ttext: 'Name',\r\n\t\t\t\tvalue: 'pokemon_variants.name',\r\n\t\t\t}),\r\n\t\t\tnew SelectOption({\r\n\t\t\t\ttext: 'Weight',\r\n\t\t\t\tvalue: 'pokemon_variants.weight',\r\n\t\t\t}),\r\n\t\t\tnew SelectOption({\r\n\t\t\t\ttext: 'Height',\r\n\t\t\t\tvalue: 'pokemon_variants.height',\r\n\t\t\t}),\r\n\t\t],\r\n\t});\r\n\tselect.value = 'pokemon.order';\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "init",
                        "type": "Partial<Pokemon>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 42,
                "jsdoctags": [
                    {
                        "name": "init",
                        "type": "Partial<Pokemon>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "evolution_chain",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EvolutionChain[]",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "evolves_from_pokemon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "flavor_texts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "generation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PokemonGeneration",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "height",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "image",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "is_baby",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "is_legendary",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "is_mythical",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "national_dex_number",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "order",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "route",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "shape",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "slug",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "sprites",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PokemonSprites",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "types",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "variant",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PokemonVariant",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "variants",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PokemonVariant[]",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "weight",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 39
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "PokemonFactory",
            "id": "class-PokemonFactory-e9b78958b56f4a0935d40ff06c097d7a85c0b1d0b7d1c8bd3f74386a27aa02e0e4d40c95639079016048e7d77355638b59d6dadb3403e66b140774a14f0c7de3",
            "file": "src/app/services/factory/pokemon.factory.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Pokemon } from \"../../pages/pokemons/pokemon\";\r\nexport class PokemonFactory {\r\n\tpokemon = [\r\n\t\t{\r\n\t\t\tid: 1,\r\n\t\t\tname: \"Bulbasaur\",\r\n\t\t\tgernation: 1,\r\n\t\t\tnational_dex_number: 1,\r\n\t\t\torder: 1,\r\n\t\t\timage: \"https://cdn.bulbagarden.net/upload/thumb/2/21/001Bulbasaur.png/250px-001Bulbasaur.png\",\r\n\t\t\tslug: \"bulbasaur\"\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 2,\r\n\t\t\tname: \"Ivysaur\",\r\n\t\t\tgernation: 1,\r\n\t\t\tnational_dex_number: 2,\r\n\t\t\torder: 2,\r\n\t\t\timage: \"https://cdn.bulbagarden.net/upload/thumb/7/73/002Ivysaur.png/250px-002Ivysaur.png\",\r\n\t\t\tslug: \"ivysaur\"\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 3,\r\n\t\t\tname: \"Venusaur\",\r\n\t\t\tgernation: 1,\r\n\t\t\tnational_dex_number: 3,\r\n\t\t\torder: 3,\r\n\t\t\timage: \"https://cdn.bulbagarden.net/upload/thumb/a/ae/003Venusaur.png/250px-003Venusaur.png\",\r\n\t\t\tslug: \"venusaur\"\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 4,\r\n\t\t\tname: \"Charmander\",\r\n\t\t\tgernation: 1,\r\n\t\t\tnational_dex_number: 4,\r\n\t\t\torder: 4,\r\n\t\t\timage: \"https://cdn.bulbagarden.net/upload/thumb/7/73/004Charmander.png/250px-004Charmander.png\",\r\n\t\t\tslug: \"charmander\"\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 5,\r\n\t\t\tname: \"Charmeleon\",\r\n\t\t\tgernation: 1,\r\n\t\t\tnational_dex_number: 5,\r\n\t\t\torder: 5,\r\n\t\t\timage: \"https://cdn.bulbagarden.net/upload/thumb/4/4a/005Charmeleon.png/250px-005Charmeleon.png\",\r\n\t\t\tslug: \"charmeleon\"\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 6,\r\n\t\t\tname: \"Charizard\",\r\n\t\t\tgernation: 1,\r\n\t\t\tnational_dex_number: 6,\r\n\t\t\torder: 6,\r\n\t\t\timage: \"https://cdn.bulbagarden.net/upload/thumb/7/7e/006Charizard.png/250px-006Charizard.png\",\r\n\t\t\tslug: \"charizard\"\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 7,\r\n\t\t\tname: \"Squirtle\",\r\n\t\t\tgernation: 1,\r\n\t\t\tnational_dex_number: 7,\r\n\t\t\torder: 7,\r\n\t\t\timage: \"https://cdn.bulbagarden.net/upload/thumb/3/39/007Squirtle.png/250px-007Squirtle.png\",\r\n\t\t\tslug: \"squirtle\"\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 8,\r\n\t\t\tname: \"Wartortle\",\r\n\t\t\tgernation: 1,\r\n\t\t\tnational_dex_number: 8,\r\n\t\t\torder: 8,\r\n\t\t\timage: \"https://cdn.bulbagarden.net/upload/thumb/0/0c/008Wartortle.png/250px-008Wartortle.png\",\r\n\t\t\tslug: \"wartortle\"\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 9,\r\n\t\t\tname: \"Blastoise\",\r\n\t\t\tgernation: 1,\r\n\t\t\tnational_dex_number: 9,\r\n\t\t\torder: 9,\r\n\t\t\timage: \"https://cdn.bulbagarden.net/upload/thumb/0/02/009Blastoise.png/250px-009Blastoise.png\",\r\n\t\t\tslug: \"blastoise\"\r\n\t\t},\r\n\t]\r\n\tcreatePokemon(pokemonCount: number = 1): Pokemon[] {\r\n\t\tvar pokemon = [];\r\n\t\tArray.from(Array(pokemonCount)).forEach(() => {\r\n\t\t\tvar randomPokemon = new Pokemon(this.pokemon[Math.floor(Math.random() * this.pokemon.length)])\r\n\t\t\tpokemon.push(randomPokemon);\r\n\t\t});\r\n\t\treturn pokemon\r\n\t}\r\n}",
            "properties": [
                {
                    "name": "pokemon",
                    "defaultValue": "[\r\n\t\t{\r\n\t\t\tid: 1,\r\n\t\t\tname: \"Bulbasaur\",\r\n\t\t\tgernation: 1,\r\n\t\t\tnational_dex_number: 1,\r\n\t\t\torder: 1,\r\n\t\t\timage: \"https://cdn.bulbagarden.net/upload/thumb/2/21/001Bulbasaur.png/250px-001Bulbasaur.png\",\r\n\t\t\tslug: \"bulbasaur\"\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 2,\r\n\t\t\tname: \"Ivysaur\",\r\n\t\t\tgernation: 1,\r\n\t\t\tnational_dex_number: 2,\r\n\t\t\torder: 2,\r\n\t\t\timage: \"https://cdn.bulbagarden.net/upload/thumb/7/73/002Ivysaur.png/250px-002Ivysaur.png\",\r\n\t\t\tslug: \"ivysaur\"\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 3,\r\n\t\t\tname: \"Venusaur\",\r\n\t\t\tgernation: 1,\r\n\t\t\tnational_dex_number: 3,\r\n\t\t\torder: 3,\r\n\t\t\timage: \"https://cdn.bulbagarden.net/upload/thumb/a/ae/003Venusaur.png/250px-003Venusaur.png\",\r\n\t\t\tslug: \"venusaur\"\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 4,\r\n\t\t\tname: \"Charmander\",\r\n\t\t\tgernation: 1,\r\n\t\t\tnational_dex_number: 4,\r\n\t\t\torder: 4,\r\n\t\t\timage: \"https://cdn.bulbagarden.net/upload/thumb/7/73/004Charmander.png/250px-004Charmander.png\",\r\n\t\t\tslug: \"charmander\"\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 5,\r\n\t\t\tname: \"Charmeleon\",\r\n\t\t\tgernation: 1,\r\n\t\t\tnational_dex_number: 5,\r\n\t\t\torder: 5,\r\n\t\t\timage: \"https://cdn.bulbagarden.net/upload/thumb/4/4a/005Charmeleon.png/250px-005Charmeleon.png\",\r\n\t\t\tslug: \"charmeleon\"\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 6,\r\n\t\t\tname: \"Charizard\",\r\n\t\t\tgernation: 1,\r\n\t\t\tnational_dex_number: 6,\r\n\t\t\torder: 6,\r\n\t\t\timage: \"https://cdn.bulbagarden.net/upload/thumb/7/7e/006Charizard.png/250px-006Charizard.png\",\r\n\t\t\tslug: \"charizard\"\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 7,\r\n\t\t\tname: \"Squirtle\",\r\n\t\t\tgernation: 1,\r\n\t\t\tnational_dex_number: 7,\r\n\t\t\torder: 7,\r\n\t\t\timage: \"https://cdn.bulbagarden.net/upload/thumb/3/39/007Squirtle.png/250px-007Squirtle.png\",\r\n\t\t\tslug: \"squirtle\"\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 8,\r\n\t\t\tname: \"Wartortle\",\r\n\t\t\tgernation: 1,\r\n\t\t\tnational_dex_number: 8,\r\n\t\t\torder: 8,\r\n\t\t\timage: \"https://cdn.bulbagarden.net/upload/thumb/0/0c/008Wartortle.png/250px-008Wartortle.png\",\r\n\t\t\tslug: \"wartortle\"\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 9,\r\n\t\t\tname: \"Blastoise\",\r\n\t\t\tgernation: 1,\r\n\t\t\tnational_dex_number: 9,\r\n\t\t\torder: 9,\r\n\t\t\timage: \"https://cdn.bulbagarden.net/upload/thumb/0/02/009Blastoise.png/250px-009Blastoise.png\",\r\n\t\t\tslug: \"blastoise\"\r\n\t\t},\r\n\t]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "methods": [
                {
                    "name": "createPokemon",
                    "args": [
                        {
                            "name": "pokemonCount",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "1"
                        }
                    ],
                    "optional": false,
                    "returnType": "Pokemon[]",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "pokemonCount",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "1",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "PokemonGeneration",
            "id": "class-PokemonGeneration-aba163b1d543eed83d8b961e3d81d2db91ab66b82733b3b71e51a6c92790580202fe98ab88610447e8a4c09cd23d1200284462978bc11b9488bdeefb1e3d1f89",
            "file": "src/app/pages/pokemons/pokemon/pokemon.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Select, SelectOption, SelectOptionGroup } from '@app/controls';\r\n\r\nexport class EvolutionChain {\r\n\tid: number;\r\n\tname: string;\r\n\tnational_dex_number: number;\r\n\tsprite: string;\r\n}\r\n\r\nexport class PokemonGeneration {\r\n\tid: number;\r\n\tname: string;\r\n\tregion: string;\r\n\tconstructor(init?: Partial<PokemonGeneration>) {\r\n\t\tObject.assign(this, init);\r\n\t}\r\n}\r\n\r\nexport class Pokemon {\r\n\tid: number;\r\n\tname: string;\r\n\tgeneration: PokemonGeneration;\r\n\tnational_dex_number: number;\r\n\torder: number;\r\n\tis_baby: boolean;\r\n\tis_legendary: boolean;\r\n\tis_mythical: boolean;\r\n\tcolor: string;\r\n\tshape: string;\r\n\tflavor_texts: string;\r\n\tevolves_from_pokemon: number;\r\n\timage: string;\r\n\tslug: string;\r\n\tvariants: PokemonVariant[] = [];\r\n\tvariant: PokemonVariant;\r\n\tsprites: PokemonSprites;\r\n\ttypes: string[] = [];\r\n\theight: number;\r\n\tweight: number;\r\n\tevolution_chain: EvolutionChain[] = [];\r\n\r\n\troute: string;\r\n\r\n\tconstructor(init?: Partial<Pokemon>) {\r\n\t\tObject.assign(this, init);\r\n\r\n\t\t// Route\r\n\t\tthis.route = `/pokemon/${this.slug}`;\r\n\r\n\t\t// Initalize variants\r\n\t\tif (init.variants) {\r\n\t\t\tthis.variants = [];\r\n\t\t\tinit.variants.forEach((variant) => {\r\n\t\t\t\tthis.variants.push(new PokemonVariant(variant));\r\n\t\t\t});\r\n\t\t}\r\n\t\tif (init.variant) {\r\n\t\t\tthis.variant = new PokemonVariant(this.variant);\r\n\t\t\tthis.variant.pokemon = this;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport class PokemonVariant {\r\n\tprogress: number = 80;\r\n\ttotal_cards: number = 100;\r\n\tid: number;\r\n\tpokemon: Pokemon;\r\n\tname: string;\r\n\tslug: string;\r\n\tis_default: boolean;\r\n\tsprites: PokemonSprites;\r\n\theight: number;\r\n\tweight: number;\r\n\ttypes: string[] = [];\r\n\tprevious_pokemon: string;\r\n\tnext_pokemon: string;\r\n\tother_variants: PokemonVariant[] = [];\r\n\r\n\troute: string;\r\n\r\n\tconstructor(init?: Partial<PokemonVariant>) {\r\n\t\tObject.assign(this, init);\r\n\r\n\t\t// Route\r\n\t\tif (!this.slug && this.name)\r\n\t\t\tthis.slug = this.name.toLowerCase().replace(' ', '-');\r\n\t\tthis.route = `/pokemon/${this.slug}`;\r\n\r\n\t\t// Init sprites\r\n\t\tthis.sprites = new PokemonSprites(init.sprites);\r\n\r\n\t\tif (init.other_variants)\r\n\t\t\tthis.other_variants = init.other_variants.map(\r\n\t\t\t\t(variant) => new PokemonVariant(variant)\r\n\t\t\t);\r\n\t}\r\n}\r\n\r\nexport class PokemonSprites {\r\n\tdefault?: string;\r\n\tofficial?: string;\r\n\tshiny?: string;\r\n\ticon?: string;\r\n\r\n\tconstructor(init?: Partial<PokemonSprites>) {\r\n\t\tObject.assign(this, init);\r\n\t}\r\n}\r\n\r\nexport function SetSortByPokemon(select: Select) {\r\n\tselect.optionGroups[0] = new SelectOptionGroup({\r\n\t\tlabel: 'Sort By',\r\n\t\toptions: [\r\n\t\t\tnew SelectOption({\r\n\t\t\t\ttext: 'Number',\r\n\t\t\t\tvalue: 'pokemon.order',\r\n\t\t\t}),\r\n\t\t\tnew SelectOption({\r\n\t\t\t\ttext: 'Name',\r\n\t\t\t\tvalue: 'pokemon_variants.name',\r\n\t\t\t}),\r\n\t\t\tnew SelectOption({\r\n\t\t\t\ttext: 'Weight',\r\n\t\t\t\tvalue: 'pokemon_variants.weight',\r\n\t\t\t}),\r\n\t\t\tnew SelectOption({\r\n\t\t\t\ttext: 'Height',\r\n\t\t\t\tvalue: 'pokemon_variants.height',\r\n\t\t\t}),\r\n\t\t],\r\n\t});\r\n\tselect.value = 'pokemon.order';\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "init",
                        "type": "Partial<PokemonGeneration>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "init",
                        "type": "Partial<PokemonGeneration>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "region",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "PokemonSprites",
            "id": "class-PokemonSprites-aba163b1d543eed83d8b961e3d81d2db91ab66b82733b3b71e51a6c92790580202fe98ab88610447e8a4c09cd23d1200284462978bc11b9488bdeefb1e3d1f89",
            "file": "src/app/pages/pokemons/pokemon/pokemon.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Select, SelectOption, SelectOptionGroup } from '@app/controls';\r\n\r\nexport class EvolutionChain {\r\n\tid: number;\r\n\tname: string;\r\n\tnational_dex_number: number;\r\n\tsprite: string;\r\n}\r\n\r\nexport class PokemonGeneration {\r\n\tid: number;\r\n\tname: string;\r\n\tregion: string;\r\n\tconstructor(init?: Partial<PokemonGeneration>) {\r\n\t\tObject.assign(this, init);\r\n\t}\r\n}\r\n\r\nexport class Pokemon {\r\n\tid: number;\r\n\tname: string;\r\n\tgeneration: PokemonGeneration;\r\n\tnational_dex_number: number;\r\n\torder: number;\r\n\tis_baby: boolean;\r\n\tis_legendary: boolean;\r\n\tis_mythical: boolean;\r\n\tcolor: string;\r\n\tshape: string;\r\n\tflavor_texts: string;\r\n\tevolves_from_pokemon: number;\r\n\timage: string;\r\n\tslug: string;\r\n\tvariants: PokemonVariant[] = [];\r\n\tvariant: PokemonVariant;\r\n\tsprites: PokemonSprites;\r\n\ttypes: string[] = [];\r\n\theight: number;\r\n\tweight: number;\r\n\tevolution_chain: EvolutionChain[] = [];\r\n\r\n\troute: string;\r\n\r\n\tconstructor(init?: Partial<Pokemon>) {\r\n\t\tObject.assign(this, init);\r\n\r\n\t\t// Route\r\n\t\tthis.route = `/pokemon/${this.slug}`;\r\n\r\n\t\t// Initalize variants\r\n\t\tif (init.variants) {\r\n\t\t\tthis.variants = [];\r\n\t\t\tinit.variants.forEach((variant) => {\r\n\t\t\t\tthis.variants.push(new PokemonVariant(variant));\r\n\t\t\t});\r\n\t\t}\r\n\t\tif (init.variant) {\r\n\t\t\tthis.variant = new PokemonVariant(this.variant);\r\n\t\t\tthis.variant.pokemon = this;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport class PokemonVariant {\r\n\tprogress: number = 80;\r\n\ttotal_cards: number = 100;\r\n\tid: number;\r\n\tpokemon: Pokemon;\r\n\tname: string;\r\n\tslug: string;\r\n\tis_default: boolean;\r\n\tsprites: PokemonSprites;\r\n\theight: number;\r\n\tweight: number;\r\n\ttypes: string[] = [];\r\n\tprevious_pokemon: string;\r\n\tnext_pokemon: string;\r\n\tother_variants: PokemonVariant[] = [];\r\n\r\n\troute: string;\r\n\r\n\tconstructor(init?: Partial<PokemonVariant>) {\r\n\t\tObject.assign(this, init);\r\n\r\n\t\t// Route\r\n\t\tif (!this.slug && this.name)\r\n\t\t\tthis.slug = this.name.toLowerCase().replace(' ', '-');\r\n\t\tthis.route = `/pokemon/${this.slug}`;\r\n\r\n\t\t// Init sprites\r\n\t\tthis.sprites = new PokemonSprites(init.sprites);\r\n\r\n\t\tif (init.other_variants)\r\n\t\t\tthis.other_variants = init.other_variants.map(\r\n\t\t\t\t(variant) => new PokemonVariant(variant)\r\n\t\t\t);\r\n\t}\r\n}\r\n\r\nexport class PokemonSprites {\r\n\tdefault?: string;\r\n\tofficial?: string;\r\n\tshiny?: string;\r\n\ticon?: string;\r\n\r\n\tconstructor(init?: Partial<PokemonSprites>) {\r\n\t\tObject.assign(this, init);\r\n\t}\r\n}\r\n\r\nexport function SetSortByPokemon(select: Select) {\r\n\tselect.optionGroups[0] = new SelectOptionGroup({\r\n\t\tlabel: 'Sort By',\r\n\t\toptions: [\r\n\t\t\tnew SelectOption({\r\n\t\t\t\ttext: 'Number',\r\n\t\t\t\tvalue: 'pokemon.order',\r\n\t\t\t}),\r\n\t\t\tnew SelectOption({\r\n\t\t\t\ttext: 'Name',\r\n\t\t\t\tvalue: 'pokemon_variants.name',\r\n\t\t\t}),\r\n\t\t\tnew SelectOption({\r\n\t\t\t\ttext: 'Weight',\r\n\t\t\t\tvalue: 'pokemon_variants.weight',\r\n\t\t\t}),\r\n\t\t\tnew SelectOption({\r\n\t\t\t\ttext: 'Height',\r\n\t\t\t\tvalue: 'pokemon_variants.height',\r\n\t\t\t}),\r\n\t\t],\r\n\t});\r\n\tselect.value = 'pokemon.order';\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "init",
                        "type": "Partial<PokemonSprites>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 104,
                "jsdoctags": [
                    {
                        "name": "init",
                        "type": "Partial<PokemonSprites>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "default",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 101
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 104
                },
                {
                    "name": "official",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 102
                },
                {
                    "name": "shiny",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 103
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "PokemonVariant",
            "id": "class-PokemonVariant-aba163b1d543eed83d8b961e3d81d2db91ab66b82733b3b71e51a6c92790580202fe98ab88610447e8a4c09cd23d1200284462978bc11b9488bdeefb1e3d1f89",
            "file": "src/app/pages/pokemons/pokemon/pokemon.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Select, SelectOption, SelectOptionGroup } from '@app/controls';\r\n\r\nexport class EvolutionChain {\r\n\tid: number;\r\n\tname: string;\r\n\tnational_dex_number: number;\r\n\tsprite: string;\r\n}\r\n\r\nexport class PokemonGeneration {\r\n\tid: number;\r\n\tname: string;\r\n\tregion: string;\r\n\tconstructor(init?: Partial<PokemonGeneration>) {\r\n\t\tObject.assign(this, init);\r\n\t}\r\n}\r\n\r\nexport class Pokemon {\r\n\tid: number;\r\n\tname: string;\r\n\tgeneration: PokemonGeneration;\r\n\tnational_dex_number: number;\r\n\torder: number;\r\n\tis_baby: boolean;\r\n\tis_legendary: boolean;\r\n\tis_mythical: boolean;\r\n\tcolor: string;\r\n\tshape: string;\r\n\tflavor_texts: string;\r\n\tevolves_from_pokemon: number;\r\n\timage: string;\r\n\tslug: string;\r\n\tvariants: PokemonVariant[] = [];\r\n\tvariant: PokemonVariant;\r\n\tsprites: PokemonSprites;\r\n\ttypes: string[] = [];\r\n\theight: number;\r\n\tweight: number;\r\n\tevolution_chain: EvolutionChain[] = [];\r\n\r\n\troute: string;\r\n\r\n\tconstructor(init?: Partial<Pokemon>) {\r\n\t\tObject.assign(this, init);\r\n\r\n\t\t// Route\r\n\t\tthis.route = `/pokemon/${this.slug}`;\r\n\r\n\t\t// Initalize variants\r\n\t\tif (init.variants) {\r\n\t\t\tthis.variants = [];\r\n\t\t\tinit.variants.forEach((variant) => {\r\n\t\t\t\tthis.variants.push(new PokemonVariant(variant));\r\n\t\t\t});\r\n\t\t}\r\n\t\tif (init.variant) {\r\n\t\t\tthis.variant = new PokemonVariant(this.variant);\r\n\t\t\tthis.variant.pokemon = this;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport class PokemonVariant {\r\n\tprogress: number = 80;\r\n\ttotal_cards: number = 100;\r\n\tid: number;\r\n\tpokemon: Pokemon;\r\n\tname: string;\r\n\tslug: string;\r\n\tis_default: boolean;\r\n\tsprites: PokemonSprites;\r\n\theight: number;\r\n\tweight: number;\r\n\ttypes: string[] = [];\r\n\tprevious_pokemon: string;\r\n\tnext_pokemon: string;\r\n\tother_variants: PokemonVariant[] = [];\r\n\r\n\troute: string;\r\n\r\n\tconstructor(init?: Partial<PokemonVariant>) {\r\n\t\tObject.assign(this, init);\r\n\r\n\t\t// Route\r\n\t\tif (!this.slug && this.name)\r\n\t\t\tthis.slug = this.name.toLowerCase().replace(' ', '-');\r\n\t\tthis.route = `/pokemon/${this.slug}`;\r\n\r\n\t\t// Init sprites\r\n\t\tthis.sprites = new PokemonSprites(init.sprites);\r\n\r\n\t\tif (init.other_variants)\r\n\t\t\tthis.other_variants = init.other_variants.map(\r\n\t\t\t\t(variant) => new PokemonVariant(variant)\r\n\t\t\t);\r\n\t}\r\n}\r\n\r\nexport class PokemonSprites {\r\n\tdefault?: string;\r\n\tofficial?: string;\r\n\tshiny?: string;\r\n\ticon?: string;\r\n\r\n\tconstructor(init?: Partial<PokemonSprites>) {\r\n\t\tObject.assign(this, init);\r\n\t}\r\n}\r\n\r\nexport function SetSortByPokemon(select: Select) {\r\n\tselect.optionGroups[0] = new SelectOptionGroup({\r\n\t\tlabel: 'Sort By',\r\n\t\toptions: [\r\n\t\t\tnew SelectOption({\r\n\t\t\t\ttext: 'Number',\r\n\t\t\t\tvalue: 'pokemon.order',\r\n\t\t\t}),\r\n\t\t\tnew SelectOption({\r\n\t\t\t\ttext: 'Name',\r\n\t\t\t\tvalue: 'pokemon_variants.name',\r\n\t\t\t}),\r\n\t\t\tnew SelectOption({\r\n\t\t\t\ttext: 'Weight',\r\n\t\t\t\tvalue: 'pokemon_variants.weight',\r\n\t\t\t}),\r\n\t\t\tnew SelectOption({\r\n\t\t\t\ttext: 'Height',\r\n\t\t\t\tvalue: 'pokemon_variants.height',\r\n\t\t\t}),\r\n\t\t],\r\n\t});\r\n\tselect.value = 'pokemon.order';\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "init",
                        "type": "Partial<PokemonVariant>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 80,
                "jsdoctags": [
                    {
                        "name": "init",
                        "type": "Partial<PokemonVariant>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "height",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 73
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 67
                },
                {
                    "name": "is_default",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 71
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 69
                },
                {
                    "name": "next_pokemon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 77
                },
                {
                    "name": "other_variants",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PokemonVariant[]",
                    "optional": false,
                    "description": "",
                    "line": 78
                },
                {
                    "name": "pokemon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Pokemon",
                    "optional": false,
                    "description": "",
                    "line": 68
                },
                {
                    "name": "previous_pokemon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 76
                },
                {
                    "name": "progress",
                    "defaultValue": "80",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 65
                },
                {
                    "name": "route",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 80
                },
                {
                    "name": "slug",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 70
                },
                {
                    "name": "sprites",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PokemonSprites",
                    "optional": false,
                    "description": "",
                    "line": 72
                },
                {
                    "name": "total_cards",
                    "defaultValue": "100",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 66
                },
                {
                    "name": "types",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 75
                },
                {
                    "name": "weight",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 74
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ProgressBar",
            "id": "class-ProgressBar-f3bee24235bad8b1a779bcc598847396c58bbb65dc81978e14e1f57d0cdf2d5ed7ffc55c1644e05e4a9adebe0aefae6c930cfb7adc41d1c6e76b1771b9c5e936",
            "file": "src/app/controls/progress-bar/progress-bar.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class ProgressBar {\r\n\ttotal: number;\r\n\tvalue: number;\r\n\r\n    constructor(init?:Partial<ProgressBar>) {\r\n\t\tObject.assign(this, init);\r\n\t}\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "init",
                        "type": "Partial<ProgressBar>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 3,
                "jsdoctags": [
                    {
                        "name": "init",
                        "type": "Partial<ProgressBar>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "total",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Scanner",
            "id": "class-Scanner-7639cf012e47e479a87950804e5bac4998c1f6798157a16fa1c7567203594d56ce77670048b372bf332885607aa31fb239554b2654013f97c8df298b5a853732",
            "file": "src/app/pages/scanner/scanner.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { ScanType } from '@app/services/scanner.service';\r\n\r\nexport class Scanner {\r\n\ttype: ScanType\r\n}",
            "properties": [
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ScanType",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ScannerCard",
            "id": "class-ScannerCard-20ea032bed8e9714a92fe11870eff4193621d01df599b9de724481bf51d5ec0a86ce1d148a3fa1f3e2d3fd3798e0103382e9232212655115686e5bab4e17a009",
            "file": "src/app/pages/scanner/scanner-lists/scanner-list/scanner-card.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Card } from '@app/pages/cards/card/card';\r\n\r\nexport class ScannerCard extends Card {\r\n\tscan_id: number;\r\n}",
            "properties": [
                {
                    "name": "scan_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "artist",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "inheritance": {
                        "file": "Card"
                    }
                },
                {
                    "name": "attacks",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Attack[]",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "inheritance": {
                        "file": "Card"
                    }
                },
                {
                    "name": "expansion",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Expansion",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "inheritance": {
                        "file": "Card"
                    }
                },
                {
                    "name": "has_first_edition",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "inheritance": {
                        "file": "Card"
                    }
                },
                {
                    "name": "has_reverse_holo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "inheritance": {
                        "file": "Card"
                    }
                },
                {
                    "name": "has_shadowless",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 47,
                    "inheritance": {
                        "file": "Card"
                    }
                },
                {
                    "name": "hp",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 37,
                    "inheritance": {
                        "file": "Card"
                    }
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "inheritance": {
                        "file": "Card"
                    }
                },
                {
                    "name": "image",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "inheritance": {
                        "file": "Card"
                    }
                },
                {
                    "name": "image_high_res",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 34,
                    "inheritance": {
                        "file": "Card"
                    }
                },
                {
                    "name": "is_full_art",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "inheritance": {
                        "file": "Card"
                    }
                },
                {
                    "name": "is_gold",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "inheritance": {
                        "file": "Card"
                    }
                },
                {
                    "name": "is_promo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "inheritance": {
                        "file": "Card"
                    }
                },
                {
                    "name": "is_shiny",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "inheritance": {
                        "file": "Card"
                    }
                },
                {
                    "name": "last_prices",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CardLastPrices",
                    "optional": false,
                    "description": "",
                    "line": 50,
                    "inheritance": {
                        "file": "Card"
                    }
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "inheritance": {
                        "file": "Card"
                    }
                },
                {
                    "name": "number",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "inheritance": {
                        "file": "Card"
                    }
                },
                {
                    "name": "pokemon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Pokemon",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "inheritance": {
                        "file": "Card"
                    }
                },
                {
                    "name": "rarity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "inheritance": {
                        "file": "Card"
                    }
                },
                {
                    "name": "retreat_cost",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "inheritance": {
                        "file": "Card"
                    }
                },
                {
                    "name": "route",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 53,
                    "inheritance": {
                        "file": "Card"
                    }
                },
                {
                    "name": "slug",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "inheritance": {
                        "file": "Card"
                    }
                },
                {
                    "name": "sub_type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 36,
                    "inheritance": {
                        "file": "Card"
                    }
                },
                {
                    "name": "super_type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "inheritance": {
                        "file": "Card"
                    }
                },
                {
                    "name": "tempId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "inheritance": {
                        "file": "Card"
                    }
                },
                {
                    "name": "types",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 49,
                    "inheritance": {
                        "file": "Card"
                    }
                },
                {
                    "name": "user_cards",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CardCollectionItem[]",
                    "optional": false,
                    "description": "",
                    "line": 51,
                    "inheritance": {
                        "file": "Card"
                    }
                },
                {
                    "name": "weaknesses",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Weakness[]",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "inheritance": {
                        "file": "Card"
                    }
                }
            ],
            "methods": [
                {
                    "name": "getCardNumber",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "Card"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "Card",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ScannerList",
            "id": "class-ScannerList-c79ea7fc0c585060eaa395150da0c40bfe47777faaa9ad851cf5b44d485a19cd3fef3844db0b077386094e025fbbe317d490516d5489ffc3839ad38b9de6ae98",
            "file": "src/app/pages/scanner/scanner-lists/scanner-list/scanner-list.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Card } from '@app/pages/cards';\r\n\r\nexport class ScannerList {\r\n\tcards: Card[] = [];\r\n\tdate_create: Date;\r\n\r\n    constructor(init?:Partial<ScannerList>) {\r\n\t\tObject.assign(this, init);\r\n\t}\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "init",
                        "type": "Partial<ScannerList>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 5,
                "jsdoctags": [
                    {
                        "name": "init",
                        "type": "Partial<ScannerList>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "cards",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Card[]",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "date_create",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Select",
            "id": "class-Select-d4584bda25106be72c40f22ec66dfd2f95119e4f6d5a61bd12af40b7ad226318a3bf6e6a20475e73311787707e9d0bb762a46c79c1c5dee1a508a601108e044d",
            "file": "src/app/controls/select/select.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Size } from './../../models/size';\r\n\r\nexport class Select {\r\n\tlabel: string;\r\n\tvalue: string;\r\n\tvalues: string[] = [];\r\n\toptions: SelectOption[] = [];\r\n\toptionsVisible: SelectOption[] = [];\r\n\toptionGroups: SelectOptionGroup[] = [];\r\n\toptionGroupsVisible: SelectOptionGroup[] = [];\r\n\tclasses: string;\r\n\tdark: boolean;\r\n\tmultiple: boolean;\r\n\tadvancedSelect: boolean = false;\r\n\tplaceholder: string = 'Select option';\r\n\topen: boolean;\r\n\tsearchValue: string;\r\n\tsize: Size;\r\n\tchange: (value: string) => void;\r\n\r\n\tgetSelectedOptions = () => this.options.filter((option) => option.selected);\r\n\tgetUnselectedOptions = () =>\r\n\t\tthis.options.filter(\r\n\t\t\t(option) =>\r\n\t\t\t\t!option.selected &&\r\n\t\t\t\t(!this.searchValue ||\r\n\t\t\t\t\tthis.searchValue.length <= 0 ||\r\n\t\t\t\t\toption.text\r\n\t\t\t\t\t\t.toLocaleLowerCase()\r\n\t\t\t\t\t\t.includes(this.searchValue.toLocaleLowerCase()))\r\n\t\t);\r\n\r\n\tpublic constructor(init?: Partial<Select>) {\r\n\t\tObject.assign(this, init);\r\n\t\tthis.optionGroupsVisible = this.optionGroups;\r\n\t\t//this.optionsVisible = this.options;\r\n\t}\r\n}\r\nexport class SelectOption {\r\n\ttext: string;\r\n\tvalue: string;\r\n\tselected: boolean;\r\n\ticon: string;\r\n\r\n\tpublic constructor(init?: Partial<SelectOption>) {\r\n\t\tObject.assign(this, init);\r\n\t}\r\n}\r\nexport class SelectOptionGroup {\r\n\tlabel: string;\r\n\toptions: SelectOption[] = [];\r\n\r\n\tpublic constructor(init?: Partial<SelectOptionGroup>) {\r\n\t\tObject.assign(this, init);\r\n\t}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "init",
                        "type": "Partial<Select>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 31,
                "modifierKind": [
                    123
                ],
                "jsdoctags": [
                    {
                        "name": "init",
                        "type": "Partial<Select>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "advancedSelect",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "change",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "classes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "dark",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "getSelectedOptions",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "getUnselectedOptions",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "multiple",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "open",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "optionGroups",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SelectOptionGroup[]",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "optionGroupsVisible",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SelectOptionGroup[]",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "options",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SelectOption[]",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "optionsVisible",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SelectOption[]",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "placeholder",
                    "defaultValue": "'Select option'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "searchValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Size",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "values",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "SelectOption",
            "id": "class-SelectOption-d4584bda25106be72c40f22ec66dfd2f95119e4f6d5a61bd12af40b7ad226318a3bf6e6a20475e73311787707e9d0bb762a46c79c1c5dee1a508a601108e044d",
            "file": "src/app/controls/select/select.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Size } from './../../models/size';\r\n\r\nexport class Select {\r\n\tlabel: string;\r\n\tvalue: string;\r\n\tvalues: string[] = [];\r\n\toptions: SelectOption[] = [];\r\n\toptionsVisible: SelectOption[] = [];\r\n\toptionGroups: SelectOptionGroup[] = [];\r\n\toptionGroupsVisible: SelectOptionGroup[] = [];\r\n\tclasses: string;\r\n\tdark: boolean;\r\n\tmultiple: boolean;\r\n\tadvancedSelect: boolean = false;\r\n\tplaceholder: string = 'Select option';\r\n\topen: boolean;\r\n\tsearchValue: string;\r\n\tsize: Size;\r\n\tchange: (value: string) => void;\r\n\r\n\tgetSelectedOptions = () => this.options.filter((option) => option.selected);\r\n\tgetUnselectedOptions = () =>\r\n\t\tthis.options.filter(\r\n\t\t\t(option) =>\r\n\t\t\t\t!option.selected &&\r\n\t\t\t\t(!this.searchValue ||\r\n\t\t\t\t\tthis.searchValue.length <= 0 ||\r\n\t\t\t\t\toption.text\r\n\t\t\t\t\t\t.toLocaleLowerCase()\r\n\t\t\t\t\t\t.includes(this.searchValue.toLocaleLowerCase()))\r\n\t\t);\r\n\r\n\tpublic constructor(init?: Partial<Select>) {\r\n\t\tObject.assign(this, init);\r\n\t\tthis.optionGroupsVisible = this.optionGroups;\r\n\t\t//this.optionsVisible = this.options;\r\n\t}\r\n}\r\nexport class SelectOption {\r\n\ttext: string;\r\n\tvalue: string;\r\n\tselected: boolean;\r\n\ticon: string;\r\n\r\n\tpublic constructor(init?: Partial<SelectOption>) {\r\n\t\tObject.assign(this, init);\r\n\t}\r\n}\r\nexport class SelectOptionGroup {\r\n\tlabel: string;\r\n\toptions: SelectOption[] = [];\r\n\r\n\tpublic constructor(init?: Partial<SelectOptionGroup>) {\r\n\t\tObject.assign(this, init);\r\n\t}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "init",
                        "type": "Partial<SelectOption>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 43,
                "modifierKind": [
                    123
                ],
                "jsdoctags": [
                    {
                        "name": "init",
                        "type": "Partial<SelectOption>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "selected",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 41
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "SelectOptionGroup",
            "id": "class-SelectOptionGroup-d4584bda25106be72c40f22ec66dfd2f95119e4f6d5a61bd12af40b7ad226318a3bf6e6a20475e73311787707e9d0bb762a46c79c1c5dee1a508a601108e044d",
            "file": "src/app/controls/select/select.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Size } from './../../models/size';\r\n\r\nexport class Select {\r\n\tlabel: string;\r\n\tvalue: string;\r\n\tvalues: string[] = [];\r\n\toptions: SelectOption[] = [];\r\n\toptionsVisible: SelectOption[] = [];\r\n\toptionGroups: SelectOptionGroup[] = [];\r\n\toptionGroupsVisible: SelectOptionGroup[] = [];\r\n\tclasses: string;\r\n\tdark: boolean;\r\n\tmultiple: boolean;\r\n\tadvancedSelect: boolean = false;\r\n\tplaceholder: string = 'Select option';\r\n\topen: boolean;\r\n\tsearchValue: string;\r\n\tsize: Size;\r\n\tchange: (value: string) => void;\r\n\r\n\tgetSelectedOptions = () => this.options.filter((option) => option.selected);\r\n\tgetUnselectedOptions = () =>\r\n\t\tthis.options.filter(\r\n\t\t\t(option) =>\r\n\t\t\t\t!option.selected &&\r\n\t\t\t\t(!this.searchValue ||\r\n\t\t\t\t\tthis.searchValue.length <= 0 ||\r\n\t\t\t\t\toption.text\r\n\t\t\t\t\t\t.toLocaleLowerCase()\r\n\t\t\t\t\t\t.includes(this.searchValue.toLocaleLowerCase()))\r\n\t\t);\r\n\r\n\tpublic constructor(init?: Partial<Select>) {\r\n\t\tObject.assign(this, init);\r\n\t\tthis.optionGroupsVisible = this.optionGroups;\r\n\t\t//this.optionsVisible = this.options;\r\n\t}\r\n}\r\nexport class SelectOption {\r\n\ttext: string;\r\n\tvalue: string;\r\n\tselected: boolean;\r\n\ticon: string;\r\n\r\n\tpublic constructor(init?: Partial<SelectOption>) {\r\n\t\tObject.assign(this, init);\r\n\t}\r\n}\r\nexport class SelectOptionGroup {\r\n\tlabel: string;\r\n\toptions: SelectOption[] = [];\r\n\r\n\tpublic constructor(init?: Partial<SelectOptionGroup>) {\r\n\t\tObject.assign(this, init);\r\n\t}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "init",
                        "type": "Partial<SelectOptionGroup>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 51,
                "modifierKind": [
                    123
                ],
                "jsdoctags": [
                    {
                        "name": "init",
                        "type": "Partial<SelectOptionGroup>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "options",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SelectOption[]",
                    "optional": false,
                    "description": "",
                    "line": 51
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Series",
            "id": "class-Series-1e54cd66cc1376ffc63728eb970a6f5919a3d610c920329e229c3f998a617ae2b57eca67aac6b41836f88f9b528412b30e0278e735ac5c0d66624ce85df890e2",
            "file": "src/app/pages/expansions/expansion/expansion.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Select, SelectOption, SelectOptionGroup } from '@app/controls';\r\nimport { ItemsFilter, ItemsFooter } from '@app/layout/main';\r\nimport { Card } from '@app/pages/cards';\r\n\r\nexport class Expansion {\r\n\tid: number;\r\n\tname: string;\r\n\tcode: string;\r\n\tptcgo_code?: string;\r\n\tseries: Series;\r\n\tstandard_legal: boolean;\r\n\texpanded_legal: boolean;\r\n\ttotal_cards: number;\r\n\trelease_date: Date;\r\n\tsymbol: string;\r\n\tlogo: string;\r\n\tprogress: number = 17;\r\n\r\n\troute: string;\r\n\tcards: Card[] = [];\r\n\r\n\tconstructor(init?: Partial<Expansion>) {\r\n\t\tObject.assign(this, init);\r\n\r\n\t\t// Route\r\n\t\tthis.route = `/expansions/${this.code}`;\r\n\r\n\t\t// Initalize cards\r\n\t\tif (init.cards) {\r\n\t\t\tthis.cards = [];\r\n\t\t\tinit.cards.forEach((card) => {\r\n\t\t\t\tthis.cards.push(new Card(card));\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport class Series {\r\n\tid: number;\r\n\tname: string;\r\n\texpansions: Expansion[] = [];\r\n\r\n\tconstructor(init?: Partial<Series>) {\r\n\t\tObject.assign(this, init);\r\n\r\n\t\t// Initalize expanions\r\n\t\tif (init.expansions) {\r\n\t\t\tthis.expansions = [];\r\n\t\t\tinit.expansions.forEach((expansion) => {\r\n\t\t\t\tthis.expansions.push(new Expansion(expansion));\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport function SetSortByExpansions(itemFilter: ItemsFilter) {\r\n\titemFilter.selectSortBy.optionGroups[0] = new SelectOptionGroup({\r\n\t\tlabel: 'Sort By',\r\n\t\toptions: [\r\n\t\t\tnew SelectOption({\r\n\t\t\t\ttext: 'Release Date',\r\n\t\t\t\tvalue: 'expansion.release_date',\r\n\t\t\t}),\r\n\t\t],\r\n\t});\r\n\titemFilter.selectSortBy.value = 'expansion.release_date';\r\n}\r\n\r\nexport function SetSortByExpansion(itemFilter: ItemsFilter) {\r\n\titemFilter.selectSortBy.optionGroups[0] = new SelectOptionGroup({\r\n\t\tlabel: 'Sort By',\r\n\t\toptions: [\r\n\t\t\tnew SelectOption({\r\n\t\t\t\ttext: 'Number',\r\n\t\t\t\tvalue: 'number',\r\n\t\t\t}),\r\n\t\t\tnew SelectOption({\r\n\t\t\t\ttext: 'Name',\r\n\t\t\t\tvalue: 'name',\r\n\t\t\t}),\r\n\t\t],\r\n\t});\r\n\titemFilter.selectSortBy.value = 'number';\r\n}\r\n\r\nexport function SetPageSize(itemFooter: ItemsFooter) {\r\n\titemFooter.selectPageSize.value = itemFooter.pageSize.toString();\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "init",
                        "type": "Partial<Series>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 41,
                "jsdoctags": [
                    {
                        "name": "init",
                        "type": "Partial<Series>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "expansions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Expansion[]",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 40
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "SeriesFactory",
            "id": "class-SeriesFactory-a9d4397c7bbd3289a35a713e7710af243a266bc6e9181f3a7522ea6b3b60a9a78b751c5eef6e7de679d4712e00c5c07fa64c865103f6e125443f7c3cd23481bc",
            "file": "src/app/services/factory/expansion.factory.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Expansion, Series } from \"../../pages/expansions/expansion/expansion\";\r\n\r\nexport class ExpansionFactory {\r\n\texpansions = [\r\n\t\t{\r\n\t\t\tname: \"Battle Styles\",\r\n\t\t\tlogo: \"https://pod.pokellector.com/logos/Battle-Styles.logo.305.png\",\r\n\t\t\trelease_date: new Date(),\r\n\t\t\tcode: \"battle-styles\"\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Vivid Voltage\",\r\n\t\t\tlogo: \"https://pod.pokellector.com/logos/Vivid-Voltage.logo.299.png\",\r\n\t\t\trelease_date: new Date(),\r\n\t\t\tcode: \"vivid-voltage\"\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Cosmic Eclipse\",\r\n\t\t\tlogo: \"https://pod.pokellector.com/logos/Cosmic-Eclipse.logo.280.png\",\r\n\t\t\trelease_date: new Date(),\r\n\t\t\tcode: \"cosmic-eclipse\"\r\n\t\t}\r\n\t]\r\n\tcreateExpasion() {\r\n\t\treturn new Expansion(this.expansions[Math.floor(Math.random() * this.expansions.length)]);\r\n\t}\r\n}\r\n\r\nexport class SeriesFactory {\r\n\tseries = [\r\n\t\t{\r\n\t\t\tname: \"Sword & Shield\",\r\n\t\t\tid: 1\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Sun & Moon\",\r\n\t\t\tid: 2\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"XY\",\r\n\t\t\tid: 3\r\n\t\t}\r\n\t]\r\n\tcreateSeries(seriesCount: number = 1, expansionCount: number = 0): Series[] {\r\n\t\tvar series = [];\r\n\t\tArray.from(Array(seriesCount)).forEach(() => {\r\n\t\t\tvar randomSeries = new Series(this.series[Math.floor(Math.random() * this.series.length)]);\r\n\t\t\tif (expansionCount > 0) {\r\n\t\t\t\tvar factory = new ExpansionFactory();\r\n\t\t\t\tArray.from(Array(expansionCount)).forEach(() => {\r\n\t\t\t\t\trandomSeries.expansions.push(factory.createExpasion());\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\tseries.push(randomSeries);\r\n\t\t});\r\n\t\treturn series;\r\n\t}\r\n}",
            "properties": [
                {
                    "name": "series",
                    "defaultValue": "[\r\n\t\t{\r\n\t\t\tname: \"Sword & Shield\",\r\n\t\t\tid: 1\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Sun & Moon\",\r\n\t\t\tid: 2\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"XY\",\r\n\t\t\tid: 3\r\n\t\t}\r\n\t]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 30
                }
            ],
            "methods": [
                {
                    "name": "createSeries",
                    "args": [
                        {
                            "name": "seriesCount",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "1"
                        },
                        {
                            "name": "expansionCount",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0"
                        }
                    ],
                    "optional": false,
                    "returnType": "Series[]",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "seriesCount",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "1",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "expansionCount",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Tag",
            "id": "class-Tag-4109c432a440336aa6c8420938757d1c412d749482c45f1c2d770b3d7404af3cb5e3c07c7465462efb90ff9ebad475ea36da5a070eaf4bc02f5abbd91578db59",
            "file": "src/app/controls/tag/tag.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class Tag {\r\n\ttext: string;\r\n\tclasses: string = \"\";\r\n\troute: string;\r\n\ticon: string;\r\n\r\n    public constructor(init?:Partial<Tag>) {\r\n        Object.assign(this, init);\r\n\t}\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "init",
                        "type": "Partial<Tag>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 5,
                "modifierKind": [
                    123
                ],
                "jsdoctags": [
                    {
                        "name": "init",
                        "type": "Partial<Tag>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "classes",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "route",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Textarea",
            "id": "class-Textarea-aa8618ab4109b87a7696d2d7991e04f294008d280e14eae1533881e207692194aee80efb528bfad90870de9b263e4f5f834140565317b008513d355e5731fcd0",
            "file": "src/app/controls/textarea/textarea.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class Textarea {\r\n\tvalue: string;\r\n\tlabel: string;\r\n\tplaceholder: string;\r\n\twidth: number;\r\n\tclasses: string;\r\n\tdisabled: boolean;\r\n\r\n\tkeydownEnter: (value: string) => void;\r\n\tchange: (value: string) => void;\r\n\r\n\tpublic constructor(init?: Partial<Textarea>) {\r\n\t\tObject.assign(this, init);\r\n\t}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "init",
                        "type": "Partial<Textarea>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 10,
                "modifierKind": [
                    123
                ],
                "jsdoctags": [
                    {
                        "name": "init",
                        "type": "Partial<Textarea>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "change",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "classes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "keydownEnter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "placeholder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "width",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Textbox",
            "id": "class-Textbox-87145d26310b6c41d15ef2e19264c18ae60d809692b3b9aed9a3dc14ade0be0d8fcfe8d44252a5cbb980e53e7a2e72012a6bad0080971360df7f8e151f0dd9f2",
            "file": "src/app/controls/textbox/textbox.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Icons } from '@app/models/icons';\r\nimport { Size } from './../../models/size';\r\n\r\nexport class Textbox {\r\n\tvalue: string = '';\r\n\tlabel: string;\r\n\ttype: string = 'text';\r\n\tvalid: boolean;\r\n\tmin: number;\r\n\tmax: number;\r\n\tinteger: boolean;\r\n\ticon?: Icons;\r\n\tplaceholder: string;\r\n\twidth: number;\r\n\tclasses: string;\r\n\twrapperClasses: string;\r\n\tdisabled: boolean;\r\n\treadOnly: boolean;\r\n\tclearable: boolean;\r\n\tcolorPicker: boolean;\r\n\tautoComplete: boolean;\r\n\tdark: boolean;\r\n\tsize: Size;\r\n\r\n\tkeyup: (value: string) => void;\r\n\tkeydown: (value: string) => void;\r\n\tkeydownEnter: (value: string) => void;\r\n\tclickIcon: (value: string) => void;\r\n\tchange: (value: string) => void;\r\n\r\n\tclickClear: () => void;\r\n\tclear = () => {\r\n\t\tthis.value = '';\r\n\t};\r\n\r\n\tpublic constructor(init?: Partial<Textbox>) {\r\n\t\tObject.assign(this, init);\r\n\t}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "init",
                        "type": "Partial<Textbox>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 34,
                "modifierKind": [
                    123
                ],
                "jsdoctags": [
                    {
                        "name": "init",
                        "type": "Partial<Textbox>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "autoComplete",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "change",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "classes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "clear",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "clearable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "clickClear",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "clickIcon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "colorPicker",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "dark",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Icons",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "integer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "keydown",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "keydownEnter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "keyup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "max",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "min",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "placeholder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "readOnly",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Size",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "type",
                    "defaultValue": "'text'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "valid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "value",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "width",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "wrapperClasses",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Toggle",
            "id": "class-Toggle-7b889f4495649b0c2faaa8219229379dee1cc385c9bcbc29c3b52e8fae8098bc56546d1caed4dc3eeb9f8e2d7857d151f2fa4f9227e4974339800a0e1fd1d772",
            "file": "src/app/controls/toggle/toggle.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class Toggle {\r\n\tchecked: boolean = false;\r\n\ttext: string;\r\n\ttextChecked: string;\r\n\tlabel: string;\r\n\tdisabled: boolean;\r\n\r\n    public constructor(init?:Partial<Toggle>) {\r\n\t\tObject.assign(this, init);\r\n    }\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "init",
                        "type": "Partial<Toggle>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 6,
                "modifierKind": [
                    123
                ],
                "jsdoctags": [
                    {
                        "name": "init",
                        "type": "Partial<Toggle>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "checked",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "textChecked",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "TypeTag",
            "id": "class-TypeTag-680d3c163465d2a1ef2ff8eb4f8df13c27193ccc49f48784da6b3f16a8a8a3717a9f3a199209a37594392e5b2c92476aa0c346d63e4954ac856f9291908bfc64",
            "file": "src/app/controls/type-tag/type-tag.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class TypeTag {\r\n\ttext: string;\r\n\ttype: string = '';\r\n\troute: string;\r\n\r\n\tpublic constructor(init?: Partial<TypeTag>) {\r\n\t\tObject.assign(this, init);\r\n\t\tthis.route = this.type && `/pokemon/type/${this.type.toLowerCase()}`;\r\n\t}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "init",
                        "type": "Partial<TypeTag>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 4,
                "modifierKind": [
                    123
                ],
                "jsdoctags": [
                    {
                        "name": "init",
                        "type": "Partial<TypeTag>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "route",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "type",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "UpdateUserCard",
            "id": "class-UpdateUserCard-ebad570d3086c784ade077f3e5a967e4e25809b58ed5c73d5c17e6fa715a35546a3940a0941a66b10fa5b1df26a241d03a3c08a27d09e0cdec52a038e9b8b70d",
            "file": "src/app/components/card-collection/card-collection.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { APIResponse, buildUrl } from './../../models/api';\r\nimport { CardResults, GetCards } from './../../services/cards.service';\r\n\r\nimport { AuthenticationService } from '@app/services/auth.service';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { Card } from './../../pages/cards/card/card';\r\nimport { CardCollectionItem } from './card-collection-item/card-collection-item';\r\nimport { Condition } from './../../models/condition';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { HttpParams } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { environment } from './../../../environments/environment';\r\nimport { map } from 'rxjs/operators';\r\n\r\nexport class UpdateUserCard {\r\n\tuser_card_id: number;\r\n\tcondition: string;\r\n\tgraded_by: string;\r\n\tprinting: string;\r\n\tnotes: string;\r\n\tconstructor(init?: Partial<UpdateUserCard>) {\r\n\t\tObject.assign(this, init);\r\n\t}\r\n}\r\n\r\nexport class AddUserCard {\r\n\tcard_id: number;\r\n\tcard_group_id?: number;\r\n\tcondition: string;\r\n\tgraded_by: string;\r\n\tprinting: string;\r\n\tnotes: string;\r\n\tdate_obtained: Date;\r\n\tpurchase_price: number;\r\n\tconstructor(init?: Partial<AddUserCard>) {\r\n\t\tObject.assign(this, init);\r\n\t}\r\n}\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class UserCardsService {\r\n\tconstructor(private http: HttpClient) {}\r\n\r\n\t// Get user cards\r\n\tprivate getUserCardsSubject = new BehaviorSubject<CardResults>(null);\r\n\tgetUserCardsObservable() {\r\n\t\tthis.getUserCardsSubject = new BehaviorSubject<CardResults>(null);\r\n\t\treturn this.getUserCardsSubject.asObservable();\r\n\t}\r\n\tgetUserCards(params: GetCards) {\r\n\t\tvar url = params.buildUrl('user-cards');\r\n\t\tthis.http.get<APIResponse>(url).subscribe((res) => {\r\n\t\t\tthis.getUserCardsSubject.next({\r\n\t\t\t\tcards: res.data.map((card) => {\r\n\t\t\t\t\tnew Card(card);\r\n\t\t\t\t}),\r\n\t\t\t\ttotal_pages: res.meta.last_page,\r\n\t\t\t\ttotal_results: res.meta.total,\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\r\n\t// Get card user cards\r\n\tprivate getCardUserCardsSubject = new BehaviorSubject<CardCollectionItem[]>(\r\n\t\tnull\r\n\t);\r\n\tgetCardUserCardsObservable() {\r\n\t\tthis.getCardUserCardsSubject = new BehaviorSubject<\r\n\t\t\tCardCollectionItem[]\r\n\t\t>(null);\r\n\t\treturn this.getCardUserCardsSubject.asObservable();\r\n\t}\r\n\tgetCardUserCards(slug: string) {\r\n\t\tvar url = buildUrl('user-cards/' + slug);\r\n\t\tthis.http.get<APIResponse>(url).subscribe((res) => {\r\n\t\t\tthis.getCardUserCardsSubject.next(\r\n\t\t\t\tres.data.map((userCard) => new CardCollectionItem(userCard))\r\n\t\t\t);\r\n\t\t});\r\n\t}\r\n\r\n\t// Add user card\r\n\tprivate addUserCardSubject = new BehaviorSubject<CardCollectionItem>(null);\r\n\taddUserCardObservable() {\r\n\t\tthis.addUserCardSubject = new BehaviorSubject<CardCollectionItem>(null);\r\n\t\treturn this.addUserCardSubject.asObservable();\r\n\t}\r\n\taddUserCard(userCard: CardCollectionItem) {\r\n\t\tthis.http\r\n\t\t\t.post<APIResponse>(buildUrl('user-cards/create'), {\r\n\t\t\t\t...userCard,\r\n\t\t\t})\r\n\t\t\t.subscribe((res) => {\r\n\t\t\t\tif (res.success) this.addUserCardSubject.next(userCard);\r\n\t\t\t});\r\n\t}\r\n\r\n\t// Remove user card\r\n\tremoveUserCard(user_card_id: number) {\r\n\t\treturn this.http.post<APIResponse>(buildUrl('user-cards/delete'), {\r\n\t\t\tuser_card_id,\r\n\t\t});\r\n\t}\r\n\r\n\t// Update user card\r\n\tupdateUserCard(userCard: CardCollectionItem) {\r\n\t\treturn this.http.post<APIResponse>(\r\n\t\t\tbuildUrl('user-cards/update'),\r\n\t\t\tuserCard\r\n\t\t);\r\n\t}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "init",
                        "type": "Partial<UpdateUserCard>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "init",
                        "type": "Partial<UpdateUserCard>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "condition",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "graded_by",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "notes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "printing",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "user_card_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "User",
            "id": "class-User-46509da251cbf42ca05d4891448ab597217666cca256bac5a5199adbd3b5c349d268deb6660e78b31a084a0eb8cf60b46730dfa1bf1a88a75d217781cca755f3",
            "file": "src/app/models/user.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class User {\r\n\tid: number;\r\n\tusername: string;\r\n\temail: string;\r\n\temail_verified_at?: Date;\r\n\temail_verify_token: string;\r\n\tcreated_at: Date;\r\n\tupdated_at: Date;\r\n\tfull_name?: string;\r\n\timage?: string;\r\n\tbio?: string;\r\n\treputation: number;\r\n\tpatreon_id?: number;\r\n\tpatreon_status?: string;\r\n\tpatreon_tier?: string;\r\n\r\n\t// Authentication\r\n\ttoken?: string;\r\n\texpires_at?: Date;\r\n\r\n\tpublic constructor(init?: Partial<User>) {\r\n\t\tObject.assign(this, init);\r\n\t}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "init",
                        "type": "Partial<User>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 19,
                "modifierKind": [
                    123
                ],
                "jsdoctags": [
                    {
                        "name": "init",
                        "type": "Partial<User>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "bio",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "created_at",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "email_verified_at",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "email_verify_token",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "expires_at",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": true,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "full_name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "image",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "patreon_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "patreon_status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "patreon_tier",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "reputation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "token",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "updated_at",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "username",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Weakness",
            "id": "class-Weakness-f5f2f36ddb9717c858a28de3fe93b1f4ca862a989ae6c9b55079d748e35e740031824a503766846e132d58bc5700fbcc7938cfb92cb36ce08da9860edd9e05df",
            "file": "src/app/pages/cards/card/card.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { CardCollectionItem } from './../../../components/card-collection/card-collection-item/card-collection-item';\r\nimport { Select, SelectOption, SelectOptionGroup } from '@app/controls';\r\nimport { Menu } from '@app/controls/menu';\r\nimport '@app/helpers/string.extensions';\r\nimport { ItemsFilter } from '@app/layout';\r\nimport { Icons } from '@app/models';\r\nimport { Expansion } from '@app/pages/expansions';\r\nimport { Pokemon } from '@app/pages/pokemons/pokemon/pokemon';\r\n\r\nexport const DEFAULT_IMAGE = '/assets/back.jpg';\r\n\r\nexport class Weakness {\r\n\ttype: string;\r\n\tvalue: string;\r\n}\r\n\r\nexport class Attack {\r\n\tcost: string[] = [];\r\n\tname: string;\r\n\ttext: string;\r\n\tdamage: number;\r\n\tconvertedEnergyCost: number;\r\n}\r\n\r\nexport class Card {\r\n\tid: number;\r\n\tname: string;\r\n\tslug: string;\r\n\tpokemon: Pokemon;\r\n\texpansion: Expansion;\r\n\tnumber: string;\r\n\trarity: string;\r\n\timage: string;\r\n\timage_high_res?: string;\r\n\tsuper_type: string;\r\n\tsub_type?: string;\r\n\thp?: number;\r\n\tretreat_cost: string[] = [];\r\n\tweaknesses: Weakness[] = [];\r\n\tattacks: Attack[] = [];\r\n\tartist: string;\r\n\tis_shiny: boolean;\r\n\tis_promo: boolean;\r\n\tis_full_art: boolean;\r\n\tis_gold: boolean;\r\n\thas_first_edition: boolean;\r\n\thas_shadowless: boolean;\r\n\thas_reverse_holo: boolean;\r\n\ttypes: string[] = [];\r\n\tlast_prices: CardLastPrices;\r\n\tuser_cards: CardCollectionItem[] = [];\r\n\r\n\troute: string;\r\n\ttempId: number;\r\n\r\n\tgetCardNumber(): string {\r\n\t\t// IS number\r\n\t\tif (!isNaN(+this.number)) {\r\n\t\t\tlet x = `${this.number}`;\r\n\t\t\tlet y = `${this.expansion.total_cards}`;\r\n\t\t\tlet pad = '000';\r\n\t\t\tlet xFormatted = pad.substring(0, pad.length - x.length) + x;\r\n\t\t\tlet yFormatted = pad.substring(0, pad.length - y.length) + y;\r\n\t\t\treturn `${xFormatted}/${yFormatted}`;\r\n\t\t}\r\n\t\t// NOT number (promo)\r\n\t\telse {\r\n\t\t\treturn this.number;\r\n\t\t}\r\n\t}\r\n\r\n\tconstructor(init?: Partial<Card>) {\r\n\t\tObject.assign(this, init);\r\n\r\n\t\t// Route\r\n\t\tthis.route = '/cards/' + this.slug;\r\n\r\n\t\t// Initalize expansion\r\n\t\tif (init.expansion) {\r\n\t\t\tthis.expansion = new Expansion(init.expansion);\r\n\t\t}\r\n\r\n\t\t// Initalize pokemon\r\n\t\tif (init.pokemon) {\r\n\t\t\tthis.pokemon = new Pokemon(init.pokemon);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport class CardLastPrices {\r\n\tcard_id: number;\r\n\tcondition: string;\r\n\tcreated_at: Date;\r\n\tdirect_price: string;\r\n\thigh_price: number;\r\n\tid: number;\r\n\tlow_price: number;\r\n\tmarket_price: number;\r\n\tmid_price: number;\r\n\tsource: string;\r\n\tupdated_at: Date;\r\n\tvariation: string;\r\n\r\n\tconstructor(init?: Partial<CardLastPrices>) {\r\n\t\tObject.assign(this, init);\r\n\t}\r\n}\r\n\r\nexport class CardGroup {\r\n\ttitle: string;\r\n\ticon: Icons;\r\n\tcards: Card[] = [];\r\n\tcount: number = 0;\r\n\tconstructor(init?: Partial<CardGroup>) {\r\n\t\tObject.assign(this, init);\r\n\t}\r\n}\r\n\r\nexport class CardCount {\r\n\tget count(): number {\r\n\t\treturn this.cards.length;\r\n\t}\r\n\tcards: Card[] = [];\r\n\tconstructor(init?: Partial<CardCount>) {\r\n\t\tObject.assign(this, init);\r\n\t}\r\n}\r\n\r\nexport function SetSortByCards(itemFilter: ItemsFilter) {\r\n\titemFilter.selectSortBy.optionGroups[0] = new SelectOptionGroup({\r\n\t\tlabel: 'Sort By',\r\n\t\toptions: [\r\n\t\t\tnew SelectOption({\r\n\t\t\t\ttext: 'Number',\r\n\t\t\t\tvalue: 'number',\r\n\t\t\t}),\r\n\t\t\tnew SelectOption({\r\n\t\t\t\ttext: 'Name',\r\n\t\t\t\tvalue: 'name',\r\n\t\t\t}),\r\n\t\t\t// new SelectOption({\r\n\t\t\t// \ttext: 'Price',\r\n\t\t\t// \tvalue: 'price',\r\n\t\t\t// }),\r\n\t\t\tnew SelectOption({\r\n\t\t\t\ttext: 'Release Date',\r\n\t\t\t\tvalue: 'release_date',\r\n\t\t\t}),\r\n\t\t\t// new SelectOption({\r\n\t\t\t// \ttext: 'Rarity',\r\n\t\t\t// \tvalue: 'rarity',\r\n\t\t\t// }),\r\n\t\t],\r\n\t});\r\n\titemFilter.selectSortBy.value = 'number';\r\n}\r\n",
            "properties": [
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [
        {
            "name": "ClickOutsideDirective",
            "id": "directive-ClickOutsideDirective-bd0a27a78531c6ad120af2f2eb8494b0418ba616beb60c4650cc72eaa5a73f5b2f8ab9aaba460846d1f07412cc3147047bc9b28236a649536490fb0de14d3766",
            "file": "src/app/helpers/clickOutside.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, Output, EventEmitter, ElementRef, HostListener } from '@angular/core';\r\n\r\n@Directive({\r\n\tselector: '[clickOutside]',\r\n})\r\nexport class ClickOutsideDirective {\r\n\r\n\t@Output() clickOutside = new EventEmitter<void>();\r\n\r\n\tconstructor(private elementRef: ElementRef) { }\r\n\r\n\t@HostListener('document:click', ['$event.target'])\r\n\tpublic onClick(target) {\r\n\t\tconst clickedInside = this.elementRef.nativeElement.contains(target);\r\n\t\tif (!clickedInside) {\r\n\t\t\tthis.clickOutside.emit();\r\n\t\t}\r\n\t}\r\n}",
            "selector": "[clickOutside]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "clickOutside",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 8,
                    "type": "EventEmitter"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "document:click",
                    "args": [
                        {
                            "name": "target",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event.target"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onClick",
                    "args": [
                        {
                            "name": "target",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'document:click', ['$event.target']"
                        }
                    ],
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "target",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        }
    ],
    "components": [
        {
            "name": "AlertComponent",
            "id": "component-AlertComponent-e6aadd5dcf71148614a6111713e1904f31cb363a776b3fb8378dc0d1e3e5746e812b368e0bbf9540ff2284ca589799d1b5263063dc4878aaaf0b25e2a5c78083",
            "file": "src/app/controls/alert/alert.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "mb-alert",
            "styleUrls": [
                "./alert.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "alert.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "alert",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "Alert",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input } from '@angular/core';\r\nimport { Alert } from './alert';\r\n\r\n@Component({\r\n\tselector: 'mb-alert',\r\n\ttemplateUrl: 'alert.component.html',\r\n\tstyleUrls: ['./alert.component.scss']\r\n})\r\n\r\nexport class AlertComponent implements OnInit {\r\n\r\n\t@Input() alert: Alert;\r\n\r\n\tconstructor() { }\r\n\r\n\tngOnInit() { }\r\n\r\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"settings\";\r\n\r\n.alert {\r\n\tpadding: $spacing ($spacing * 2);\r\n\tborder: $border;\r\n\tborder-radius: $border-radius-small;\r\n\tbackground: rgba($grey, 0.5);\r\n\tbox-shadow: $shadow-sheen;\r\n\tcolor: rgba(black, 0.6);\r\n}\r\n",
                    "styleUrl": "./alert.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 12
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div\r\n\tclass=\"alert {{alert.type}}\"\r\n\t[innerHtml]=\"alert.message\">\r\n</div>"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-87d57a5b50778469740ef92fdf134d813f1cbb2400d0d8e3a79fb0ed13aa98dcd8f2df5b126a027bcafe24562b64894ad253be19aa4a97116cc699f43b0fd5d6",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Dialog",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "menuItemTools",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MenuItem",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "showMenu",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "showScrollToTop",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "theme",
                    "defaultValue": "'dark'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "transparentHeader",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onPopState",
                    "args": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'window:popstate', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onWindowScroll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'window:scroll', undefined"
                        }
                    ]
                },
                {
                    "name": "scrollToTop",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "window:popstate",
                    "args": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 83
                },
                {
                    "name": "window:scroll",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 76
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n\tComponent,\r\n\tOnInit,\r\n\tChangeDetectorRef,\r\n\tHostListener,\r\n} from '@angular/core';\r\nimport { MenuItem } from '@app/controls/menu';\r\nimport { LoaderService } from './controls';\r\nimport { NavigationEnd, Router, RoutesRecognized } from '@angular/router';\r\nimport { Dialog } from './controls/dialog/dialog';\r\nimport { DialogService } from './controls/dialog/dialog.service';\r\n\r\n@Component({\r\n\tselector: 'app-root',\r\n\ttemplateUrl: './app.component.html',\r\n\tstyleUrls: ['./app.component.scss'],\r\n})\r\nexport class AppComponent implements OnInit {\r\n\ttheme: string = 'dark';\r\n\tshowMenu: boolean = true;\r\n\tloading: boolean = false;\r\n\tdialog: Dialog;\r\n\tmenuItemTools: MenuItem;\r\n\ttransparentHeader: boolean;\r\n\tshowScrollToTop: boolean;\r\n\r\n\tconstructor(\r\n\t\tprivate cdRef: ChangeDetectorRef,\r\n\t\tprivate router: Router,\r\n\t\tprivate loaderService: LoaderService,\r\n\t\tprivate dialogService: DialogService\r\n\t) {}\r\n\r\n\tngOnInit() {\r\n\t\t// Loader\r\n\t\tthis.loaderService.loading\r\n\t\t\t.asObservable()\r\n\t\t\t.subscribe((loading: boolean) => {\r\n\t\t\t\tif (this.loading != loading) {\r\n\t\t\t\t\tthis.loading = loading;\r\n\t\t\t\t\tthis.cdRef.detectChanges();\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t// Dialog\r\n\t\tthis.dialogService.dialog.asObservable().subscribe((dialog: Dialog) => {\r\n\t\t\tif (dialog) {\r\n\t\t\t\tthis.dialog = dialog;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\t// Scroll to top\r\n\t\tthis.router.events.subscribe((event) => {\r\n\t\t\tif (!(event instanceof NavigationEnd)) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tthis.scrollToTop();\r\n\t\t});\r\n\r\n\t\t// Transparent header\r\n\t\tthis.router.events.subscribe((data) => {\r\n\t\t\tif (data instanceof RoutesRecognized) {\r\n\t\t\t\tthis.transparentHeader = data.state.root.firstChild.data[\r\n\t\t\t\t\t'transparentHeader'\r\n\t\t\t\t] as boolean;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\t// Theme\r\n\t\tlet body = document.getElementsByTagName('body')[0];\r\n\t\tbody.classList.add('theme');\r\n\t\tbody.classList.add('dark');\r\n\t}\r\n\r\n\t@HostListener('window:scroll', [])\r\n\tonWindowScroll() {\r\n\t\tthis.showScrollToTop =\r\n\t\t\tdocument.body.scrollTop > 20 ||\r\n\t\t\tdocument.documentElement.scrollTop > 20;\r\n\t}\r\n\r\n\t@HostListener('window:popstate', ['$event'])\r\n\tonPopState(event) {\r\n\t\tthis.dialog.close();\r\n\t}\r\n\r\n\tscrollToTop() {\r\n\t\twindow.scrollTo(0, 0);\r\n\t}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"settings\";\r\n\r\n:host {\r\n\tdisplay: flex;\r\n\tflex-direction: column;\r\n\tflex: 1 0 0;\r\n\tz-index: 1;\r\n\tposition: relative;\r\n}\r\n\r\n#menu {\r\n\twidth: 100%;\r\n\tborder-bottom: $border;\r\n\tbackground: $menu-bg;\r\n\ta {\r\n\t\tcolor: white;\r\n\t}\r\n}\r\n\r\n#main {\r\n\tbackground-color: $main-bg;\r\n\tflex: 1;\r\n\tposition: relative;\r\n\tz-index: 1;\r\n\t@media (max-width: $screen-medium) {\r\n\t\tpadding-top: $header-height;\r\n\t}\r\n}\r\n\r\n.scrollTop {\r\n\tborder-radius: 999px;\r\n\tpadding: $spacing * 2.5;\r\n\twidth: 64px;\r\n\theight: 64px;\r\n\tposition: fixed;\r\n\tbottom: 32px;\r\n\tright: 32px;\r\n\tbackground: $secondary-color;\r\n\tcolor: white;\r\n\tbox-shadow: $shadow;\r\n\tcursor: pointer;\r\n\tz-index: 10;\r\n\t&:hover {\r\n\t\tbox-shadow: $shadow-large;\r\n\t}\r\n\t@media (max-width: $screen-medium) {\r\n\t\tbottom: 100px;\r\n\t}\r\n}\r\n\r\nmb-loader ::ng-deep .overlay {\r\n\ttop: 0;\r\n\tleft: 0;\r\n\tright: 0;\r\n\tbottom: 0;\r\n\tposition: fixed;\r\n\tz-index: 999;\r\n\tdisplay: block;\r\n}\r\n",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cdRef",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "loaderService",
                        "type": "LoaderService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialogService",
                        "type": "DialogService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "cdRef",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "loaderService",
                        "type": "LoaderService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogService",
                        "type": "DialogService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<!-- Header -->\r\n<mb-header [transparent]=\"transparentHeader\"></mb-header>\r\n\r\n<!-- Notifications -->\r\n<mb-notifications></mb-notifications>\r\n\r\n<!-- Main -->\r\n<main id=\"main\" [class.padding-top-none]=\"transparentHeader\">\r\n\t<router-outlet></router-outlet>\r\n</main>\r\n\r\n<!-- Footer -->\r\n<mb-footer></mb-footer>\r\n\r\n<!-- Loader -->\r\n<mb-loader [active]=\"loading\"></mb-loader>\r\n\r\n<!-- Dialog -->\r\n<mb-dialog [dialog]=\"dialog\"></mb-dialog>\r\n\r\n<!-- Scroll top -->\r\n<a class=\"scrollTop\" *ngIf=\"showScrollToTop\" (click)=\"scrollToTop()\">\r\n\t<fa-icon icon=\"arrow-up\"></fa-icon>\r\n</a>"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-4ef205c97a334c309aa4001c8ab4a6d9571dcae18d0e85aaf0d367467ab5d3a9f13ab3573726f1fcb409bc9b49894dadfb80b1bbe1b6ba7041455ad9d4922004",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhat background color to use\n",
                    "description": "<p>What background color to use</p>\n",
                    "line": 26,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 711,
                            "end": 724,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 712,
                                "end": 720,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 40,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs this the principal call to action on the page?\n",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 20,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHow large should the button be?\n",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 32,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional click handler\n",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 46,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport default class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 48
                    }
                }
            }
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-b5fdea5c21527a12242bc09ce66ed087b2a1ecfaf0b053d80d3411d9bae2b9988163411859647495f0dcc93c890f374cb991a98ca4bf99baf0828b640980aeff-1",
            "file": "src/app/controls/button/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "mb-button",
            "styleUrls": [
                "./button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "button",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "Button",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, ViewEncapsulation } from '@angular/core';\r\nimport { Button } from './button';\r\n\r\n@Component({\r\n\tselector: 'mb-button',\r\n\ttemplateUrl: './button.component.html',\r\n\tstyleUrls: ['./button.component.scss']\r\n})\r\n\r\nexport class ButtonComponent implements OnInit {\r\n\r\n\t@Input() button: Button;\r\n\t@Input() disabled: boolean;\r\n\r\n\tconstructor() { }\r\n\r\n\tngOnInit(): void {\r\n\t\t\r\n\t}\r\n\r\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"settings\";\r\n\r\n.button {\r\n\tpadding: 11px 16px;\r\n\tline-height: 16px;\r\n\tborder: 1px solid darken($primary-color, 10%);\r\n\tborder-radius: 999px;\r\n\tbackground: $primary-color;\r\n\tcolor: white;\r\n\tdisplay: flex;\r\n\talign-items: center;\r\n\ttransition: $transition;\r\n\tposition: relative;\r\n\tcursor: pointer;\r\n\toverflow: hidden;\r\n\tfont-size: $font-size;\r\n\toutline: 0;\r\n\twhite-space: nowrap;\r\n\tbox-shadow: $shadow-sheen;\r\n\r\n\t&.small {\r\n\t\tpadding: 2px 8px;\r\n\t\tfont-size: 12px;\r\n\t\tline-height: 1;\r\n\t\t.symbol + .text {\r\n\t\t\tmargin-left: 4px;\r\n\t\t}\r\n\t}\r\n\t.text {\r\n\t\tflex: 1;\r\n\t\tdisplay: flex;\r\n\t\talign-items: center;\r\n\t}\r\n\r\n\t&.secondary {\r\n\t\tbackground: $secondary-color;\r\n\t\tborder-color: darken($secondary-color, 10%);\r\n\t}\r\n\r\n\t// Icon\r\n\t.icon {\r\n\t\tfa-icon {\r\n\t\t\twidth: 16px !important;\r\n\t\t\theight: 16px !important;\r\n\t\t}\r\n\t\t+ .text {\r\n\t\t\tmargin-left: $spacing * 2;\r\n\t\t}\r\n\t}\r\n\r\n\t// Symbol\r\n\t.symbol {\r\n\t\tdisplay: flex;\r\n\t\timg {\r\n\t\t\theight: 16px;\r\n\t\t\tfilter: invert(1);\r\n\t\t}\r\n\t\t+ .text {\r\n\t\t\tmargin-left: $spacing * 2;\r\n\t\t}\r\n\t}\r\n\r\n\t// States\r\n\t&:focus {\r\n\t\tbox-shadow: $shadow-focus;\r\n\t}\r\n\t&:hover {\r\n\t\tbackground: mix(white, $primary-color, 10%);\r\n\t\tbox-shadow: $shadow-sheen, $shadow-focus;\r\n\t\t&.secondary {\r\n\t\t\tbackground: mix(white, $secondary-color, 10%);\r\n\t\t}\r\n\t}\r\n\t&:active {\r\n\t\tbox-shadow: $shadow-sheen, $shadow-focus, $shadow-focus-inset;\r\n\t}\r\n}\r\n",
                    "styleUrl": "./button.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 13
            },
            "implements": [
                "OnInit"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "ButtonComponent-1",
            "templateData": "<button\r\n\t*ngIf=\"button\"\r\n\tclass=\"button {{ button.classes }} {{ button.size }}\"\r\n\t[type]=\"button.type\"\r\n\t[style.width]=\"button.width\"\r\n\t[disabled]=\"button.disabled || disabled ? true : null\"\r\n\t[routerLink]=\"button.route\"\r\n\t(click)=\"button.click ? button.click() : null\"\r\n>\r\n\t<span class=\"icon\" *ngIf=\"button.icon\">\r\n\t\t<fa-icon [icon]=\"button.icon\"></fa-icon>\r\n\t</span>\r\n\r\n\t<span class=\"symbol\" *ngIf=\"button.symbol\">\r\n\t\t<img [src]=\"button.symbol\" />\r\n\t</span>\r\n\r\n\t<span class=\"text\" *ngIf=\"button.text\" [innerHTML]=\"button.text\"> </span>\r\n\r\n\t<span class=\"money-tag\" *ngIf=\"button.price\">\r\n\t\t{{ button.price | currency }}\r\n\t</span>\r\n</button>\r\n"
        },
        {
            "name": "CardCollectionComponent",
            "id": "component-CardCollectionComponent-49fb8116d40c862844688c09752b4f694f439a7464e1064665befdc20b0b1b3edaa681d6697d44b437974da32389e2a7a77c07703d5b18b337d72e4a6d7476e3",
            "file": "src/app/components/card-collection/card-collection.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "mb-card-collection",
            "styleUrls": [
                "./card-collection.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./card-collection.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "card_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "userCards",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "CardCollectionItem[]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "buttonAdd",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Button",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "buttonViewAll",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Button",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "checkboxWishList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Checkbox",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "empty",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Empty",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methodsClass": [
                {
                    "name": "addItem",
                    "args": [
                        {
                            "name": "userCard",
                            "type": "CardCollectionItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "new CardCollectionItem({\r\n\t\t\tcard_id: this.card_id,\r\n\t\t})"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "userCard",
                            "type": "CardCollectionItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "new CardCollectionItem({\r\n\t\t\tcard_id: this.card_id,\r\n\t\t})",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteItem",
                    "args": [
                        {
                            "name": "userCard",
                            "type": "CardCollectionItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "userCard",
                            "type": "CardCollectionItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setupControls",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setupSubscriptions",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateItem",
                    "args": [
                        {
                            "name": "userCard",
                            "type": "CardCollectionItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "userCard",
                            "type": "CardCollectionItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { AddUserCard, UserCardsService } from './card-collection.service';\r\nimport { Component, Input, OnInit } from '@angular/core';\r\nimport { GUID } from '@app/helpers';\r\nimport { Condition, Icons, Printings } from '@app/models';\r\nimport { Button } from '../../controls/button';\r\nimport { Checkbox } from '../../controls/checkbox';\r\nimport { Empty } from '../../controls/empty';\r\nimport { CardCollectionItem } from './card-collection-item';\r\n\r\n@Component({\r\n\tselector: 'mb-card-collection',\r\n\ttemplateUrl: './card-collection.component.html',\r\n\tstyleUrls: ['./card-collection.component.scss'],\r\n})\r\nexport class CardCollectionComponent implements OnInit {\r\n\t@Input() card_id: number;\r\n\t@Input() userCards: CardCollectionItem[] = [];\r\n\tbuttonAdd: Button;\r\n\tcheckboxWishList: Checkbox;\r\n\tbuttonViewAll: Button;\r\n\tempty: Empty;\r\n\r\n\tconstructor(private cardCollectionService: UserCardsService) {}\r\n\r\n\tngOnInit(): void {\r\n\t\tthis.setupControls();\r\n\t\tthis.setupSubscriptions();\r\n\t}\r\n\r\n\tsetupControls() {\r\n\t\tthis.empty = new Empty({\r\n\t\t\ttext: 'This card is not in your collection',\r\n\t\t\ticon: Icons.box,\r\n\t\t\tbutton: new Button({\r\n\t\t\t\ttext: 'Add to Collection',\r\n\t\t\t\ticon: Icons.plus,\r\n\t\t\t\tclick: () => {\r\n\t\t\t\t\tthis.addItem();\r\n\t\t\t\t},\r\n\t\t\t}),\r\n\t\t});\r\n\r\n\t\t// Button add\r\n\t\tthis.buttonAdd = new Button({\r\n\t\t\ttext: 'Add to Collection',\r\n\t\t\ticon: Icons.plus,\r\n\t\t\tclasses: 'secondary',\r\n\t\t\tclick: () => {\r\n\t\t\t\tthis.addItem();\r\n\t\t\t},\r\n\t\t});\r\n\r\n\t\t// Button view all\r\n\t\tthis.buttonViewAll = new Button({\r\n\t\t\ttext: 'View Collection',\r\n\t\t\ticon: Icons.externalLink,\r\n\t\t});\r\n\r\n\t\t// Checkbox wish list\r\n\t\tthis.checkboxWishList = new Checkbox({\r\n\t\t\ttext: 'Wishlist',\r\n\t\t});\r\n\t}\r\n\r\n\tsetupSubscriptions() {\r\n\t\tthis.cardCollectionService\r\n\t\t\t.addUserCardObservable()\r\n\t\t\t.subscribe((addedCard) => {\r\n\t\t\t\tif (addedCard) {\r\n\t\t\t\t\tthis.userCards.push(addedCard);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t}\r\n\r\n\taddItem(\r\n\t\tuserCard: CardCollectionItem = new CardCollectionItem({\r\n\t\t\tcard_id: this.card_id,\r\n\t\t})\r\n\t) {\r\n\t\tthis.cardCollectionService.addUserCard(userCard);\r\n\t}\r\n\r\n\tdeleteItem(userCard: CardCollectionItem) {\r\n\t\tthis.cardCollectionService\r\n\t\t\t.removeUserCard(userCard.id)\r\n\t\t\t.subscribe((res) => {\r\n\t\t\t\tif (res.success)\r\n\t\t\t\t\tthis.userCards = this.userCards.filter(\r\n\t\t\t\t\t\t(_userCard) => _userCard.id !== userCard.id\r\n\t\t\t\t\t);\r\n\t\t\t});\r\n\t}\r\n\r\n\tupdateItem(userCard: CardCollectionItem) {\r\n\t\tthis.cardCollectionService.updateUserCard(userCard).subscribe((res) => {\r\n\t\t\tif (res.success)\r\n\t\t\t\tthis.userCards = this.userCards.map((_userCard) =>\r\n\t\t\t\t\t_userCard.id === userCard.id ? userCard : _userCard\r\n\t\t\t\t);\r\n\t\t});\r\n\t}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./card-collection.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cardCollectionService",
                        "type": "UserCardsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "cardCollectionService",
                        "type": "UserCardsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"padding-2 border-bottom\">\r\n\t<div class=\"max\">\r\n\t\t<div class=\"flex padded flex-center\">\r\n\t\t\t<div class=\"box\">\r\n\t\t\t\t<h2><a [routerLink]=\"\">Collection</a></h2>\r\n\t\t\t</div>\r\n\t\t\t<div>\r\n\t\t\t\t<mb-checkbox [checkbox]=\"checkboxWishList\"></mb-checkbox>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n</div>\r\n<div class=\"padding-y padding-x-2 padding-bottom-4\">\r\n\t<div class=\"max\">\r\n\t\t<div class=\"flex padded vertical\">\r\n\t\t\t<div class=\"width-12 subheading\" *ngIf=\"userCards.length\">\r\n\t\t\t\t<div class=\"flex\">\r\n\t\t\t\t\t<div class=\"box\">\r\n\t\t\t\t\t\t<div class=\"flex\">\r\n\t\t\t\t\t\t\t<div class=\"box\">\r\n\t\t\t\t\t\t\t\t<div class=\"flex\">\r\n\t\t\t\t\t\t\t\t\t<div class=\"width-3 small-4\">Condition</div>\r\n\t\t\t\t\t\t\t\t\t<div class=\"width-3 small-none\">\r\n\t\t\t\t\t\t\t\t\t\tGraded By\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t<div class=\"width-3 small-none\">\r\n\t\t\t\t\t\t\t\t\t\tPrinting\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t<div class=\"width-3 small-4\">Group</div>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div style=\"height: 0\">\r\n\t\t\t\t\t\t\t\t<mb-button\r\n\t\t\t\t\t\t\t\t\tclass=\"hidden\"\r\n\t\t\t\t\t\t\t\t\t[button]=\"{ text: 'Notes' }\"\r\n\t\t\t\t\t\t\t\t></mb-button>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div style=\"height: 0\">\r\n\t\t\t\t\t\t<mb-button\r\n\t\t\t\t\t\t\tclass=\"hidden\"\r\n\t\t\t\t\t\t\t[button]=\"{ icon: 'trash' }\"\r\n\t\t\t\t\t\t></mb-button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<mb-card-collection-item\r\n\t\t\t\tclass=\"box\"\r\n\t\t\t\t*ngFor=\"let userCard of userCards\"\r\n\t\t\t\t[item]=\"userCard\"\r\n\t\t\t\t(deleted)=\"deleteItem(userCard)\"\r\n\t\t\t\t(updated)=\"updateItem(userCard)\"\r\n\t\t\t>\r\n\t\t\t</mb-card-collection-item>\r\n\t\t\t<mb-empty *ngIf=\"userCards.length === 0\" [empty]=\"empty\"></mb-empty>\r\n\t\t\t<div class=\"width-12\" *ngIf=\"userCards.length\">\r\n\t\t\t\t<div class=\"border-top padding-top\">\r\n\t\t\t\t\t<div class=\"flex padded flex-center\">\r\n\t\t\t\t\t\t<div class=\"box\"></div>\r\n\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t<mb-button [button]=\"buttonAdd\"></mb-button>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n</div>\r\n"
        },
        {
            "name": "CardCollectionItemComponent",
            "id": "component-CardCollectionItemComponent-ba7ca725ce451d5998b7f90938f1ae899e10276d166f7c9e40bb907f54e1c843e88a1e461eacf681f6405ebb8dd4a6102e7365224a6191e70a5e1a69574bf00c",
            "file": "src/app/components/card-collection/card-collection-item/card-collection-item.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "mb-card-collection-item",
            "styleUrls": [
                "./card-collection-item.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./card-collection-item.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "item",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "CardCollectionItem",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "deleted",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "EventEmitter<boolean>"
                },
                {
                    "name": "updated",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "EventEmitter<CardCollectionItem>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "buttonAdd",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Button",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "buttonNotes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Button",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "buttonRemove",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Button",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "formNotes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "selectBinder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Select",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "selectCondition",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Select",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "selectGradingCompany",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Select",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "selectPrinting",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Select",
                    "optional": false,
                    "description": "",
                    "line": 36
                }
            ],
            "methodsClass": [
                {
                    "name": "buildControls",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport {\r\n\tCondition,\r\n\tConditionGraded,\r\n\tGradingCompany,\r\n\tIcons,\r\n\tPrintings,\r\n} from '@app/models';\r\nimport {\r\n\tDialog,\r\n\tFormComponent,\r\n\tMBFormControl,\r\n\tMBFormGroup,\r\n\tTextarea,\r\n} from '@app/controls';\r\nimport { FormBuilder, FormGroup } from '@angular/forms';\r\nimport { Select, SelectOption, SelectOptionGroup } from '@app/controls/select';\r\n\r\nimport { Button } from '@app/controls/button';\r\nimport { CardCollectionItem } from './card-collection-item';\r\nimport { DialogService } from './../../../controls/dialog/dialog.service';\r\nimport { MBForm } from './../../../controls/form/form';\r\nimport { Textbox } from '@app/controls/textbox';\r\n\r\n@Component({\r\n\tselector: 'mb-card-collection-item',\r\n\ttemplateUrl: './card-collection-item.component.html',\r\n\tstyleUrls: ['./card-collection-item.component.scss'],\r\n})\r\nexport class CardCollectionItemComponent implements OnInit {\r\n\t@Input() item: CardCollectionItem;\r\n\t@Output() deleted: EventEmitter<boolean> = new EventEmitter();\r\n\t@Output() updated: EventEmitter<CardCollectionItem> = new EventEmitter();\r\n\tselectCondition: Select;\r\n\tselectGradingCompany: Select;\r\n\tselectPrinting: Select;\r\n\tselectBinder: Select;\r\n\tbuttonNotes: Button;\r\n\tbuttonAdd: Button;\r\n\tbuttonRemove: Button;\r\n\tformNotes: FormGroup;\r\n\r\n\tconstructor(\r\n\t\tprivate dialogService: DialogService,\r\n\t\tprivate formBuilder: FormBuilder\r\n\t) {}\r\n\r\n\tngOnInit(): void {\r\n\t\tthis.buildControls();\r\n\t}\r\n\r\n\tbuildControls() {\r\n\t\t// Notes\r\n\t\tthis.formNotes = this.formBuilder.group({\r\n\t\t\tnotesControl: [''],\r\n\t\t});\r\n\r\n\t\t// Condition\r\n\t\tthis.selectCondition = new Select({\r\n\t\t\tvalue: this.item.condition,\r\n\t\t\tclasses: 'square-right',\r\n\t\t\toptionGroups: [\r\n\t\t\t\tnew SelectOptionGroup({\r\n\t\t\t\t\tlabel: 'Condition',\r\n\t\t\t\t}),\r\n\t\t\t\tnew SelectOptionGroup({\r\n\t\t\t\t\tlabel: 'Condition Graded',\r\n\t\t\t\t}),\r\n\t\t\t],\r\n\t\t\tchange: (value) => {\r\n\t\t\t\tthis.updated.emit(\r\n\t\t\t\t\tnew CardCollectionItem({\r\n\t\t\t\t\t\t...this.item,\r\n\t\t\t\t\t\tcondition: Condition[value],\r\n\t\t\t\t\t})\r\n\t\t\t\t);\r\n\t\t\t},\r\n\t\t});\r\n\t\tfor (let condition in Condition) {\r\n\t\t\tthis.selectCondition.optionGroups[0].options.push(\r\n\t\t\t\tnew SelectOption({\r\n\t\t\t\t\ttext: Condition[condition],\r\n\t\t\t\t\tvalue: Condition[condition],\r\n\t\t\t\t\tselected: Condition[condition] === this.item.condition,\r\n\t\t\t\t})\r\n\t\t\t);\r\n\t\t}\r\n\t\tfor (let conditionGraded in ConditionGraded) {\r\n\t\t\tthis.selectCondition.optionGroups[1].options.push(\r\n\t\t\t\tnew SelectOption({\r\n\t\t\t\t\ttext: ConditionGraded[conditionGraded],\r\n\t\t\t\t\tvalue: ConditionGraded[conditionGraded],\r\n\t\t\t\t\tselected:\r\n\t\t\t\t\t\tConditionGraded[conditionGraded] ===\r\n\t\t\t\t\t\tthis.item.condition,\r\n\t\t\t\t})\r\n\t\t\t);\r\n\t\t}\r\n\t\tthis.selectCondition.value = this.item.condition;\r\n\r\n\t\t// Grading company\r\n\t\tthis.selectGradingCompany = new Select({\r\n\t\t\tclasses: 'square',\r\n\t\t\toptionGroups: [\r\n\t\t\t\tnew SelectOptionGroup({\r\n\t\t\t\t\tlabel: 'Graded By',\r\n\t\t\t\t}),\r\n\t\t\t],\r\n\t\t});\r\n\t\tfor (let gradingCompany in GradingCompany) {\r\n\t\t\tthis.selectGradingCompany.optionGroups[0].options.push(\r\n\t\t\t\tnew SelectOption({\r\n\t\t\t\t\ttext: GradingCompany[gradingCompany],\r\n\t\t\t\t\tvalue: GradingCompany[gradingCompany],\r\n\t\t\t\t})\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\t// Printing\r\n\t\tthis.selectPrinting = new Select({\r\n\t\t\tclasses: 'square',\r\n\t\t\toptionGroups: [\r\n\t\t\t\tnew SelectOptionGroup({\r\n\t\t\t\t\tlabel: 'Printing',\r\n\t\t\t\t}),\r\n\t\t\t],\r\n\t\t\tchange: (value) => {\r\n\t\t\t\tthis.updated.emit(\r\n\t\t\t\t\tnew CardCollectionItem({\r\n\t\t\t\t\t\t...this.item,\r\n\t\t\t\t\t\tprinting: Printings[value],\r\n\t\t\t\t\t})\r\n\t\t\t\t);\r\n\t\t\t},\r\n\t\t});\r\n\t\tfor (let printVersion in Printings) {\r\n\t\t\tthis.selectPrinting.optionGroups[0].options.push(\r\n\t\t\t\tnew SelectOption({\r\n\t\t\t\t\ttext: Printings[printVersion],\r\n\t\t\t\t\tvalue: Printings[printVersion],\r\n\t\t\t\t})\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\t// Notes\r\n\t\tthis.buttonNotes = new Button({\r\n\t\t\ttext: 'Notes',\r\n\t\t\tclasses: 'square secondary',\r\n\t\t\twidth: '100%',\r\n\t\t\tclick: () => {\r\n\t\t\t\tthis.dialogService.setDialog(\r\n\t\t\t\t\tnew Dialog({\r\n\t\t\t\t\t\ttitle: 'Notes',\r\n\t\t\t\t\t\tform: new MBForm({\r\n\t\t\t\t\t\t\tformGroup: this.formNotes,\r\n\t\t\t\t\t\t\tgroups: [\r\n\t\t\t\t\t\t\t\tnew MBFormGroup({\r\n\t\t\t\t\t\t\t\t\tcontrols: [\r\n\t\t\t\t\t\t\t\t\t\tnew MBFormControl({\r\n\t\t\t\t\t\t\t\t\t\t\tformControl:\r\n\t\t\t\t\t\t\t\t\t\t\t\tthis.formNotes.controls\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t.notesControl,\r\n\t\t\t\t\t\t\t\t\t\t\tcontrol: new Textarea({}),\r\n\t\t\t\t\t\t\t\t\t\t}),\r\n\t\t\t\t\t\t\t\t\t],\r\n\t\t\t\t\t\t\t\t}),\r\n\t\t\t\t\t\t\t],\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t})\r\n\t\t\t\t);\r\n\t\t\t},\r\n\t\t});\r\n\r\n\t\t// Binder\r\n\t\tthis.selectBinder = new Select({\r\n\t\t\tclasses: 'square',\r\n\t\t\tmultiple: true,\r\n\t\t\toptions: [\r\n\t\t\t\tnew SelectOption({\r\n\t\t\t\t\ttext: 'Binder 1',\r\n\t\t\t\t\tvalue: 'binder1',\r\n\t\t\t\t\tselected: true,\r\n\t\t\t\t}),\r\n\t\t\t],\r\n\t\t});\r\n\r\n\t\t// Button remove\r\n\t\tthis.buttonRemove = new Button({\r\n\t\t\ticon: Icons.trash,\r\n\t\t\tclasses: 'secondary square-left',\r\n\t\t\tclick: () => {\r\n\t\t\t\tif (confirm('Are you sure you want to delete this item?')) {\r\n\t\t\t\t\tthis.deleted.emit(true);\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t});\r\n\t}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./card-collection-item.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogService",
                        "type": "DialogService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 41,
                "jsdoctags": [
                    {
                        "name": "dialogService",
                        "type": "DialogService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"width-12\">\r\n\t<div class=\"flex flex-center\">\r\n\t\t<div class=\"box\">\r\n\t\t\t<div class=\"flex flex-center\">\r\n\t\t\t\t<div class=\"box\">\r\n\t\t\t\t\t<div class=\"flex flex-center\">\r\n\t\t\t\t\t\t<div class=\"width-3 small-4\">\r\n\t\t\t\t\t\t\t<mb-select [select]=\"selectCondition\"></mb-select>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div class=\"width-3 small-none\">\r\n\t\t\t\t\t\t\t<mb-select\r\n\t\t\t\t\t\t\t\t[select]=\"selectGradingCompany\"\r\n\t\t\t\t\t\t\t></mb-select>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div class=\"width-3 small-none\">\r\n\t\t\t\t\t\t\t<mb-select [select]=\"selectPrinting\"></mb-select>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div class=\"width-3 small-4\">\r\n\t\t\t\t\t\t\t<mb-select [select]=\"selectBinder\"></mb-select>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<mb-button [button]=\"buttonNotes\"></mb-button>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t<div>\r\n\t\t\t<mb-button [button]=\"buttonRemove\"></mb-button>\r\n\t\t</div>\r\n\t</div>\r\n</div>\r\n"
        },
        {
            "name": "CardComponent",
            "id": "component-CardComponent-df65a5f9ca9c33cd82d03a17b25ca1778c0537af1adeb4ceafc803b46313a3550ca868740057bbc5fde5cf46698b828d6ecdccaa25311b1c23161baf7eaf431b",
            "file": "src/app/pages/cards/card/card.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "mb-card",
            "styleUrls": [
                "./card.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./card.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "card",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "Card",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "buttonEbay",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Button",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "buttonTCGPlayer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Button",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "cardImageHover",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "expansionCards",
                    "defaultValue": "new Items()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Items",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "relatedCards",
                    "defaultValue": "new Items()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Items",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "showRelated",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "tagArtist",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Tag",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "tagNumber",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Tag",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "tagRarity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Tag",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "userCards",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CardCollectionItem[]",
                    "optional": false,
                    "description": "",
                    "line": 34
                }
            ],
            "methodsClass": [
                {
                    "name": "createDialogCardImage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 103,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getExpansionCards",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 240,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getRelatedCards",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 222,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getTypeImage",
                    "args": [
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleRoute",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 211,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "resetControls",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setupControls",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setupSubscriptions",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CardCollectionItem } from './../../../components/card-collection/card-collection-item/card-collection-item';\r\nimport { UserCardsService } from './../../../components/card-collection/card-collection.service';\r\nimport { Component, Input, OnInit, ViewEncapsulation } from '@angular/core';\r\nimport { Card, SetSortByCards } from './card';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { CardService } from '../../../services/card.service';\r\nimport '@app/helpers/string.extensions';\r\nimport { Icons, Symbols } from '@app/models/icons';\r\nimport {\r\n\tButton,\r\n\tDialog,\r\n\tDialogService,\r\n\tLoaderService,\r\n\tTag,\r\n} from '@app/controls';\r\nimport { CardsService } from '../../../services/cards.service';\r\nimport { ItemGroup, Items } from '@app/layout/main';\r\nimport {\r\n\tExpansionService,\r\n\tGetExpansionCards,\r\n} from '@app/services/expansion.service';\r\nimport { GetPokemonVariantCards, PokemonService } from '@app/pages/pokemons';\r\nimport { Title } from '@angular/platform-browser';\r\nimport { AppSettings } from '@app/app';\r\n\r\n@Component({\r\n\tselector: 'mb-card',\r\n\ttemplateUrl: './card.component.html',\r\n\tstyleUrls: ['./card.component.scss'],\r\n\tencapsulation: ViewEncapsulation.None,\r\n})\r\nexport class CardComponent implements OnInit {\r\n\t@Input() card: Card;\r\n\tuserCards: CardCollectionItem[] = [];\r\n\trelatedCards: Items = new Items();\r\n\texpansionCards: Items = new Items();\r\n\tcardImageHover: boolean = false;\r\n\ttagRarity: Tag;\r\n\ttagArtist: Tag;\r\n\ttagNumber: Tag;\r\n\tbuttonTCGPlayer: Button;\r\n\tbuttonEbay: Button;\r\n\tshowRelated: boolean;\r\n\r\n\tconstructor(\r\n\t\tprivate titleService: Title,\r\n\t\tprivate loaderService: LoaderService,\r\n\t\tprivate cardService: CardService,\r\n\t\tprivate route: ActivatedRoute,\r\n\t\tprivate expansionService: ExpansionService,\r\n\t\tprivate dialogService: DialogService,\r\n\t\tprivate pokemonService: PokemonService,\r\n\t\tprivate userCardsService: UserCardsService\r\n\t) {}\r\n\r\n\tngOnInit(): void {\r\n\t\tthis.setupControls();\r\n\t\tthis.setupSubscriptions();\r\n\t\tthis.handleRoute();\r\n\t}\r\n\r\n\tresetControls() {\r\n\t\tthis.card = null;\r\n\t}\r\n\r\n\tsetupControls() {\r\n\t\tthis.resetControls();\r\n\r\n\t\t// Related cards\r\n\t\tthis.relatedCards.footer.pageSize = 12;\r\n\t\tthis.relatedCards.noResultsImage = Symbols.cards;\r\n\t\tthis.relatedCards.noResults = 'No related cards found';\r\n\t\tthis.relatedCards.itemClasses = 'width-2 medium-3 small-6';\r\n\t\tthis.relatedCards.showFilters = false;\r\n\t\tthis.relatedCards.showFooter = false;\r\n\t\tSetSortByCards(this.relatedCards.filter);\r\n\r\n\t\t// Expansion cards\r\n\t\tthis.expansionCards.footer.pageSize = 12;\r\n\t\tthis.expansionCards.noResultsImage = Symbols.cards;\r\n\t\tthis.expansionCards.itemClasses = 'width-2 medium-3 small-6';\r\n\t\tthis.expansionCards.showFilters = false;\r\n\t\tthis.expansionCards.showFooter = false;\r\n\t\tSetSortByCards(this.expansionCards.filter);\r\n\r\n\t\t// Buttons\r\n\t\tthis.buttonTCGPlayer = new Button({\r\n\t\t\ticon: Icons.externalLink,\r\n\t\t\ttext: 'Buy on TCGPlayer',\r\n\t\t\tclasses: 'small width-12',\r\n\t\t});\r\n\t\tthis.buttonEbay = new Button({\r\n\t\t\ticon: Icons.externalLink,\r\n\t\t\ttext: 'Buy on eBay',\r\n\t\t\tclasses: 'small width-12',\r\n\t\t});\r\n\t}\r\n\r\n\tgetTypeImage(type: string) {\r\n\t\treturn `/assets/symbols/${type.toLowerCase()}.svg`;\r\n\t}\r\n\r\n\tcreateDialogCardImage() {\r\n\t\tthis.dialogService.setDialog(\r\n\t\t\tnew Dialog({\r\n\t\t\t\ttitle: `${this.card.name} - ${this.card.expansion.name}`,\r\n\t\t\t\tcontent: `<div class=\"card-image\"><img src=\"${this.card.image_high_res}\" /></div>`,\r\n\t\t\t})\r\n\t\t);\r\n\t}\r\n\r\n\tsetupSubscriptions() {\r\n\t\t// Response get card\r\n\t\tthis.cardService.getCardObservable().subscribe((card) => {\r\n\t\t\tif (card) {\r\n\t\t\t\tthis.titleService.setTitle(AppSettings.titlePrefix + card.name);\r\n\r\n\t\t\t\t// Data\r\n\t\t\t\tthis.card = card;\r\n\r\n\t\t\t\tif (this.card.pokemon) {\r\n\t\t\t\t\tthis.relatedCards.header.title = `${this.card.pokemon.variant.name} Cards`;\r\n\t\t\t\t\tthis.relatedCards.header.titleRoute =\r\n\t\t\t\t\t\tthis.card.pokemon.route;\r\n\t\t\t\t\tthis.relatedCards.noResults = `No ${this.card.pokemon.variant.name} cards found`;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Rarity\r\n\t\t\t\tif (this.card.expansion.name.toLowerCase().includes('promo')) {\r\n\t\t\t\t\tthis.tagRarity = new Tag({\r\n\t\t\t\t\t\ttext: 'Promo',\r\n\t\t\t\t\t\tclasses: 'promo card-rarity',\r\n\t\t\t\t\t});\r\n\t\t\t\t} else if (this.card.rarity) {\r\n\t\t\t\t\tthis.tagRarity = new Tag({\r\n\t\t\t\t\t\ttext: this.card.rarity,\r\n\t\t\t\t\t\tclasses:\r\n\t\t\t\t\t\t\t'card-rarity ' +\r\n\t\t\t\t\t\t\tthis.card.rarity.toLowerCase().replace(' ', '-'),\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Artist\r\n\t\t\t\tif (this.card.artist) {\r\n\t\t\t\t\tthis.tagArtist = new Tag({\r\n\t\t\t\t\t\ttext: this.card.artist,\r\n\t\t\t\t\t\ticon: Icons.paintBrush,\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.tagNumber = new Tag({\r\n\t\t\t\t\ttext: this.card.getCardNumber(),\r\n\t\t\t\t});\r\n\r\n\t\t\t\t// Get related/expansion cards\r\n\t\t\t\tthis.getRelatedCards();\r\n\t\t\t\tthis.getExpansionCards();\r\n\r\n\t\t\t\t// Expansion name\r\n\t\t\t\tthis.expansionCards.header.title = `${this.card.expansion.name} Cards`;\r\n\t\t\t\tthis.expansionCards.noResults =\r\n\t\t\t\t\t'No ' + this.card.expansion.name + ' cards found';\r\n\t\t\t\tthis.expansionCards.header.titleRoute =\r\n\t\t\t\t\tthis.card.expansion.route;\r\n\r\n\t\t\t\t// Prices\r\n\t\t\t\tif (this.card.last_prices) {\r\n\t\t\t\t\tthis.buttonTCGPlayer.price =\r\n\t\t\t\t\t\tthis.card.last_prices.market_price;\r\n\t\t\t\t\tthis.buttonEbay.price = this.card.last_prices.market_price;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\t// Response get user cards\r\n\t\tthis.userCardsService\r\n\t\t\t.getCardUserCardsObservable()\r\n\t\t\t.subscribe((userCards) => {\r\n\t\t\t\tif (userCards) {\r\n\t\t\t\t\tthis.userCards = userCards;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t// Response get related cards\r\n\t\tthis.pokemonService\r\n\t\t\t.getPokemonVariantCardsObservable()\r\n\t\t\t.subscribe((res) => {\r\n\t\t\t\tif (res) {\r\n\t\t\t\t\tthis.loaderService.clearItemLoading('getPokemonCards');\r\n\t\t\t\t\tthis.relatedCards.itemGroups = [\r\n\t\t\t\t\t\tnew ItemGroup({\r\n\t\t\t\t\t\t\titems: res.cards,\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t];\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t// Response get expansion cards\r\n\t\tthis.expansionService.getExpansionCardsObservable().subscribe((res) => {\r\n\t\t\tif (res) {\r\n\t\t\t\tthis.loaderService.clearItemLoading('getExpansionCards');\r\n\t\t\t\tthis.expansionCards.itemGroups = [\r\n\t\t\t\t\tnew ItemGroup({\r\n\t\t\t\t\t\titems: res.cards,\r\n\t\t\t\t\t}),\r\n\t\t\t\t];\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\thandleRoute() {\r\n\t\t// Param - card slug\r\n\t\tthis.route.params.subscribe((params) => {\r\n\t\t\tconst slug = params['slug'];\r\n\t\t\t// Get card\r\n\t\t\tthis.cardService.getCard(slug);\r\n\t\t\t// Get user cards\r\n\t\t\tthis.userCardsService.getCardUserCards(slug);\r\n\t\t});\r\n\t}\r\n\r\n\tgetRelatedCards() {\r\n\t\tif (this.card && this.card.pokemon) {\r\n\t\t\tthis.showRelated = true;\r\n\t\t\tthis.loaderService.addItemLoading('getPokemonCards');\r\n\t\t\tthis.pokemonService.getPokemonVariantCards(\r\n\t\t\t\tnew GetPokemonVariantCards({\r\n\t\t\t\t\tpage: this.relatedCards.footer.page,\r\n\t\t\t\t\tslug: this.card.pokemon.variant.slug,\r\n\t\t\t\t\tpage_size: this.relatedCards.footer.pageSize,\r\n\t\t\t\t\tsort_by: this.relatedCards.filter.selectSortBy.value,\r\n\t\t\t\t\tsort_direction:\r\n\t\t\t\t\t\tthis.relatedCards.filter.selectSortDirection.value,\r\n\t\t\t\t\tquery: this.relatedCards.filter.textboxSearch.value,\r\n\t\t\t\t})\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\r\n\tgetExpansionCards() {\r\n\t\tif (this.card) {\r\n\t\t\tthis.loaderService.addItemLoading('getExpansionCards');\r\n\t\t\tthis.expansionService.getExpansionCards(\r\n\t\t\t\tnew GetExpansionCards({\r\n\t\t\t\t\tcode: this.card.expansion.code,\r\n\t\t\t\t\tpage: this.expansionCards.footer.page,\r\n\t\t\t\t\tpage_size: this.expansionCards.footer.pageSize,\r\n\t\t\t\t\tquery: this.expansionCards.filter.textboxSearch.value,\r\n\t\t\t\t\tsort_by: this.expansionCards.filter.selectSortBy.value,\r\n\t\t\t\t\tsort_direction:\r\n\t\t\t\t\t\tthis.expansionCards.filter.selectSortDirection.value,\r\n\t\t\t\t})\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"settings\", \"scaffold/typography\", \"custom\";\r\n\r\n.card-detail {\r\n\tposition: relative;\r\n\toverflow: hidden;\r\n\tbackground: linear-gradient(\r\n\t\tto right,\r\n\t\tdarken(white, 20%),\r\n\t\tdarken(mix(white, black, 80%), 20%)\r\n\t);\r\n\t&:after {\r\n\t\tcontent: \"\";\r\n\t\tbox-shadow: $shadow-inset-large;\r\n\t\ttop: 0;\r\n\t\tleft: 0;\r\n\t\tright: 0;\r\n\t\tbottom: 0;\r\n\t\tposition: absolute;\r\n\t\tz-index: 2;\r\n\t\tpointer-events: none;\r\n\t}\r\n\t.panel:after {\r\n\t\t@media (max-width: $screen-medium) {\r\n\t\t\tborder-left: 0;\r\n\t\t\tborder-right: 0;\r\n\t\t}\r\n\t}\r\n\t> .pokeball {\r\n\t\tposition: absolute;\r\n\t\tleft: 50%;\r\n\t\ttop: 50%;\r\n\t\ttransform: translate(-50%, -50%);\r\n\t\twidth: 1000px;\r\n\t\topacity: 0.1;\r\n\t\tz-index: 1;\r\n\t\tpointer-events: none;\r\n\t\tmax-width: 120%;\r\n\t}\r\n\t@media (max-width: $screen-medium) {\r\n\t\tpadding-left: 0;\r\n\t\tpadding-right: 0;\r\n\t\tpadding-bottom: 0;\r\n\t}\r\n\t@each $type, $color in $poke-types {\r\n\t\t&.#{$type} {\r\n\t\t\tbackground: linear-gradient(\r\n\t\t\t\tto right,\r\n\t\t\t\tdarken($color, 20%),\r\n\t\t\t\tdarken(mix($color, black, 80%), 20%)\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\t.card-image-wrapper {\r\n\t\tz-index: 2;\r\n\t\t&.active {\r\n\t\t\t.img-card-image {\r\n\t\t\t\topacity: 0;\r\n\t\t\t}\r\n\t\t\t.card-image-inner {\r\n\t\t\t\t&:after {\r\n\t\t\t\t\tdisplay: none;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t.img-card-image {\r\n\t\t\tmax-width: 240px;\r\n\t\t\tcursor: zoom-in;\r\n\t\t\tdisplay: block;\r\n\t\t\topacity: 1;\r\n\t\t\t&:hover {\r\n\t\t\t\tbox-shadow: $shadow-focus;\r\n\t\t\t}\r\n\t\t\t@media (max-height: $screen-small + 40px) {\r\n\t\t\t\topacity: 1 !important;\r\n\t\t\t\tcursor: default;\r\n\t\t\t}\r\n\t\t\t@media (max-width: $screen-medium) {\r\n\t\t\t\tmargin-left: auto;\r\n\t\t\t\tmargin-right: auto;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n.card-energies {\r\n\t.card-energy {\r\n\t\twidth: 24px;\r\n\t\theight: 24px;\r\n\t\tmargin-top: 1px;\r\n\t\tborder-radius: 50%;\r\n\t\ttransition: $transition;\r\n\t\tcursor: pointer;\r\n\t\tposition: relative;\r\n\t\tdisplay: block;\r\n\t\t&:hover {\r\n\t\t\tbox-shadow: $shadow-focus, $shadow-sheen;\r\n\t\t\tborder-color: $primary-color;\r\n\t\t}\r\n\t\t.card-energy-inner {\r\n\t\t\twidth: 24px;\r\n\t\t\theight: 24px;\r\n\t\t\tborder-radius: 50%;\r\n\t\t\tbox-shadow: $shadow-sheen;\r\n\t\t}\r\n\t\t@each $type, $color in $poke-types {\r\n\t\t\t&.#{$type} {\r\n\t\t\t\tbackground: $color;\r\n\t\t\t}\r\n\t\t}\r\n\t\t&:before {\r\n\t\t\tcontent: \"\";\r\n\t\t\tborder-radius: 50%;\r\n\t\t\twidth: 100%;\r\n\t\t\theight: 100%;\r\n\t\t\tbox-shadow: $shadow-sheen;\r\n\t\t\tz-index: 10;\r\n\t\t\tposition: absolute;\r\n\t\t\tborder: $border;\r\n\t\t\ttop: 0;\r\n\t\t\tleft: 0;\r\n\t\t}\r\n\t}\r\n\timg {\r\n\t\twidth: 24px;\r\n\t\theight: 24px;\r\n\t\tdisplay: block;\r\n\t\tborder-radius: 50%;\r\n\t\tbox-shadow: $shadow;\r\n\t}\r\n}\r\n.artist-link {\r\n\tcolor: white;\r\n}\r\n",
                    "styleUrl": "./card.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "titleService",
                        "type": "Title",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "loaderService",
                        "type": "LoaderService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cardService",
                        "type": "CardService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "expansionService",
                        "type": "ExpansionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialogService",
                        "type": "DialogService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "pokemonService",
                        "type": "PokemonService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userCardsService",
                        "type": "UserCardsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 43,
                "jsdoctags": [
                    {
                        "name": "titleService",
                        "type": "Title",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "loaderService",
                        "type": "LoaderService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cardService",
                        "type": "CardService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "expansionService",
                        "type": "ExpansionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogService",
                        "type": "DialogService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "pokemonService",
                        "type": "PokemonService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userCardsService",
                        "type": "UserCardsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div *ngIf=\"card\">\r\n\t<!-- Card -->\r\n\t<article\r\n\t\tclass=\"card-detail {{\r\n\t\t\tcard.types.length ? card.types[0].toLowerCase() : ''\r\n\t\t}} flex z-2 padding-y-4 padding-x-2 relative flex-wrap flex-start\"\r\n\t\t*ngIf=\"card\"\r\n\t>\r\n\t\t<!-- Pokeball -->\r\n\t\t<img class=\"pokeball\" src=\"/assets/pokeball.png\" />\r\n\r\n\t\t<div class=\"max flex width-12 z-3 relative\">\r\n\t\t\t<div class=\"flex padded-2 box justify-center small-vertical\">\r\n\t\t\t\t<!-- Card image -->\r\n\t\t\t\t<div class=\"relative z-2 flex justify-center\">\r\n\t\t\t\t\t<figure\r\n\t\t\t\t\t\tclass=\"card-image-wrapper\"\r\n\t\t\t\t\t\t[class.active]=\"cardImageHover\"\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<div class=\"card-image link\">\r\n\t\t\t\t\t\t\t<img\r\n\t\t\t\t\t\t\t\tsrc=\"{{ card.image }}\"\r\n\t\t\t\t\t\t\t\tclass=\"img-card-image border-radius-card shadow transition\"\r\n\t\t\t\t\t\t\t\t(click)=\"createDialogCardImage()\"\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t<img\r\n\t\t\t\t\t\t\t\tsrc=\"{{ this.card.image_high_res }}\"\r\n\t\t\t\t\t\t\t\tstyle=\"display: none\"\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</figure>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<div class=\"relative z-1 flex medium-12 justify-center\">\r\n\t\t\t\t\t<div\r\n\t\t\t\t\t\tclass=\"panel medium-12 medium-square\"\r\n\t\t\t\t\t\tstyle=\"min-width: 320px\"\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<div class=\"flex padded-small vertical\">\r\n\t\t\t\t\t\t\t<!-- Card header -->\r\n\t\t\t\t\t\t\t<div class=\"card-header\">\r\n\t\t\t\t\t\t\t\t<div\r\n\t\t\t\t\t\t\t\t\tclass=\"flex flex-center flex-nowrap padded\"\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t<div class=\"card-name ellipsis box\">\r\n\t\t\t\t\t\t\t\t\t\t<h2>{{ card.name }}</h2>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t<div\r\n\t\t\t\t\t\t\t\t\t\tclass=\"flex padded flex-center flex-nowrap\"\r\n\t\t\t\t\t\t\t\t\t\t*ngIf=\"card.hp\"\r\n\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t<div class=\"card-hp bold h2\">\r\n\t\t\t\t\t\t\t\t\t\t\t<span class=\"subheading\">HP</span\r\n\t\t\t\t\t\t\t\t\t\t\t>{{ card.hp }}\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t<div\r\n\t\t\t\t\t\t\t\t\t\t\tclass=\"card-energies flex flex-nowrap padded\"\r\n\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t<div\r\n\t\t\t\t\t\t\t\t\t\t\t\t*ngFor=\"let type of card.types\"\r\n\t\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<a\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tclass=\"card-energy {{\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\ttype.toLowerCase()\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t}}\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t[routerLink]=\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t'/cards/types/' +\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\ttype\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.toLowerCase()\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.replace(' ', '-')\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tclass=\"card-energy-inner\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<img\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[src]=\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tgetTypeImage(\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttype\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t\t\t</a>\r\n\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t\t<div class=\"flex padded-small flex-nowrap\">\r\n\t\t\t\t\t\t\t\t<div class=\"min-6\" *ngIf=\"card.pokemon\">\r\n\t\t\t\t\t\t\t\t\t<!-- Pokemon -->\r\n\t\t\t\t\t\t\t\t\t<mb-pokemon-item-grid\r\n\t\t\t\t\t\t\t\t\t\tsize=\"small\"\r\n\t\t\t\t\t\t\t\t\t\t[pokemonVariant]=\"card.pokemon.variant\"\r\n\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t</mb-pokemon-item-grid>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t<div class=\"min-6\">\r\n\t\t\t\t\t\t\t\t\t<!-- Expansion -->\r\n\t\t\t\t\t\t\t\t\t<mb-expansion-item-grid\r\n\t\t\t\t\t\t\t\t\t\tsize=\"small\"\r\n\t\t\t\t\t\t\t\t\t\t[expansion]=\"card.expansion\"\r\n\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t</mb-expansion-item-grid>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t\t<div class=\"width-12\" *ngIf=\"false\">\r\n\t\t\t\t\t\t\t\t<div class=\"flex padded-small\">\r\n\t\t\t\t\t\t\t\t\t<!-- TCG Player -->\r\n\t\t\t\t\t\t\t\t\t<div\r\n\t\t\t\t\t\t\t\t\t\tclass=\"width-12 medium-6 small-12\"\r\n\t\t\t\t\t\t\t\t\t\t*ngIf=\"buttonTCGPlayer\"\r\n\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t<mb-button\r\n\t\t\t\t\t\t\t\t\t\t\t[button]=\"buttonTCGPlayer\"\r\n\t\t\t\t\t\t\t\t\t\t></mb-button>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t\t\t\t<!-- TCG Player -->\r\n\t\t\t\t\t\t\t\t\t<div\r\n\t\t\t\t\t\t\t\t\t\tclass=\"width-12 medium-6 small-12\"\r\n\t\t\t\t\t\t\t\t\t\t*ngIf=\"buttonEbay\"\r\n\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t<mb-button\r\n\t\t\t\t\t\t\t\t\t\t\t[button]=\"buttonEbay\"\r\n\t\t\t\t\t\t\t\t\t\t></mb-button>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t\t<div\r\n\t\t\t\t\t\t\t\tclass=\"card-rarity flex flex-center padded-small\"\r\n\t\t\t\t\t\t\t\t*ngIf=\"tagRarity\"\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t<!-- Rarity -->\r\n\t\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t\t<a\r\n\t\t\t\t\t\t\t\t\t\t[routerLink]=\"\r\n\t\t\t\t\t\t\t\t\t\t\tcard.rarity &&\r\n\t\t\t\t\t\t\t\t\t\t\t'/cards/rarity/' +\r\n\t\t\t\t\t\t\t\t\t\t\t\tcard.rarity\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t.toLowerCase()\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t.replace(' ', '-')\r\n\t\t\t\t\t\t\t\t\t\t\"\r\n\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t<mb-tag [tag]=\"tagRarity\"></mb-tag>\r\n\t\t\t\t\t\t\t\t\t</a>\r\n\t\t\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t\t\t<!-- Number -->\r\n\t\t\t\t\t\t\t\t<div class=\"subheading\">\r\n\t\t\t\t\t\t\t\t\t<mb-tag [tag]=\"tagNumber\"></mb-tag>\r\n\t\t\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t\t\t<!-- Artist -->\r\n\t\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t\t<a\r\n\t\t\t\t\t\t\t\t\t\tclass=\"artist-link\"\r\n\t\t\t\t\t\t\t\t\t\t[routerLink]=\"\r\n\t\t\t\t\t\t\t\t\t\t\t'/cards/artists/' +\r\n\t\t\t\t\t\t\t\t\t\t\tcard.artist\r\n\t\t\t\t\t\t\t\t\t\t\t\t.toLowerCase()\r\n\t\t\t\t\t\t\t\t\t\t\t\t.replace(' ', '-')\r\n\t\t\t\t\t\t\t\t\t\t\"\r\n\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t<mb-tag [tag]=\"tagArtist\"></mb-tag>\r\n\t\t\t\t\t\t\t\t\t</a>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</article>\r\n\r\n\t<div class=\"relative z-1\">\r\n\t\t<div *ngIf=\"userCards\">\r\n\t\t\t<!-- Collection -->\r\n\t\t\t<mb-card-collection [card_id]=\"card.id\" [userCards]=\"userCards\">\r\n\t\t\t</mb-card-collection>\r\n\t\t</div>\r\n\t\t<div *ngIf=\"showRelated\">\r\n\t\t\t<!-- Related -->\r\n\t\t\t<mb-items\r\n\t\t\t\t[items]=\"relatedCards\"\r\n\t\t\t\t(outputGetItems)=\"getRelatedCards()\"\r\n\t\t\t\t(outputDisplayModeChanged)=\"getRelatedCards()\"\r\n\t\t\t>\r\n\t\t\t</mb-items>\r\n\t\t</div>\r\n\t\t<div>\r\n\t\t\t<!-- Expansion -->\r\n\t\t\t<mb-items\r\n\t\t\t\t[items]=\"expansionCards\"\r\n\t\t\t\t(outputGetItems)=\"getExpansionCards()\"\r\n\t\t\t\t(outputDisplayModeChanged)=\"getExpansionCards()\"\r\n\t\t\t>\r\n\t\t\t</mb-items>\r\n\t\t</div>\r\n\t</div>\r\n</div>\r\n"
        },
        {
            "name": "CardItemGridComponent",
            "id": "component-CardItemGridComponent-61a1da8193e98cbeb62e5bdd414ae9b5645dbf5ffba46d0b00559780eb340df5f37694d51114f2b9a9c7ce8e0dd7a32e8f923cc15ffc286647ad9d4188b90058",
            "file": "src/app/pages/cards/card-item/card-item-grid/card-item-grid.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "mb-card-item-grid",
            "styleUrls": [
                "./card-item-grid.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "card-item-grid.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "card",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "Card",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "imageLoading",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "textbox",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Textbox",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "values",
                    "defaultValue": "[\r\n\t\t\"0\",\r\n\t\t\"0\",\r\n\t\t\"0\",\r\n\t\t\"1\",\r\n\t\t\"2\",\r\n\t\t\"3\",\r\n\t]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onLoad",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input } from '@angular/core';\r\nimport { Textbox } from '@app/controls';\r\nimport { Card } from '../../card/card';\r\n\r\n@Component({\r\n\tselector: 'mb-card-item-grid',\r\n\ttemplateUrl: 'card-item-grid.component.html',\r\n\tstyleUrls: ['./card-item-grid.component.scss']\r\n})\r\n\r\nexport class CardItemGridComponent implements OnInit {\r\n\r\n\t@Input() card: Card;\r\n\timageLoading: boolean = true;\r\n\ttextbox: Textbox;\r\n\tvalues = [\r\n\t\t\"0\",\r\n\t\t\"0\",\r\n\t\t\"0\",\r\n\t\t\"1\",\r\n\t\t\"2\",\r\n\t\t\"3\",\r\n\t];\r\n\r\n\tconstructor() { }\r\n\r\n\tngOnInit() {\r\n\t\tthis.textbox = new Textbox({\r\n\t\t\ttype: \"number\",\r\n\t\t\twrapperClasses: \"small\",\r\n\t\t\tvalue: this.values[Math.floor(Math.random() * this.values.length)],\r\n\t\t\tmin: 0\r\n\t\t});\r\n\t}\r\n\r\n\tonLoad() {\r\n\t\tthis.imageLoading = false;\r\n\t}\r\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"settings\";\r\n\r\n:host {\r\n\twidth: 100%;\r\n}\r\n\r\n.card-grid {\r\n\tdisplay: block;\r\n\ttransition: $transition;\r\n\tborder-radius: $border-radius-small;\r\n\tflex: 1 0 0;\r\n\tbackground: linear-gradient(transparent 50%, $menu-bg 51%);\r\n\tcursor: pointer;\r\n\t&:active {\r\n\t\tborder-color: $primary-color !important;\r\n\t\tbox-shadow: $shadow-focus !important;\r\n\t\toutline: 0 !important;\r\n\t}\r\n\t&:hover {\r\n\t\tbox-shadow: $shadow-focus, $shadow-large;\r\n\t}\r\n\t.card-image-wrapper {\r\n\t\twidth: 100%;\r\n\t\tposition: relative;\r\n\t\t&:after {\r\n\t\t\tdisplay: none;\r\n\t\t}\r\n\t\t.card-image {\r\n\t\t\twidth: 100%;\r\n\t\t\tbox-shadow: $shadow;\r\n\t\t\toverflow: hidden;\r\n\t\t\tborder-radius: $border-radius-card;\r\n\t\t\tposition: relative;\r\n\t\t\tz-index: 2;\r\n\t\t\t&:before {\r\n\t\t\t\tcontent: \"\";\r\n\t\t\t\twidth: 100%;\r\n\t\t\t\tdisplay: block;\r\n\t\t\t\tpadding-bottom: 100% * $card-ratio;\r\n\t\t\t\tbackground: darken(white, 50%);\r\n\t\t\t\tborder-radius: $border-radius-card;\r\n\t\t\t}\r\n\t\t\timg {\r\n\t\t\t\tdisplay: block;\r\n\t\t\t\twidth: 100%;\r\n\t\t\t\tposition: absolute;\r\n\t\t\t\ttop: 50%;\r\n\t\t\t\tleft: 50%;\r\n\t\t\t\ttransform: translate(-50%, -50%);\r\n\t\t\t}\r\n\t\t\t.money-tag {\r\n\t\t\t\tposition: absolute;\r\n\t\t\t\tbottom: 0;\r\n\t\t\t\tleft: 0;\r\n\t\t\t\tmargin: $spacing;\r\n\t\t\t\tbox-shadow: $shadow;\r\n\t\t\t}\r\n\t\t\t.collection {\r\n\t\t\t\tposition: absolute;\r\n\t\t\t\tbottom: 0;\r\n\t\t\t\tright: 0;\r\n\t\t\t\tmargin: $spacing;\r\n\t\t\t\tbackground: lighten(black, 5%);\r\n\t\t\t\tborder-radius: $border-radius;\r\n\t\t\t\tbox-shadow: $shadow;\r\n\t\t\t\twidth: 44px;\r\n\t\t\t}\r\n\t\t}\r\n\t\t> mb-menu {\r\n\t\t\tposition: absolute;\r\n\t\t\tleft: $spacing;\r\n\t\t\tbottom: $spacing;\r\n\t\t}\r\n\t}\r\n\t.card-information {\r\n\t\twidth: 100%;\r\n\t\tpadding: ($spacing * 2.5) $spacing $spacing $spacing;\r\n\t\tmargin-top: -$spacing * 2;\r\n\t\tborder-bottom-left-radius: $border-radius-small;\r\n\t\tborder-bottom-right-radius: $border-radius-small;\r\n\t\tbottom: 0;\r\n\t\tbackground: rgba($menu-bg, 0.9);\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t\tcolor: white;\r\n\t\tline-height: 1;\r\n\t\tposition: relative;\r\n\t\tz-index: 1;\r\n\t\t&:after {\r\n\t\t\tcontent: \"\";\r\n\t\t\tborder-radius: $border-radius-small;\r\n\t\t\twidth: 100%;\r\n\t\t\theight: 100%;\r\n\t\t\tbox-shadow: $shadow-sheen;\r\n\t\t\tz-index: 10;\r\n\t\t\tposition: absolute;\r\n\t\t\tborder: $border;\r\n\t\t\ttop: 0;\r\n\t\t\tleft: 0;\r\n\t\t}\r\n\t\t.card-name {\r\n\t\t\t// Fix ellipsis overflow\r\n\t\t\tpadding-bottom: 4px;\r\n\t\t\tmargin-bottom: -4px;\r\n\t\t}\r\n\t}\r\n}\r\n",
                    "styleUrl": "./card-item-grid.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 24
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<a class=\"card-grid\" [routerLink]=\"card.route ? card.route : []\">\r\n\t<div class=\"card-image-wrapper\" *ngIf=\"card.image\">\r\n\t\t<div class=\"card-image\">\r\n\t\t\t<mb-loader [active]=\"imageLoading\"></mb-loader>\r\n\t\t\t<img\r\n\t\t\t\tsrc=\"{{ card.image }}\"\r\n\t\t\t\t[hidden]=\"imageLoading\"\r\n\t\t\t\t(load)=\"onLoad()\"\r\n\t\t\t/>\r\n\t\t\t<div\r\n\t\t\t\tclass=\"money-tag\"\r\n\t\t\t\t*ngIf=\"\r\n\t\t\t\t\tfalse && card.last_prices && card.last_prices.market_price\r\n\t\t\t\t\"\r\n\t\t\t>\r\n\t\t\t\t{{ card.last_prices.market_price | currency }}\r\n\t\t\t</div>\r\n\t\t\t<div class=\"collection\">\r\n\t\t\t\t<mb-textbox [textbox]=\"textbox\"></mb-textbox>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\r\n\t\t<div class=\"card-information ellipsis\">\r\n\t\t\t<div class=\"card-number subheading\">\r\n\t\t\t\t{{ card.getCardNumber() }}\r\n\t\t\t</div>\r\n\t\t\t<div class=\"card-name ellipsis\">\r\n\t\t\t\t{{ card.name }}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n</a>\r\n"
        },
        {
            "name": "CardItemListComponent",
            "id": "component-CardItemListComponent-9cbf3c9d09eea1913a9cd742b412243092e58e29d26aa32134414cc9c4e10a94c8dee9dab98f7fa282e9b21d00a36ad2954e5593a65f3d796233a2d43c058c70",
            "file": "src/app/pages/cards/card-item/card-item-list/card-item-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "mb-card-item-list",
            "styleUrls": [
                "./card-item-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "card-item-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "card",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "Card",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "imageLoading",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onLoad",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input } from '@angular/core';\r\nimport { Card } from '../../card/card';\r\n\r\n@Component({\r\n\tselector: 'mb-card-item-list',\r\n\ttemplateUrl: 'card-item-list.component.html',\r\n\tstyleUrls: ['./card-item-list.component.scss']\r\n})\r\n\r\nexport class CardItemListComponent implements OnInit {\r\n\r\n\t@Input() card: Card;\r\n\timageLoading: boolean = true;\r\n\r\n\tconstructor() { }\r\n\r\n\tngOnInit() { }\r\n\r\n\tonLoad() {\r\n\t\tthis.imageLoading = false;\r\n\t}\r\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"settings\",\r\n\t\t\"scaffold/typography\";\r\n\r\n.item {\r\n    transition: $transition;\r\n    cursor: pointer;\r\n    &:hover {\r\n\t\tbackground: rgba(black, .05);\r\n    }\r\n    &:active {\r\n\t\tborder-color: $primary-color!important;\r\n\t\tbox-shadow: $shadow-focus !important;\r\n\t\toutline: 0 !important;\r\n    }\r\n    .card-image {\r\n        &.placeholder img {\r\n            transform: translate(-50%, -50%) scale(1.4);    \r\n        }\r\n    }\r\n    @for $i from 1 through 50 {\r\n        &:nth-child(#{50 - $i}) {\r\n            z-index: $i;\r\n        }\r\n    }\r\n}",
                    "styleUrl": "./card-item-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 13
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"padding item\">\r\n\t<div\r\n\t\tclass=\"flex padded flex-center\"\r\n\t\t[routerLink]=\"card.route ? card.route : []\"\r\n\t>\r\n\t\t<div style=\"max-width: 64px\">\r\n\t\t\t<div class=\"card-image\" [class.placeholder]=\"!card.image\">\r\n\t\t\t\t<mb-loader *ngIf=\"false\" [active]=\"imageLoading\"></mb-loader>\r\n\t\t\t\t<img\r\n\t\t\t\t\tsrc=\"{{ card.image }}\"\r\n\t\t\t\t\t[hidden]=\"imageLoading\"\r\n\t\t\t\t\t(load)=\"onLoad()\"\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\r\n\t\t<div class=\"box\">\r\n\t\t\t<div class=\"flex padded flex-center\">\r\n\t\t\t\t<div class=\"width-3\">\r\n\t\t\t\t\t<h6>{{ card.name }}</h6>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class=\"width-3\">\r\n\t\t\t\t\t{{ card.expansion.name }}\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class=\"width-2\">\r\n\t\t\t\t\t{{ card.getCardNumber() }}\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class=\"width-2\">\r\n\t\t\t\t\t{{ card.rarity }}\r\n\t\t\t\t</div>\r\n\t\t\t\t<!-- <div class=\"width-2\">\r\n\t\t\t\t\t<div class=\"money-tag\" *ngIf=\"card.last_prices\">\r\n\t\t\t\t\t\t{{ card.last_prices.market_price | currency }}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div> -->\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n</div>\r\n"
        },
        {
            "name": "CardsComponent",
            "id": "component-CardsComponent-5c79ddbc019e39f61d8944555e354b60fa21d837d5fdaff1af67153b6aecbdd2a7627195ce8a63199de2adcfe1f6b86719f266ed56f6e354be6cbef131f9f85a",
            "file": "src/app/pages/cards/cards.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "mb-cards",
            "styleUrls": [
                "./cards.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./cards.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "artist",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "items",
                    "defaultValue": "new Items()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Items",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "rarity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "subtype",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "supertype",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 28
                }
            ],
            "methodsClass": [
                {
                    "name": "_getCards",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getCards",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 115,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getCardsResponse",
                    "args": [
                        {
                            "name": "res",
                            "type": "CardResults",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "res",
                            "type": "CardResults",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFilteredCards",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 129,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setupControls",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setupSubscriptions",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\r\nimport { Menu, MenuItem } from '@app/controls/menu';\r\nimport { SearchService } from '@app/services/search.service';\r\nimport {\r\n\tCardsService,\r\n\tCardResults,\r\n\tGetCards as GetCards,\r\n\tGetCardsFiltered,\r\n} from '../../services/cards.service';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { ItemDisplayType } from '@app/layout/main/items/items-filter/items-filter';\r\nimport { Title } from '@angular/platform-browser';\r\nimport { AuthenticationService } from '../../services/auth.service';\r\nimport { LoaderService } from '@app/controls';\r\nimport { ItemGroup, Items } from '@app/layout/main';\r\nimport { SetSortByCards } from './card/card';\r\nimport { AppSettings } from '@app/app';\r\nimport '@app/helpers/string.extensions';\r\nimport { Symbols } from '@app/models';\r\n\r\n@Component({\r\n\tselector: 'mb-cards',\r\n\ttemplateUrl: './cards.component.html',\r\n\tstyleUrls: ['./cards.component.scss'],\r\n})\r\nexport class CardsComponent implements OnInit {\r\n\titems: Items = new Items();\r\n\ttype: string;\r\n\tartist: string;\r\n\tsupertype: string;\r\n\tsubtype: string;\r\n\trarity: string;\r\n\r\n\tconstructor(\r\n\t\tprivate route: ActivatedRoute,\r\n\t\tprivate titleService: Title,\r\n\t\tprivate cardsService: CardsService,\r\n\t\tprivate loaderService: LoaderService\r\n\t) {}\r\n\r\n\tngOnInit() {\r\n\t\tthis.setupSubscriptions();\r\n\t\tthis.setupControls();\r\n\t}\r\n\r\n\tsetupSubscriptions() {\r\n\t\tthis.route.params.subscribe((params) => {\r\n\t\t\tthis.type = params['type']?.replace('-', ' ');\r\n\t\t\tthis.artist = params['artist']?.replace('-', ' ');\r\n\t\t\tthis.supertype = params['supertype']?.replace('-', ' ');\r\n\t\t\tthis.subtype = params['subtype']?.replace('-', ' ');\r\n\t\t\tthis.rarity = params['rarity']?.replace('-', ' ');\r\n\t\t\tif (\r\n\t\t\t\tthis.type ||\r\n\t\t\t\tthis.artist ||\r\n\t\t\t\tthis.supertype ||\r\n\t\t\t\tthis.subtype ||\r\n\t\t\t\tthis.rarity\r\n\t\t\t) {\r\n\t\t\t} else {\r\n\t\t\t\tthis.getCards();\r\n\t\t\t}\r\n\t\t});\r\n\t\tthis.cardsService.getCardsObservable().subscribe((res) => {\r\n\t\t\tthis.getCardsResponse(res);\r\n\t\t});\r\n\t\tthis.cardsService.getCardsFilteredObservable().subscribe((res) => {\r\n\t\t\tthis.getCardsResponse(res);\r\n\t\t});\r\n\t}\r\n\r\n\tgetCardsResponse(res: CardResults) {\r\n\t\tif (res) {\r\n\t\t\tthis.loaderService.clearItemLoading('getCards');\r\n\t\t\tthis.loaderService.clearItemLoading('getFilteredCards');\r\n\t\t\tthis.items.footer.totalPages = res.total_pages;\r\n\t\t\tthis.items.footer.totalItems = res.total_results;\r\n\t\t\tif (res.cards && res.cards.length) {\r\n\t\t\t\tthis.items.itemGroups = [\r\n\t\t\t\t\tnew ItemGroup({\r\n\t\t\t\t\t\titems: res.cards,\r\n\t\t\t\t\t}),\r\n\t\t\t\t];\r\n\t\t\t} else {\r\n\t\t\t\tthis.items.itemGroups = [];\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tsetupControls() {\r\n\t\tthis.items;\r\n\t\tthis.items.noResults = 'No cards found';\r\n\t\tthis.items.noResultsImage = Symbols.cards;\r\n\t\tthis.titleService.setTitle(AppSettings.titlePrefix + 'All Cards');\r\n\t\tthis.items.showHeader = false;\r\n\t\tthis.items.filter.textboxSearch.placeholder = 'Search Cards...';\r\n\t\tthis.items.filter.selectSortDirection.value = 'asc';\r\n\t\tSetSortByCards(this.items.filter);\r\n\t}\r\n\r\n\t_getCards() {\r\n\t\tif (\r\n\t\t\tthis.type ||\r\n\t\t\tthis.artist ||\r\n\t\t\tthis.supertype ||\r\n\t\t\tthis.subtype ||\r\n\t\t\tthis.rarity\r\n\t\t) {\r\n\t\t\tthis.getFilteredCards();\r\n\t\t} else {\r\n\t\t\tthis.getCards();\r\n\t\t}\r\n\t}\r\n\r\n\tgetCards() {\r\n\t\tthis.loaderService.addItemLoading('getCards');\r\n\t\tthis.items.showHeader = false;\r\n\t\tthis.cardsService.getCards(\r\n\t\t\tnew GetCards({\r\n\t\t\t\tpage: this.items.footer.page,\r\n\t\t\t\tpage_size: this.items.footer.pageSize,\r\n\t\t\t\tquery: this.items.filter.textboxSearch.value,\r\n\t\t\t\tsort_by: this.items.filter.selectSortBy.value,\r\n\t\t\t\tsort_direction: this.items.filter.selectSortDirection.value,\r\n\t\t\t})\r\n\t\t);\r\n\t}\r\n\r\n\tgetFilteredCards() {\r\n\t\tthis.loaderService.addItemLoading('getFilteredCards');\r\n\t\tthis.cardsService.getCardsFiltered(\r\n\t\t\tnew GetCardsFiltered({\r\n\t\t\t\tpage: this.items.footer.page,\r\n\t\t\t\tpage_size: this.items.footer.pageSize,\r\n\t\t\t\tquery: this.items.filter.textboxSearch.value,\r\n\t\t\t\tsort_by: this.items.filter.selectSortBy.value,\r\n\t\t\t\tsort_direction: this.items.filter.selectSortDirection.value,\r\n\t\t\t\ttype: this.type,\r\n\t\t\t\trarity: this.rarity,\r\n\t\t\t\tartist: this.artist,\r\n\t\t\t\tsubtype: this.subtype,\r\n\t\t\t\tsupertype: this.supertype,\r\n\t\t\t})\r\n\t\t);\r\n\t}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./cards.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "titleService",
                        "type": "Title",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cardsService",
                        "type": "CardsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "loaderService",
                        "type": "LoaderService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 32,
                "jsdoctags": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "titleService",
                        "type": "Title",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cardsService",
                        "type": "CardsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "loaderService",
                        "type": "LoaderService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mb-items [items]=\"items\" (outputGetItems)=\"_getCards()\"> </mb-items>\r\n"
        },
        {
            "name": "CheckboxComponent",
            "id": "component-CheckboxComponent-d904921d7118a35134f6a67d2a667ba772f7f619c6777ed00c64b71c44dce5f0cb07e5a771d7232c23cc7e912c40934c8748fe9c2c23b98329273e2b1f2057bb",
            "file": "src/app/controls/checkbox/checkbox.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => CheckboxComponent), multi: true,\n}",
                    "type": "component"
                }
            ],
            "selector": "mb-checkbox",
            "styleUrls": [
                "./checkbox.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./checkbox.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "checkbox",
                    "defaultValue": "new Checkbox()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 45,
                    "type": "Checkbox",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "click",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 26
                }
            ],
            "methodsClass": [
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "_value",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "_value",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, forwardRef } from '@angular/core';\r\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\r\nimport { Checkbox } from './checkbox';\r\n\r\n@Component({\r\n\tselector: 'mb-checkbox',\r\n\ttemplateUrl: './checkbox.component.html',\r\n\tstyleUrls: ['./checkbox.component.scss'],\r\n\r\n\tproviders: [\r\n\t\t{\r\n\t\t\tprovide: NG_VALUE_ACCESSOR,\r\n\t\t\tuseExisting: forwardRef(() => CheckboxComponent),\r\n\t\t\tmulti: true,\r\n\t\t},\r\n\t],\r\n})\r\nexport class CheckboxComponent implements ControlValueAccessor {\r\n\tconstructor() {}\r\n\r\n\tclick = (e: MouseEvent) => {\r\n\t\te.stopPropagation();\r\n\t};\r\n\r\n\tonChange: any = () => {};\r\n\tonTouched: any = () => {};\r\n\tregisterOnChange(fn) {\r\n\t\tthis.onChange = fn;\r\n\t}\r\n\tregisterOnTouched(fn) {\r\n\t\tthis.onTouched = fn;\r\n\t}\r\n\twriteValue(_value) {\r\n\t\tthis.value = _value;\r\n\t}\r\n\tget value() {\r\n\t\treturn this.checkbox.checked;\r\n\t}\r\n\tset value(_value) {\r\n\t\tthis.checkbox.checked = _value;\r\n\t\tthis.onChange(_value);\r\n\t\tthis.onTouched();\r\n\t}\r\n\r\n\t@Input() checkbox: Checkbox = new Checkbox();\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"settings\";\r\n\r\n.checkbox {\r\n\tdisplay: flex;\r\n\talign-items: center;\r\n\tinput[type=\"checkbox\"] {\r\n\t\tappearance: none;\r\n\t\twidth: 24px;\r\n\t\theight: 24px;\r\n\t\tborder-radius: $border-radius-small;\r\n\t\tbox-shadow: $shadow-inset;\r\n\t\tborder: $border;\r\n\t\tbackground: $input-bg;\r\n\t\tposition: relative;\r\n\t\tmargin: 0;\r\n\t\ttransition: $transition;\r\n\t\tcursor: pointer;\r\n\t\t&:after {\r\n\t\t\tcontent: \"\";\r\n\t\t\twidth: 8px;\r\n\t\t\theight: 14px;\r\n\t\t\tborder-bottom: 3px solid $primary-color;\r\n\t\t\tborder-right: 3px solid $primary-color;\r\n\t\t\tmargin-top: -1px;\r\n\t\t\topacity: 0;\r\n\t\t\tposition: absolute;\r\n\t\t\ttop: 50%;\r\n\t\t\tleft: 50%;\r\n\t\t\ttransform: translate(-50%, -50%) rotate(45deg);\r\n\t\t\ttransition: $transition;\r\n\t\t}\r\n\t\t&:checked {\r\n\t\t\t&:after {\r\n\t\t\t\topacity: 1;\r\n\t\t\t}\r\n\t\t}\r\n\t\t&:focus {\r\n\t\t\tbox-shadow: $shadow-focus-inset, $shadow-focus;\r\n\t\t\tborder-color: $primary-color;\r\n\t\t}\r\n\t}\r\n\tlabel {\r\n\t\tmargin-bottom: 0;\r\n\t\tpadding-left: $spacing;\r\n\t\tcursor: pointer;\r\n\t}\r\n}\r\n",
                    "styleUrl": "./checkbox.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 18
            },
            "implements": [
                "ControlValueAccessor"
            ],
            "accessors": {
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "_value",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 39,
                        "jsdoctags": [
                            {
                                "name": "_value",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "",
                        "line": 36
                    }
                }
            },
            "templateData": "<div class=\"checkbox\" (click)=\"click($event)\">\r\n\t<input [id]=\"checkbox.id\" type=\"checkbox\" [checked]=\"value\" />\r\n\t<label [for]=\"checkbox.id\" *ngIf=\"checkbox.text\" class=\"label\">{{checkbox.text}}</label>\r\n</div>"
        },
        {
            "name": "CollectionCardGroupCardsComponent",
            "id": "component-CollectionCardGroupCardsComponent-9659417c3a9c8b1d8f2aac798ae251c25ed7c203dbff833b5a2a641c81b6803a7001b84ae317e3851bba8e0fa85a8bc0d5e3db6cf61a049366785a21ef3f3d03",
            "file": "src/app/pages/collection/collection-card-group/collection-card-group-cards/collection-card-group-cards.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "collection-card-group-cards",
            "styleUrls": [
                "./collection-card-group-cards.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "collection-card-group-cards.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n\tselector: 'collection-card-group-cards',\r\n\ttemplateUrl: 'collection-card-group-cards.component.html',\r\n\tstyleUrls: ['./collection-card-group-cards.component.scss'],\r\n})\r\nexport class CollectionCardGroupCardsComponent implements OnInit {\r\n\tconstructor() {}\r\n\tngOnInit() {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./collection-card-group-cards.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": ""
        },
        {
            "name": "CollectionCardGroupComponent",
            "id": "component-CollectionCardGroupComponent-72936aa62d941ed2f10e6d65107a609865cdf84225be1b2ecdcf5d5bda5326cb65fae01a30f5cdf432f62095822202710ec8a135027f9feb5cab20fe5fa4f8fc",
            "file": "src/app/pages/collection/collection-card-group/collection-card-group.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "collection-card-group",
            "styleUrls": [
                "./collection-card-group.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "collection-card-group.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "buttonCancel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Button",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "buttonSave",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Button",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "selectIcon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Select",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "selectType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Select",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "textareaDescription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Textarea",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "textboxName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Textbox",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "togglePublic",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Toggle",
                    "optional": false,
                    "description": "",
                    "line": 27
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "submit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 124,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Icons } from '@app/models';\r\nimport { Router } from '@angular/router';\r\nimport { AuthenticationService } from '@app/services/auth.service';\r\nimport {\r\n\tTextbox,\r\n\tButton,\r\n\tTextarea,\r\n\tToggle,\r\n\tSelect,\r\n\tSelectOption,\r\n\tButtonType,\r\n} from '@app/controls';\r\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\r\nimport { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n\tselector: 'collection-card-group',\r\n\ttemplateUrl: 'collection-card-group.component.html',\r\n\tstyleUrls: ['./collection-card-group.component.scss'],\r\n})\r\nexport class CollectionCardGroupComponent implements OnInit {\r\n\tform: FormGroup;\r\n\ttextboxName: Textbox;\r\n\tselectType: Select;\r\n\tselectIcon: Select;\r\n\ttextareaDescription: Textarea;\r\n\ttogglePublic: Toggle;\r\n\tbuttonSave: Button;\r\n\tbuttonCancel: Button;\r\n\tconstructor(\r\n\t\tprivate formBuilder: FormBuilder,\r\n\t\tprivate authenticationService: AuthenticationService,\r\n\t\tprivate router: Router\r\n\t) {\r\n\t\tif (!this.authenticationService.currentUserValue) {\r\n\t\t\tthis.router.navigateByUrl('/');\r\n\t\t}\r\n\t}\r\n\r\n\tngOnInit() {\r\n\t\tthis.form = this.formBuilder.group({\r\n\t\t\tnameControl: ['', Validators.required],\r\n\t\t\tselectType: ['', Validators.required],\r\n\t\t\tselectIcon: ['', Validators.required],\r\n\t\t\tdescriptionControl: [''],\r\n\t\t\tpublicControl: [''],\r\n\t\t});\r\n\t\tthis.textboxName = new Textbox({\r\n\t\t\tlabel: 'Name',\r\n\t\t});\r\n\t\tthis.selectType = new Select({\r\n\t\t\tlabel: 'Type',\r\n\t\t\tadvancedSelect: true,\r\n\t\t\tmultiple: true,\r\n\t\t\tplaceholder: 'Select icon...',\r\n\t\t\toptions: [\r\n\t\t\t\tnew SelectOption({\r\n\t\t\t\t\ttext: 'Binder',\r\n\t\t\t\t\ticon: Icons.binder,\r\n\t\t\t\t}),\r\n\t\t\t\tnew SelectOption({\r\n\t\t\t\t\ttext: 'Deck',\r\n\t\t\t\t\ticon: Icons.deck,\r\n\t\t\t\t}),\r\n\t\t\t\tnew SelectOption({\r\n\t\t\t\t\ttext: 'Trades',\r\n\t\t\t\t\ticon: Icons.exchange,\r\n\t\t\t\t}),\r\n\t\t\t\tnew SelectOption({\r\n\t\t\t\t\ttext: 'Box',\r\n\t\t\t\t\ticon: Icons.archive,\r\n\t\t\t\t}),\r\n\t\t\t\tnew SelectOption({\r\n\t\t\t\t\ttext: 'Group',\r\n\t\t\t\t\ticon: Icons.folder,\r\n\t\t\t\t}),\r\n\t\t\t],\r\n\t\t});\r\n\t\tthis.selectIcon = new Select({\r\n\t\t\tlabel: 'Icon',\r\n\t\t\tadvancedSelect: true,\r\n\t\t\tplaceholder: 'Select icon...',\r\n\t\t\toptions: [\r\n\t\t\t\tnew SelectOption({\r\n\t\t\t\t\ttext: 'Binder',\r\n\t\t\t\t\ticon: Icons.binder,\r\n\t\t\t\t}),\r\n\t\t\t\tnew SelectOption({\r\n\t\t\t\t\ttext: 'Deck',\r\n\t\t\t\t\ticon: Icons.deck,\r\n\t\t\t\t}),\r\n\t\t\t\tnew SelectOption({\r\n\t\t\t\t\ttext: 'Trades',\r\n\t\t\t\t\ticon: Icons.exchange,\r\n\t\t\t\t}),\r\n\t\t\t\tnew SelectOption({\r\n\t\t\t\t\ttext: 'Box',\r\n\t\t\t\t\ticon: Icons.archive,\r\n\t\t\t\t}),\r\n\t\t\t\tnew SelectOption({\r\n\t\t\t\t\ttext: 'Group',\r\n\t\t\t\t\ticon: Icons.folder,\r\n\t\t\t\t}),\r\n\t\t\t],\r\n\t\t});\r\n\t\tthis.textareaDescription = new Textarea({\r\n\t\t\tlabel: 'Description',\r\n\t\t});\r\n\t\tthis.togglePublic = new Toggle({\r\n\t\t\ttext: 'Private',\r\n\t\t\ttextChecked: 'Public',\r\n\t\t});\r\n\t\tthis.buttonSave = new Button({\r\n\t\t\ttext: 'Save',\r\n\t\t\ttype: ButtonType.submit,\r\n\t\t});\r\n\t\tthis.buttonCancel = new Button({\r\n\t\t\ttext: 'Cancel',\r\n\t\t\tclasses: 'secondary',\r\n\t\t\troute: '/collection/dashboard',\r\n\t\t});\r\n\t}\r\n\r\n\tsubmit() {\r\n\t\tif (this.form.invalid) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./collection-card-group.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authenticationService",
                        "type": "AuthenticationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 29,
                "jsdoctags": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authenticationService",
                        "type": "AuthenticationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"flex justify-center\">\r\n\t<form\r\n\t\tclass=\"padding-4\"\r\n\t\tstyle=\"width: 500px; max-width: 100%\"\r\n\t\t[formGroup]=\"form\"\r\n\t\t(ngSubmit)=\"submit()\"\r\n\t>\r\n\t\t<div class=\"flex vertical padded-2\">\r\n\t\t\t<div>\r\n\t\t\t\t<h1>Add Group</h1>\r\n\t\t\t</div>\r\n\t\t\t<div>\r\n\t\t\t\t<mb-textbox\r\n\t\t\t\t\t[formControl]=\"form.controls.nameControl\"\r\n\t\t\t\t\t[textbox]=\"textboxName\"\r\n\t\t\t\t></mb-textbox>\r\n\t\t\t</div>\r\n\t\t\t<div class=\"relative z-3\">\r\n\t\t\t\t<mb-select\r\n\t\t\t\t\t[formControl]=\"form.controls.selectType\"\r\n\t\t\t\t\t[select]=\"selectType\"\r\n\t\t\t\t>\r\n\t\t\t\t</mb-select>\r\n\t\t\t</div>\r\n\t\t\t<div class=\"relative z-2\">\r\n\t\t\t\t<mb-select\r\n\t\t\t\t\t[formControl]=\"form.controls.selectIcon\"\r\n\t\t\t\t\t[select]=\"selectIcon\"\r\n\t\t\t\t>\r\n\t\t\t\t</mb-select>\r\n\t\t\t</div>\r\n\t\t\t<div class=\"relative z-1\">\r\n\t\t\t\t<mb-textarea\r\n\t\t\t\t\t[formControl]=\"form.controls.descriptionControl\"\r\n\t\t\t\t\t[textarea]=\"textareaDescription\"\r\n\t\t\t\t>\r\n\t\t\t\t</mb-textarea>\r\n\t\t\t</div>\r\n\t\t\t<div class=\"relative z-1\">\r\n\t\t\t\t<mb-toggle\r\n\t\t\t\t\t[formControl]=\"form.controls.publicControl\"\r\n\t\t\t\t\t[toggle]=\"togglePublic\"\r\n\t\t\t\t></mb-toggle>\r\n\t\t\t</div>\r\n\t\t\t<div>\r\n\t\t\t\t<div class=\"flex\">\r\n\t\t\t\t\t<div class=\"box\">\r\n\t\t\t\t\t\t<mb-button [button]=\"buttonCancel\"></mb-button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<mb-button [button]=\"buttonSave\"></mb-button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</form>\r\n</div>\r\n"
        },
        {
            "name": "CollectionComponent",
            "id": "component-CollectionComponent-b598fc7ded6e71e16cd4bccb0be7521e908230479d0a3e82f4e55e54b3ab300f6c77760b8b5af537ecfa74be2a0c9f9573084d5eb5af8edd03f5cfad277eaba2",
            "file": "src/app/pages/collection/collection.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "collection",
            "styleUrls": [
                "./collection.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "collection.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "items",
                    "defaultValue": "new Items()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Items",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "menuSidebar",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Menu",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "progressBar",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ProgressBar",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "showAddGroup",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "showAll",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "showDashboard",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "symbolCards",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Symbols",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "symbolPokemon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Symbols",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methodsClass": [
                {
                    "name": "getCollectionCards",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setupControls",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setupSubscriptions",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { AuthenticationService } from './../../services/auth.service';\r\nimport { UserCardsService } from './../../components/card-collection/card-collection.service';\r\nimport { Items } from './../../layout/main/items/items';\r\nimport { LoaderService } from './../../controls/loader/loader.service';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { Icons } from '@app/models';\r\nimport { Menu, MenuItem } from '@app/controls/menu';\r\nimport { ProgressBar } from './../../controls/progress-bar/progress-bar';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { Symbols } from '@app/models';\r\nimport { GetCards } from '@app/services/cards.service';\r\nimport { ItemGroup } from '@app/layout';\r\n\r\n@Component({\r\n\tselector: 'collection',\r\n\ttemplateUrl: 'collection.component.html',\r\n\tstyleUrls: ['./collection.component.scss'],\r\n})\r\nexport class CollectionComponent implements OnInit {\r\n\tprogressBar: ProgressBar;\r\n\tsymbolCards: Symbols;\r\n\tsymbolPokemon: Symbols;\r\n\tmenuSidebar: Menu;\r\n\titems: Items = new Items();\r\n\r\n\tconstructor(\r\n\t\tprivate loaderService: LoaderService,\r\n\t\tprivate cardCollectionService: UserCardsService,\r\n\t\tprivate authenticationService: AuthenticationService\r\n\t) {}\r\n\r\n\tshowDashboard = () => {\r\n\t\treturn window.location.pathname === '/collection/dashboard';\r\n\t};\r\n\tshowAddGroup = () => {\r\n\t\treturn window.location.pathname === '/collection/add';\r\n\t};\r\n\tshowAll = () => {\r\n\t\treturn window.location.pathname === '/collection';\r\n\t};\r\n\r\n\tngOnInit() {\r\n\t\tthis.setupSubscriptions();\r\n\t\tthis.setupControls();\r\n\t\tthis.getCollectionCards();\r\n\t}\r\n\r\n\tsetupSubscriptions() {\r\n\t\tthis.cardCollectionService.getUserCardsObservable().subscribe((res) => {\r\n\t\t\tif (res) {\r\n\t\t\t\tthis.loaderService.clearItemLoading('getCollectionCards');\r\n\t\t\t\tthis.items.footer.totalPages = res.total_pages;\r\n\t\t\t\tthis.items.footer.totalItems = res.total_results;\r\n\t\t\t\tif (res.cards && res.cards.length) {\r\n\t\t\t\t\tthis.items.itemGroups = [\r\n\t\t\t\t\t\tnew ItemGroup({\r\n\t\t\t\t\t\t\titems: res.cards,\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t];\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.items.itemGroups = [];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tsetupControls() {\r\n\t\tthis.progressBar = new ProgressBar({\r\n\t\t\ttotal: 80,\r\n\t\t\tvalue: 20,\r\n\t\t});\r\n\t\tthis.symbolCards = Symbols.cards;\r\n\t\tthis.symbolPokemon = Symbols.pokeball;\r\n\r\n\t\tthis.menuSidebar = new Menu({\r\n\t\t\tround: false,\r\n\t\t\titems: [\r\n\t\t\t\tnew MenuItem({\r\n\t\t\t\t\ttext: 'Dashboard',\r\n\t\t\t\t\ticon: Icons.dashboard,\r\n\t\t\t\t\troute: '/collection/dashboard',\r\n\t\t\t\t\texactMatch: true,\r\n\t\t\t\t}),\r\n\t\t\t\tnew MenuItem({\r\n\t\t\t\t\ttext: 'All Cards',\r\n\t\t\t\t\tsymbol: Symbols.cards,\r\n\t\t\t\t\troute: '/collection',\r\n\t\t\t\t\texactMatch: true,\r\n\t\t\t\t}),\r\n\t\t\t\tnew MenuItem({\r\n\t\t\t\t\ttext: 'Example Binder 1',\r\n\t\t\t\t\ticon: Icons.archive,\r\n\t\t\t\t\troute: '/collection/123',\r\n\t\t\t\t\texactMatch: true,\r\n\t\t\t\t}),\r\n\t\t\t\tnew MenuItem({\r\n\t\t\t\t\ttext: 'Add Group',\r\n\t\t\t\t\ticon: Icons.plus,\r\n\t\t\t\t\troute: '/collection/add',\r\n\t\t\t\t\texactMatch: true,\r\n\t\t\t\t}),\r\n\t\t\t],\r\n\t\t});\r\n\t}\r\n\r\n\tgetCollectionCards() {\r\n\t\tthis.loaderService.addItemLoading('getCollectionCards');\r\n\t\tthis.cardCollectionService.getUserCards(\r\n\t\t\tnew GetCards({\r\n\t\t\t\tpage: this.items.footer.page,\r\n\t\t\t\tpage_size: this.items.footer.pageSize,\r\n\t\t\t\tquery: this.items.filter.textboxSearch.value,\r\n\t\t\t\tsort_by: this.items.filter.selectSortBy.value,\r\n\t\t\t\tsort_direction: this.items.filter.selectSortDirection.value,\r\n\t\t\t\tuser_id: this.authenticationService.currentUserValue.id,\r\n\t\t\t})\r\n\t\t);\r\n\t}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".symbol {\r\n\tdisplay: block;\r\n\tfilter: contrast(0) sepia(100%) hue-rotate(164deg) brightness(1) saturate(2);\r\n\twidth: 32px;\r\n}\r\n",
                    "styleUrl": "./collection.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "loaderService",
                        "type": "LoaderService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cardCollectionService",
                        "type": "UserCardsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authenticationService",
                        "type": "AuthenticationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "loaderService",
                        "type": "LoaderService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cardCollectionService",
                        "type": "UserCardsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authenticationService",
                        "type": "AuthenticationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"flex h-100\">\r\n\t<div class=\"input-bg\">\r\n\t\t<mb-menu [menu]=\"menuSidebar\"></mb-menu>\r\n\t</div>\r\n\t<div class=\"box\">\r\n\t\t<collection-dashboard *ngIf=\"showDashboard()\"></collection-dashboard>\r\n\t\t<mb-items\r\n\t\t\t*ngIf=\"showAll()\"\r\n\t\t\t[items]=\"items\"\r\n\t\t\t(outputGetItems)=\"getCollectionCards()\"\r\n\t\t></mb-items>\r\n\t\t<collection-card-group\r\n\t\t\tclass=\"padding-4 box\"\r\n\t\t\t*ngIf=\"showAddGroup()\"\r\n\t\t></collection-card-group>\r\n\t\t<div class=\"max\" *ngIf=\"false\">\r\n\t\t\t<div class=\"flex padded\">\r\n\t\t\t\t<div class=\"width-4 medium-12\">\r\n\t\t\t\t\t<div class=\"panel\">\r\n\t\t\t\t\t\t<div class=\"flex padded\">\r\n\t\t\t\t\t\t\t<div class=\"width-6 flex vertical flex-center\">\r\n\t\t\t\t\t\t\t\t<img class=\"symbol\" [src]=\"symbolCards\" />\r\n\t\t\t\t\t\t\t\t<h4>\r\n\t\t\t\t\t\t\t\t\t987<span class=\"subheading\">/40,000</span>\r\n\t\t\t\t\t\t\t\t</h4>\r\n\t\t\t\t\t\t\t\t<div class=\"subheading\">Total Cards</div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div class=\"width-6 flex vertical flex-center\">\r\n\t\t\t\t\t\t\t\t<img class=\"symbol\" [src]=\"symbolPokemon\" />\r\n\t\t\t\t\t\t\t\t<h4>300<span class=\"subheading\">/999</span></h4>\r\n\t\t\t\t\t\t\t\t<div class=\"subheading\">Total Pokemon</div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div class=\"width-6\">\r\n\t\t\t\t\t\t\t\t<h4>48<span class=\"subheading\">/88</span></h4>\r\n\t\t\t\t\t\t\t\t<div class=\"subheading\">Total Sets</div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class=\"width-8 medium-12\">\r\n\t\t\t\t\t<div class=\"panel\">\r\n\t\t\t\t\t\t<h4>History</h4>\r\n\t\t\t\t\t\t<p>\r\n\t\t\t\t\t\t\tGraph showing cards added to collection over time.\r\n\t\t\t\t\t\t</p>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class=\"width-6 medium-12\">\r\n\t\t\t\t\t<div class=\"panel\">\r\n\t\t\t\t\t\t<h4>Expansions</h4>\r\n\t\t\t\t\t\t<p>Progress collecting each set, sorted by progress.</p>\r\n\t\t\t\t\t\t<div class=\"flex padded\">\r\n\t\t\t\t\t\t\t<div class=\"width-12\">\r\n\t\t\t\t\t\t\t\t<h6>Hidden Fates</h6>\r\n\t\t\t\t\t\t\t\t<progress-bar\r\n\t\t\t\t\t\t\t\t\t[progressBar]=\"progressBar\"\r\n\t\t\t\t\t\t\t\t></progress-bar>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class=\"width-6 medium-12\">\r\n\t\t\t\t\t<div class=\"panel\">\r\n\t\t\t\t\t\t<h4>Pokemon</h4>\r\n\t\t\t\t\t\t<p>\r\n\t\t\t\t\t\t\tProgress collecting each pokemon, sorted by\r\n\t\t\t\t\t\t\tprogress.\r\n\t\t\t\t\t\t</p>\r\n\t\t\t\t\t\t<div class=\"flex padded\">\r\n\t\t\t\t\t\t\t<div class=\"col xlarge-12\">\r\n\t\t\t\t\t\t\t\t<h6>Charizard</h6>\r\n\t\t\t\t\t\t\t\t<progress-bar\r\n\t\t\t\t\t\t\t\t\t[progressBar]=\"progressBar\"\r\n\t\t\t\t\t\t\t\t></progress-bar>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n</div>\r\n"
        },
        {
            "name": "CollectionDashboardComponent",
            "id": "component-CollectionDashboardComponent-f49f9bde207b11a34a6e496104a84ba31f904778033432fd2021bd9647a76408a3c77f30556d72b22b4bb9526b972df134b2e463c4b62f49c6662a4cac8bef96",
            "file": "src/app/pages/collection/collection-dashboard/collection-dashboard.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "collection-dashboard",
            "styleUrls": [
                "./collection-dashboard.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "collection-dashboard.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "emptyComingSoon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Empty",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Icons } from '@app/models';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { Empty } from '@app/controls';\r\n\r\n@Component({\r\n\tselector: 'collection-dashboard',\r\n\ttemplateUrl: 'collection-dashboard.component.html',\r\n\tstyleUrls: ['./collection-dashboard.component.scss'],\r\n})\r\nexport class CollectionDashboardComponent implements OnInit {\r\n\temptyComingSoon: Empty;\r\n\tngOnInit() {\r\n\t\tthis.emptyComingSoon = new Empty({\r\n\t\t\ttext: 'Dashboard Coming Soon...',\r\n\t\t\ticon: Icons.dashboard,\r\n\t\t});\r\n\t}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./collection-dashboard.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit"
            ],
            "templateData": "<mb-empty [empty]=\"emptyComingSoon\"></mb-empty>\r\n"
        },
        {
            "name": "DialogComponent",
            "id": "component-DialogComponent-d6e2e0a4bdaedcf1d73ce6a338b122bc7f36d42bbf5c143a0a8db1103465e957085ac1cf38bb875e67e3a7a78c5effdd11df8c9b1f0b1b163c34eebb69cdcdba",
            "file": "src/app/controls/dialog/dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "mb-dialog",
            "styleUrls": [
                "./dialog.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "dialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "Dialog",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "loading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "keyUp",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'window:keyup', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "window:keyup",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, ElementRef, HostListener } from '@angular/core';\r\nimport { Dialog } from './dialog';\r\n\r\n@Component({\r\n\tselector: 'mb-dialog',\r\n\ttemplateUrl: './dialog.component.html',\r\n\tstyleUrls: ['./dialog.component.scss']\r\n})\r\n\r\nexport class DialogComponent implements OnInit {\r\n\r\n\t@HostListener('window:keyup', ['$event'])\r\n\tkeyUp(event: KeyboardEvent) {\r\n\t\tif (event.key === 'Escape') {\r\n\t\t\tthis.dialog.close();\r\n\t\t}\r\n\t}\r\n\t@Input() dialog: Dialog;\r\n\tloading: boolean;\r\n\r\n\tconstructor(private elRef: ElementRef) { }\r\n\r\n\tngOnInit(): void {\r\n\t\t\r\n\t}\r\n\r\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"settings\";\r\n\r\n.dialog {\r\n\tposition: fixed;\r\n\ttop: 50%;\r\n\tleft: 50%;\r\n\ttransform: translate(-50%, -50%);\r\n\tmin-width: 200px;\r\n\tdisplay: flex;\r\n\tflex-direction: column;\r\n\tbackground: $panel-bg;\r\n\tbox-shadow: $shadow-large;\r\n\tborder-radius: $border-radius-small;\r\n\tmax-width: calc(100% - #{$spacing * 4});\r\n\tmax-height: calc(100% - #{$spacing * 4});\r\n\toverflow: hidden;\r\n\t@media (max-width: $screen-small) {\r\n\t\twidth: calc(100% - #{$spacing * 4});\r\n\t}\r\n\tcursor: default;\r\n\t.dialog-header {\r\n\t\tpadding: $spacing * 2;\r\n\t\tborder-bottom: $border;\r\n\t\t.dialog-close {\r\n\t\t\tcursor: pointer;\r\n\t\t\tfa-icon {\r\n\t\t\t\twidth: 28px;\r\n\t\t\t\theight: 28px;\r\n\t\t\t\tpadding: $spacing / 2;\r\n\t\t\t\ttransition: $transition;\r\n\t\t\t\tborder-radius: $border-radius-small;\r\n\t\t\t\t&:hover {\r\n\t\t\t\t\tbox-shadow: $shadow-focus;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t.dialog-content {\r\n\t\tpadding: $spacing * 2;\r\n\t\tflex: 1;\r\n\t\toverflow-y: auto;\r\n\t}\r\n\t.dialog-footer {\r\n\r\n\t}\r\n}",
                    "styleUrl": "./dialog.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "elRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "elRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div\r\n\tclass=\"overlay pointer\"\r\n\t[class.active]=\"dialog && dialog.active\"\r\n\t(click)=\"dialog.close()\"\r\n>\r\n\t<div class=\"max relative\">\r\n\t\t<div *ngIf=\"dialog\" class=\"dialog\" (click)=\"$event.stopPropagation()\">\r\n\t\t\t<div class=\"dialog-header\">\r\n\t\t\t\t<div class=\"flex padded flex-center\">\r\n\t\t\t\t\t<div class=\"box min-0 ellipsis\">\r\n\t\t\t\t\t\t<div class=\"dialog-title\">\r\n\t\t\t\t\t\t\t<h4>{{ dialog.title }}</h4>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<div class=\"dialog-close\" (click)=\"dialog.close()\">\r\n\t\t\t\t\t\t\t<fa-icon icon=\"times\"></fa-icon>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<div\r\n\t\t\t\tclass=\"dialog-content\"\r\n\t\t\t\t[innerHtml]=\"dialog.content\"\r\n\t\t\t\t*ngIf=\"dialog.content\"\r\n\t\t\t></div>\r\n\t\t\t<mb-form *ngIf=\"dialog.form\" [form]=\"dialog.form\"></mb-form>\r\n\t\t\t<div class=\"dialog-footer\" *ngIf=\"dialog.buttons.length\">\r\n\t\t\t\t<div class=\"flex padded\">\r\n\t\t\t\t\t<div *ngFor=\"let button of dialog.buttons\">\r\n\t\t\t\t\t\t<mb-button [button]=\"button\"></mb-button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<mb-loader [active]=\"loading\"></mb-loader>\r\n\t\t</div>\r\n\t</div>\r\n</div>\r\n"
        },
        {
            "name": "EditorComponent",
            "id": "component-EditorComponent-cb57a9ef80d6a1e6cc71cad3bf7598a1043a724578660e751b4f12851f80883b1103976b65f2a4b468a1a0ce446e2368edf47a4ddf5202b13efaed61990d82fd",
            "file": "src/app/controls/editor/editor.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "mb-editor",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "editor.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "editor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "Editor",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "ckEditor",
                    "defaultValue": "DecoupledEditor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onReady",
                    "args": [
                        {
                            "name": "editor",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "editor",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input } from '@angular/core';\r\nimport * as DecoupledEditor from '@ckeditor/ckeditor5-build-classic';\r\nimport { Editor } from './editor';\r\n\r\n@Component({\r\n\tselector: 'mb-editor',\r\n\ttemplateUrl: 'editor.component.html'\r\n})\r\n\r\nexport class EditorComponent implements OnInit {\r\n\r\n\t@Input() editor: Editor;\r\n\t\r\n\tckEditor = DecoupledEditor;\r\n\t\r\n\tconstructor() { }\r\n\r\n\tngOnInit() {\r\n\t\t\r\n\t}\r\n\r\n\tonReady(editor) {\r\n        editor.ui.getEditableElement().parentElement.insertBefore(\r\n            editor.ui.view.toolbar.element,\r\n            editor.ui.getEditableElement()\r\n        );\r\n    }\r\n}",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 14
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<label *ngIf=\"editor.label\" class=\"label\">{{editor.label}}</label>\r\n<ckeditor [editor]=\"ckEditor\" [(ngModel)]=\"editor.value\" (ready)=\"onReady($event)\"></ckeditor>"
        },
        {
            "name": "EditProfileComponent",
            "id": "component-EditProfileComponent-98938dadcb5fa39bb9f603979e91699e6ed3e56f36dd5b807e7cfce4845d004eb971e591750e8b3a1ef6f2cd5fa0ce2808bbfcfe6c9721aef1b00d478e36ab44",
            "file": "src/app/pages/edit-profile/edit.profile.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "edit-profile",
            "styleUrls": [
                "./edit-profile.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./edit-profile.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "buttonCancel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Button",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "buttonChangePassword",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Button",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "buttonSubmit",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Button",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "selectFavoritePokemon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Select",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "selectUserIcon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Select",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "textboxEmail",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Textbox",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "textboxUsername",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Textbox",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "togglePublic",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Toggle",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "submit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { LoaderService } from './../../controls/loader/loader.service';\r\nimport { Button, ButtonType } from '@app/controls/button';\r\nimport { Textbox, Toggle, Select } from '@app/controls';\r\nimport { Router } from '@angular/router';\r\nimport { AuthenticationService } from '@app/services/auth.service';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { first } from 'rxjs/operators';\r\n\r\n@Component({\r\n\tselector: 'edit-profile',\r\n\ttemplateUrl: './edit-profile.component.html',\r\n\tstyleUrls: ['./edit-profile.component.scss'],\r\n})\r\nexport class EditProfileComponent implements OnInit {\r\n\tform: FormGroup;\r\n\ttextboxUsername: Textbox;\r\n\ttextboxEmail: Textbox;\r\n\ttogglePublic: Toggle;\r\n\tbuttonSubmit: Button;\r\n\tbuttonCancel: Button;\r\n\tselectUserIcon: Select;\r\n\tselectFavoritePokemon: Select;\r\n\tbuttonChangePassword: Button;\r\n\r\n\tconstructor(\r\n\t\tprivate formBuilder: FormBuilder,\r\n\t\tprivate router: Router,\r\n\t\tprivate authenticationService: AuthenticationService,\r\n\t\tprivate loaderService: LoaderService\r\n\t) {\r\n\t\tif (!this.authenticationService.currentUserValue) {\r\n\t\t\tthis.router.navigateByUrl('/');\r\n\t\t}\r\n\t}\r\n\r\n\tngOnInit(): void {\r\n\t\tthis.form = this.formBuilder.group({\r\n\t\t\temailControl: [''],\r\n\t\t\tusernameControl: [''],\r\n\t\t\tuserIconControl: [''],\r\n\t\t\tfavoritePokemonControl: [''],\r\n\t\t\tpublicControl: [''],\r\n\t\t});\r\n\t\tthis.textboxEmail = new Textbox({\r\n\t\t\tlabel: 'Email',\r\n\t\t\ttype: 'email',\r\n\t\t\treadOnly: true,\r\n\t\t\tvalue: this.authenticationService.currentUserValue.email,\r\n\t\t});\r\n\t\tthis.textboxUsername = new Textbox({\r\n\t\t\tlabel: 'Username',\r\n\t\t\treadOnly: true,\r\n\t\t\tvalue: this.authenticationService.currentUserValue.username,\r\n\t\t});\r\n\t\tthis.selectUserIcon = new Select({\r\n\t\t\tadvancedSelect: true,\r\n\t\t\tmultiple: false,\r\n\t\t\toptions: [],\r\n\t\t\tlabel: 'Icon',\r\n\t\t});\r\n\t\tthis.selectFavoritePokemon = new Select({\r\n\t\t\tadvancedSelect: true,\r\n\t\t\tmultiple: false,\r\n\t\t\toptions: [],\r\n\t\t\tlabel: 'Favorite Pokemon',\r\n\t\t});\r\n\t\tthis.togglePublic = new Toggle({\r\n\t\t\tlabel: 'Visibility',\r\n\t\t\ttext: 'Private',\r\n\t\t\ttextChecked: 'Public',\r\n\t\t});\r\n\t\tthis.buttonSubmit = new Button({\r\n\t\t\ttext: 'Save Profile',\r\n\t\t\ttype: ButtonType.submit,\r\n\t\t});\r\n\t\tthis.buttonCancel = new Button({\r\n\t\t\ttext: 'Cancel',\r\n\t\t\tclasses: 'secondary',\r\n\t\t});\r\n\t\tthis.buttonChangePassword = new Button({\r\n\t\t\ttext: 'Change Password',\r\n\t\t});\r\n\t}\r\n\r\n\tsubmit() {\r\n\t\tif (this.form.invalid) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis.loaderService.addItemLoading('register');\r\n\t\tthis.authenticationService\r\n\t\t\t.register(\r\n\t\t\t\tthis.form.controls.emailControl.value,\r\n\t\t\t\tthis.form.controls.usernameControl.value,\r\n\t\t\t\tthis.form.controls.passwordControl.value,\r\n\t\t\t\tthis.form.controls.passwordConfirmControl.value\r\n\t\t\t)\r\n\t\t\t.pipe(first())\r\n\t\t\t.subscribe(\r\n\t\t\t\t(data) => {\r\n\t\t\t\t\tthis.loaderService.clearItemLoading('register');\r\n\t\t\t\t},\r\n\t\t\t\t(error) => {\r\n\t\t\t\t\tthis.loaderService.clearItemLoading('register');\r\n\t\t\t\t}\r\n\t\t\t);\r\n\t}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./edit-profile.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authenticationService",
                        "type": "AuthenticationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "loaderService",
                        "type": "LoaderService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authenticationService",
                        "type": "AuthenticationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "loaderService",
                        "type": "LoaderService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<form\r\n\tclass=\"padding-8 flex justify-center\"\r\n\t[formGroup]=\"form\"\r\n\t(ngSubmit)=\"submit()\"\r\n>\r\n\t<div class=\"max-100\" style=\"width: 400px\">\r\n\t\t<div class=\"flex vertical padded\">\r\n\t\t\t<div>\r\n\t\t\t\t<h1>Edit Profile</h1>\r\n\t\t\t</div>\r\n\t\t\t<div>\r\n\t\t\t\t<mb-textbox\r\n\t\t\t\t\t[formControl]=\"form.controls.emailControl\"\r\n\t\t\t\t\t[textbox]=\"textboxEmail\"\r\n\t\t\t\t></mb-textbox>\r\n\t\t\t</div>\r\n\t\t\t<div>\r\n\t\t\t\t<mb-textbox\r\n\t\t\t\t\t[formControl]=\"form.controls.usernameControl\"\r\n\t\t\t\t\t[textbox]=\"textboxUsername\"\r\n\t\t\t\t></mb-textbox>\r\n\t\t\t</div>\r\n\t\t\t<div>\r\n\t\t\t\t<mb-select\r\n\t\t\t\t\t[formControl]=\"form.controls.favoritePokemonControl\"\r\n\t\t\t\t\t[select]=\"selectFavoritePokemon\"\r\n\t\t\t\t></mb-select>\r\n\t\t\t</div>\r\n\t\t\t<div>\r\n\t\t\t\t<mb-select\r\n\t\t\t\t\t[formControl]=\"form.controls.userIconControl\"\r\n\t\t\t\t\t[select]=\"selectUserIcon\"\r\n\t\t\t\t></mb-select>\r\n\t\t\t</div>\r\n\t\t\t<div>\r\n\t\t\t\t<mb-toggle\r\n\t\t\t\t\t[formControl]=\"form.controls.publicControl\"\r\n\t\t\t\t\t[toggle]=\"togglePublic\"\r\n\t\t\t\t></mb-toggle>\r\n\t\t\t</div>\r\n\t\t\t<div>\r\n\t\t\t\t<mb-button [button]=\"buttonChangePassword\"></mb-button>\r\n\t\t\t</div>\r\n\t\t\t<div class=\"flex padded\">\r\n\t\t\t\t<mb-button [button]=\"buttonCancel\"></mb-button>\r\n\t\t\t\t<mb-button [button]=\"buttonSubmit\"></mb-button>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n</form>\r\n"
        },
        {
            "name": "EmptyComponent",
            "id": "component-EmptyComponent-b2c5e4c4355bf1565966ba25535dcf03c044c13efaab9e3beb66c08edb5e05b950693a6126109b7e915041ab09be1423fa9234dccf53786e581b11c4bd616a2e",
            "file": "src/app/controls/empty/empty.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "mb-empty",
            "styleUrls": [
                "./empty.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./empty.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "empty",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "Empty",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input } from '@angular/core';\r\nimport { Empty } from './empty';\r\n\r\n@Component({\r\n\tselector: 'mb-empty',\r\n\ttemplateUrl: './empty.component.html',\r\n\tstyleUrls: ['./empty.component.scss']\r\n})\r\n\r\nexport class EmptyComponent implements OnInit {\r\n\r\n\t@Input() empty: Empty;\r\n\r\n\tconstructor() { }\r\n\r\n\tngOnInit(): void {\r\n\t\t\r\n\t}\r\n\r\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"settings\";\r\n\r\n.empty {\r\n\ttext-align: center;\r\n\tdisplay: flex;\r\n\tflex-direction: column;\r\n\talign-items: center;\r\n\tcolor: $font-color;\r\n\tpadding: 64px 16px;\r\n\tfa-icon {\r\n\t\twidth: 128px;\r\n\t\theight: 128px;\r\n\t\topacity: 0.5;\r\n\t\tpadding: $spacing * 2;\r\n\t}\r\n\timg {\r\n\t\twidth: 128px;\r\n\t\theight: 128px;\r\n\t\topacity: 0.4;\r\n\t\tpadding: $spacing;\r\n\t\tfilter: invert(1);\r\n\t}\r\n}\r\n",
                    "styleUrl": "./empty.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 12
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<!-- Empty -->\r\n<div class=\"empty\">\r\n\t<fa-icon\r\n\t\t*ngIf=\"!empty.image\"\r\n\t\t[icon]=\"empty.icon\">\r\n\t</fa-icon>\r\n\t<img\r\n\t\t*ngIf=\"empty.image\"\r\n\t\t[src]=\"empty.image\" />\r\n\t<p>{{empty.text}}</p>\r\n\t<mb-button\r\n\t\t*ngIf=\"empty.button\"\r\n\t\t[button]=\"empty.button\">\r\n\t</mb-button>\r\n</div>"
        },
        {
            "name": "ExpansionComponent",
            "id": "component-ExpansionComponent-88c1f0ce707a6dd28b33b14ed0a3cd340f7c0be033ef1c1354adf2ec295106843b6f1cdb73c31c740d75e319efaf89f0e44735f6764f864047a0d925cc6f2ca4",
            "file": "src/app/pages/expansions/expansion/expansion.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "mb-expansion",
            "styleUrls": [
                "./expansion.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./expansion.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "cardsComponent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CardsComponent",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "CardsComponent"
                        }
                    ]
                },
                {
                    "name": "code",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "items",
                    "defaultValue": "new Items()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Items",
                    "optional": false,
                    "description": "",
                    "line": 28
                }
            ],
            "methodsClass": [
                {
                    "name": "getExpansion",
                    "args": [
                        {
                            "name": "code",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 104,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "code",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getExpansionCards",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 120,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "handleParams",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setupControls",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "subscribeExpansion",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "subscribeExpansionCards",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport {\r\n\tExpansionService,\r\n\tGetExpansion,\r\n\tGetExpansionCards,\r\n} from '@app/services/expansion.service';\r\nimport { Expansion, SetPageSize, SetSortByExpansion } from './expansion';\r\nimport { Cards } from '@app/pages/cards/cards';\r\nimport { AutoUnsubscribe } from 'ngx-auto-unsubscribe';\r\nimport { CardGroup, CardsComponent, SetSortByCards } from '@app/pages/cards';\r\nimport { DatePipe } from '@angular/common';\r\nimport { Title } from '@angular/platform-browser';\r\nimport { LoaderService, Menu, MenuItem } from '@app/controls';\r\nimport { ItemGroup, Items } from '@app/layout/main';\r\nimport { AppSettings } from '@app/app';\r\nimport { Icons } from '@app/models';\r\nimport { ProgressBar } from '@app/controls/progress-bar/progress-bar';\r\n\r\n@AutoUnsubscribe()\r\n@Component({\r\n\tselector: 'mb-expansion',\r\n\ttemplateUrl: './expansion.component.html',\r\n\tstyleUrls: ['./expansion.component.scss'],\r\n})\r\nexport class ExpansionComponent implements OnInit {\r\n\t@ViewChild(CardsComponent) cardsComponent: CardsComponent;\r\n\titems: Items = new Items();\r\n\tcode: string;\r\n\r\n\tconstructor(\r\n\t\tprivate loaderService: LoaderService,\r\n\t\tprivate titleService: Title,\r\n\t\tprivate datePipe: DatePipe,\r\n\t\tprivate expansionService: ExpansionService,\r\n\t\tprivate route: ActivatedRoute\r\n\t) {}\r\n\r\n\tngOnDestroy() {}\r\n\tngOnInit() {\r\n\t\tthis.subscribeExpansion();\r\n\t\tthis.subscribeExpansionCards();\r\n\t\tthis.setupControls();\r\n\t\tthis.handleParams();\r\n\t\tSetSortByExpansion(this.items.filter);\r\n\t\tSetPageSize(this.items.footer);\r\n\t}\r\n\r\n\tsubscribeExpansion() {\r\n\t\tthis.expansionService\r\n\t\t\t.getExpansionObservable()\r\n\t\t\t.subscribe((expansion) => {\r\n\t\t\t\tif (expansion) {\r\n\t\t\t\t\tthis.loaderService.clearItemLoading('getExpansion');\r\n\t\t\t\t\tthis.titleService.setTitle(\r\n\t\t\t\t\t\tAppSettings.titlePrefix + expansion.name\r\n\t\t\t\t\t);\r\n\t\t\t\t\tthis.items.header.symbol = expansion.logo;\r\n\t\t\t\t\tthis.items.header.progressBar = new ProgressBar({\r\n\t\t\t\t\t\tvalue: 12,\r\n\t\t\t\t\t\ttotal: expansion.total_cards,\r\n\t\t\t\t\t});\r\n\t\t\t\t\tif (expansion.series.name === expansion.name) {\r\n\t\t\t\t\t\tthis.items.header.title = expansion.name;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis.items.header.title =\r\n\t\t\t\t\t\t\texpansion.series.name + ' - ' + expansion.name;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.items.header.subtitle = `${\r\n\t\t\t\t\t\texpansion.total_cards\r\n\t\t\t\t\t} Cards - ${this.datePipe.transform(\r\n\t\t\t\t\t\texpansion.release_date\r\n\t\t\t\t\t)}`;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t}\r\n\r\n\tsubscribeExpansionCards() {\r\n\t\tthis.expansionService.getExpansionCardsObservable().subscribe((res) => {\r\n\t\t\tif (res) {\r\n\t\t\t\tthis.loaderService.clearItemLoading('getExpansionCards');\r\n\t\t\t\tthis.items.itemGroups = [];\r\n\t\t\t\tthis.items.itemGroups.push(\r\n\t\t\t\t\tnew ItemGroup({\r\n\t\t\t\t\t\titems: res.cards,\r\n\t\t\t\t\t})\r\n\t\t\t\t);\r\n\t\t\t\tthis.items.footer.totalPages = res.total_pages;\r\n\t\t\t\tthis.items.footer.totalItems = res.total_results;\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tsetupControls() {\r\n\t\tSetSortByCards(this.items.filter);\r\n\t}\r\n\r\n\thandleParams() {\r\n\t\tthis.route.params.subscribe((params) => {\r\n\t\t\tthis.getExpansion(params['code']);\r\n\t\t});\r\n\t}\r\n\r\n\tgetExpansion(code) {\r\n\t\tthis.code = code;\r\n\t\tthis.loaderService.addItemLoading('getExpansion');\r\n\t\tthis.expansionService.getExpansion(\r\n\t\t\tnew GetExpansion({\r\n\t\t\t\tcode: code,\r\n\t\t\t\tpage: this.items.footer.page,\r\n\t\t\t\tpage_size: this.items.footer.pageSize,\r\n\t\t\t\tquery: this.items.filter.textboxSearch.value,\r\n\t\t\t\tsort_by: this.items.filter.selectSortBy.value,\r\n\t\t\t\tsort_direction: this.items.filter.selectSortDirection.value,\r\n\t\t\t})\r\n\t\t);\r\n\t\tthis.getExpansionCards();\r\n\t}\r\n\r\n\tgetExpansionCards() {\r\n\t\tthis.loaderService.addItemLoading('getExpansionCards');\r\n\t\tthis.expansionService.getExpansionCards(\r\n\t\t\tnew GetExpansionCards({\r\n\t\t\t\tcode: this.code,\r\n\t\t\t\tpage: this.items.footer.page,\r\n\t\t\t\tpage_size: this.items.footer.pageSize,\r\n\t\t\t\tquery: this.items.filter.textboxSearch.value,\r\n\t\t\t\tsort_by: this.items.filter.selectSortBy.value,\r\n\t\t\t\tsort_direction: this.items.filter.selectSortDirection.value,\r\n\t\t\t})\r\n\t\t);\r\n\t}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./expansion.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "loaderService",
                        "type": "LoaderService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "titleService",
                        "type": "Title",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "datePipe",
                        "type": "DatePipe",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "expansionService",
                        "type": "ExpansionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 29,
                "jsdoctags": [
                    {
                        "name": "loaderService",
                        "type": "LoaderService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "titleService",
                        "type": "Title",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "datePipe",
                        "type": "DatePipe",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "expansionService",
                        "type": "ExpansionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mb-items\r\n\t[items]=\"items\"\r\n\t(outputGetItems)=\"getExpansionCards()\">\r\n</mb-items>"
        },
        {
            "name": "ExpansionItemGridComponent",
            "id": "component-ExpansionItemGridComponent-7f067503b882c12840706b4e7b85da5e17151d3168f05c3a9d6a87c3e66e7628e0ecfc72220394110860baabe853836d613867b9c0b5b3063fb12e090108fb2e",
            "file": "src/app/pages/expansions/expansion-item/expansion-item-grid/expansion-item-grid.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "mb-expansion-item-grid",
            "styleUrls": [
                "./expansion-item-grid.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "expansion-item-grid.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "expansion",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "Expansion",
                    "decorators": []
                },
                {
                    "name": "size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "progressBar",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ProgressBar",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input } from '@angular/core';\r\nimport { ProgressBar } from '@app/controls/progress-bar/progress-bar';\r\nimport { Expansion } from '../../expansion/expansion';\r\n\r\n@Component({\r\n\tselector: 'mb-expansion-item-grid',\r\n\ttemplateUrl: 'expansion-item-grid.component.html',\r\n\tstyleUrls: ['./expansion-item-grid.component.scss']\r\n})\r\n\r\nexport class ExpansionItemGridComponent implements OnInit {\r\n\r\n\t@Input() expansion: Expansion;\r\n\t@Input() size: string;\r\n\r\n\tprogressBar: ProgressBar;\r\n\t\r\n\tconstructor() {}\r\n\r\n\tngOnInit() {\r\n\t\tthis.progressBar = new ProgressBar({\r\n\t\t\tvalue: this.expansion.progress,\r\n\t\t\ttotal: this.expansion.total_cards\r\n\t\t});\r\n\t}\r\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"settings\";\r\n\r\n:host {\r\n\tdisplay: flex;\r\n\tflex: 1;\r\n\twidth: 100%;\r\n}\r\n\r\n.item-grid-expansion {\r\n\tflex: 1;\r\n\tdisplay: flex;\r\n\tflex-direction: column;\r\n\talign-items: center;\r\n\tborder-radius: $border-radius-small;\r\n\twidth: 100%;\r\n\ttransition: $transition;\r\n\toverflow: hidden;\r\n\tposition: relative;\r\n\t&:after {\r\n\t\tcontent: \"\";\r\n\t\tborder-radius: $border-radius-small;\r\n\t\twidth: 100%;\r\n\t\theight: 100%;\r\n\t\tbox-shadow: $shadow-sheen;\r\n\t\tz-index: 10;\r\n\t\tposition: absolute;\r\n\t\tborder: $border;\r\n\t}\r\n\t&:hover {\r\n\t\tborder-color: $primary-color;\r\n\t\tbox-shadow: $shadow-focus;\r\n\t\t&:after {\r\n\t\t\tborder-color: $primary-color;\r\n\t\t}\r\n\t}\r\n\r\n\t&.small {\r\n\t\t.expansion-logo {\r\n\t\t\t.expansion-logo-inner {\r\n\t\t\t\theight: 80px;\r\n\t\t\t\timg:not(.symbol) {\r\n\t\t\t\t\tpadding: $spacing * 2;\r\n\t\t\t\t\tmax-width: 80%;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t.expansion-logo {\r\n\t\tdisplay: block;\r\n\t\twidth: 100%;\r\n\t\tposition: relative;\r\n\t\tbackground: $panel-bg;\r\n\t\t.expansion-logo-inner {\r\n\t\t\tposition: relative;\r\n\t\t\theight: 160px;\r\n\t\t}\r\n\t\timg:not(.symbol) {\r\n\t\t\tpadding: $spacing * 4;\r\n\t\t\tposition: absolute;\r\n\t\t\ttop: 50%;\r\n\t\t\tleft: 50%;\r\n\t\t\ttransform: translate(-50%, -50%);\r\n\t\t\tmax-height: 80%;\r\n\t\t\tmax-width: 100%;\r\n\t\t}\r\n\r\n\t\t.symbol {\r\n\t\t\theight: 24px;\r\n\t\t\tmargin: $spacing;\r\n\t\t}\r\n\t}\r\n\t.expansion-info {\r\n\t\twidth: 100%;\r\n\t\tpadding: $spacing;\r\n\t\tbackground: $main-bg;\r\n\t\tcolor: white;\r\n\t}\r\n}\r\n",
                    "styleUrl": "./expansion-item-grid.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 16
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<a\r\n\tclass=\"item-grid-expansion {{size}}\"\r\n\t[routerLink]=\"expansion.route ? expansion.route : []\">\r\n\t\r\n\t<figure class=\"expansion-logo\">\r\n\t\t<div class=\"expansion-logo-inner\">\r\n\t\t\t<img *ngIf=\"expansion.name !== 'Base'\" class=\"symbol\" src=\"{{expansion.symbol}}\" />\r\n\t\t\t<img src=\"{{expansion.logo}}\" />\r\n\t\t</div>\r\n\t\t<progress-bar\r\n\t\t\tclass=\"padding block padding-top-none\"\r\n\t\t\t[progressBar]=\"progressBar\">\r\n\t\t</progress-bar>\r\n\t</figure>\r\n\r\n\t<figcaption class=\"expansion-info flex vertical\">\r\n\t\t<div class=\"expansion-name ellipsis max-12\">\r\n\t\t\t{{expansion.name}}\r\n\t\t</div>\r\n\t\t<div class=\"flex\">\r\n\t\t\t<span class=\"subheading expansion-release-date\">\r\n\t\t\t\t{{expansion.release_date | date}} -\r\n\t\t\t</span>\r\n\t\t\t<span class=\"subheading expansion-total-cards\">\r\n\t\t\t\t{{expansion.total_cards}} Cards\r\n\t\t\t</span>\r\n\t\t</div>\r\n\t</figcaption>\r\n\r\n</a>"
        },
        {
            "name": "ExpansionItemListComponent",
            "id": "component-ExpansionItemListComponent-1e66428e06f26bc9bdd8a75e20c9310895368c2101c34fa5ea3c25adfbd00ec823ef8d923d70a8090f65319af74a4e6bc4e1077cbe79da7efbe8051fb346f8ce",
            "file": "src/app/pages/expansions/expansion-item/expansion-item-list/expansion-item-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "mb-expansion-item-list",
            "styleUrls": [
                "./expansion-item-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "expansion-item-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "expansion",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "Expansion",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input } from '@angular/core';\r\nimport { Expansion } from '../../expansion/expansion';\r\n\r\n@Component({\r\n\tselector: 'mb-expansion-item-list',\r\n\ttemplateUrl: 'expansion-item-list.component.html',\r\n\tstyleUrls: ['./expansion-item-list.component.scss']\r\n})\r\n\r\nexport class ExpansionItemListComponent implements OnInit {\r\n\r\n\t@Input() expansion: Expansion;\r\n\t\r\n\tconstructor() { }\r\n\r\n\tngOnInit() { }\r\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"settings\",\r\n\t\t\"scaffold/typography\";\r\n\r\n.item {\r\n    transition: $transition;\r\n    cursor: pointer;\r\n    &:hover {\r\n\t\tbackground: rgba(black, .05);\r\n    }\r\n    &:active {\r\n\t\tborder-color: $primary-color!important;\r\n\t\tbox-shadow: $shadow-focus !important;\r\n\t\toutline: 0 !important;\r\n    }\r\n    .expansion-symbol {\r\n        position: relative;\r\n\t\twidth: 40px;\r\n\t\theight: 40px;\r\n\t\toverflow: hidden;\r\n\t\tborder-radius: 4px;\r\n\t\timg {\r\n\t\t\tposition: absolute;\r\n\t\t\tmax-height: 100%;\r\n\t\t\ttop: 50%;\r\n\t\t\tleft: 50%;\r\n\t\t\ttransform: translate(-50%, -50%);\r\n\t\t\tpadding: 4px;\r\n\t\t}\r\n\t}\r\n    @for $i from 1 through 50 {\r\n        &:nth-child(#{50 - $i}) {\r\n            z-index: $i;\r\n        }\r\n    }\r\n}",
                    "styleUrl": "./expansion-item-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 12
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"padding item\">\r\n\t<div\r\n\t\tclass=\"flex padded flex-center\"\r\n\t\t[routerLink]=\"expansion.route ? expansion.route : []\">\r\n\r\n\t\t<div class=\"flex padded flex-center box\">\r\n\t\t\t<div>\r\n\t\t\t\t<div class=\"expansion-symbol\">\r\n\t\t\t\t\t<img src=\"{{expansion.symbol}}\" />\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<div class=\"box\">\r\n\t\t\t\t<div class=\"flex padded flex-center\">\r\n\t\t\t\t\t<span class=\"width-6\">\r\n\t\t\t\t\t\t{{expansion.name}}\r\n\t\t\t\t\t</span>\r\n\t\t\t\t\t<span class=\"width-3 subheading\">\r\n\t\t\t\t\t\t{{expansion.release_date | date}}\r\n\t\t\t\t\t</span>\r\n\t\t\t\t\t<span class=\"width-3 subheading\">\r\n\t\t\t\t\t\t{{expansion.total_cards}} Cards\r\n\t\t\t\t\t</span>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\r\n\t</div>\r\n</div>"
        },
        {
            "name": "ExpansionsComponent",
            "id": "component-ExpansionsComponent-ba4f6127ba889caec5f1038ad4514c3f32d3ff1d33242be270895a1fdbc475d2b2c4443f81231ad4d2b58e3ebc9058fc7cf2c66d986f0c57bfc9770e061ae4c1",
            "file": "src/app/pages/expansions/expansions.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "mb-expansions",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./expansions.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "items",
                    "defaultValue": "new Items()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Items",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methodsClass": [
                {
                    "name": "getItems",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "reponseGetExpanions",
                    "args": [
                        {
                            "name": "series",
                            "type": "Series[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "series",
                            "type": "Series[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setupControls",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setupSubscriptions",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { Items, } from '@app/layout/main';\r\nimport { ExpansionsService } from '../../services/expansions.service';\r\nimport { Title } from '@angular/platform-browser';\r\nimport { LoaderService } from '@app/controls';\r\nimport { AppSettings } from '@app/app';\r\nimport { Series, SetSortByExpansions } from './expansion/expansion';\r\nimport { Icons } from '@app/models';\r\n\r\n@Component({\r\n\tselector: 'mb-expansions',\r\n\ttemplateUrl: './expansions.component.html'\r\n})\r\n\r\nexport class ExpansionsComponent implements OnInit {\r\n\r\n\titems: Items = new Items();\r\n\t\r\n\tconstructor(\r\n\t\tprivate loaderService: LoaderService,\r\n\t\tprivate titleService: Title,\r\n\t\tprivate expansionsService: ExpansionsService) { }\r\n\r\n\tngOnInit() {\r\n\t\tthis.setupControls();\r\n\t\tthis.setupSubscriptions();\r\n\t}\r\n\r\n\tsetupSubscriptions() {\r\n\t\tthis.expansionsService.getExpansionsObservable().subscribe(series => {\r\n\t\t\tthis.reponseGetExpanions(series);\r\n\t\t});\r\n\t}\r\n\r\n\treponseGetExpanions(series: Series[]) {\r\n\t\tif (series) {\r\n\t\t\tthis.loaderService.clearItemLoading(\"getExpansions\");\r\n\t\t\tthis.items.itemGroups = [];\r\n\t\t\tseries.forEach(_series => {\r\n\t\t\t\tthis.items.itemGroups.push({\r\n\t\t\t\t\titems: _series.expansions,\r\n\t\t\t\t\tname: _series.name,\r\n\t\t\t\t\tprogress: 24\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\tsetupControls() {\r\n\t\tthis.items.noResults = \"No expansions found\";\r\n\t\tthis.items.noResultsIcon = Icons.box;\r\n\t\tthis.titleService.setTitle(AppSettings.titlePrefix + 'Expansions');\r\n\t\tthis.items.showHeader = false;\r\n\t\tthis.items.showFooter = false;\r\n\t\tthis.items.itemClasses = \"width-3 medium-4 small-6\";\r\n\t\tthis.items.filter.textboxSearch.placeholder = \"Search Expansions...\";\r\n\t\tthis.items.filter.selectSortDirection.value = \"desc\";\r\n\t\tthis.items.footer.pageSize = 100;\r\n\t\tSetSortByExpansions(this.items.filter);\r\n\t}\r\n\r\n\tgetItems() {\r\n\t\tthis.loaderService.addItemLoading(\"getExpansions\");\r\n\t\tthis.expansionsService.getExpansions({\r\n\t\t\tquery: this.items.filter.textboxSearch.value,\r\n\t\t\tsort_by: this.items.filter.selectSortBy.value,\r\n\t\t\tsort_direction: this.items.filter.selectSortDirection.value\r\n\t\t});\r\n\t}\r\n\r\n}",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "loaderService",
                        "type": "LoaderService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "titleService",
                        "type": "Title",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "expansionsService",
                        "type": "ExpansionsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "loaderService",
                        "type": "LoaderService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "titleService",
                        "type": "Title",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "expansionsService",
                        "type": "ExpansionsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mb-items\r\n\t[items]=\"items\"\r\n\t(outputGetItems)=\"getItems()\">\r\n</mb-items>"
        },
        {
            "name": "FooterComponent",
            "id": "component-FooterComponent-287185f622a535551585bf587901eb002960a3cf457284172048ed53e0419cc6c9475d071a8bc14f577f00da64b3f052ba010ad4879472f0522291e9996b5828",
            "file": "src/app/layout/footer/footer.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "mb-footer",
            "styleUrls": [
                "./footer.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./footer.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "menuCenter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Menu",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "menuLeft",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Menu",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "year",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { Menu, MenuItem } from '@app/controls';\r\nimport { Icons, Symbols } from '@app/models';\r\n\r\n@Component({\r\n\tselector: 'mb-footer',\r\n\ttemplateUrl: './footer.component.html',\r\n\tstyleUrls: ['./footer.component.scss'],\r\n})\r\nexport class FooterComponent implements OnInit {\r\n\tyear: number;\r\n\tmenuLeft: Menu;\r\n\tmenuCenter: Menu;\r\n\r\n\tngOnInit() {\r\n\t\tthis.year = new Date().getFullYear();\r\n\t\tthis.menuLeft = new Menu({\r\n\t\t\titems: [\r\n\t\t\t\tnew MenuItem({\r\n\t\t\t\t\ticon: Icons.house,\r\n\t\t\t\t\ttext: 'Home',\r\n\t\t\t\t\troute: '/',\r\n\t\t\t\t\texactMatch: true,\r\n\t\t\t\t}),\r\n\t\t\t\tnew MenuItem({\r\n\t\t\t\t\ticon: Icons.box,\r\n\t\t\t\t\ttext: 'Expansions',\r\n\t\t\t\t\troute: '/expansions',\r\n\t\t\t\t}),\r\n\t\t\t\tnew MenuItem({\r\n\t\t\t\t\tsymbol: Symbols.cards,\r\n\t\t\t\t\ttext: 'Cards',\r\n\t\t\t\t\troute: '/cards',\r\n\t\t\t\t}),\r\n\t\t\t\tnew MenuItem({\r\n\t\t\t\t\tsymbol: Symbols.pokeball,\r\n\t\t\t\t\ttext: 'Pokémon',\r\n\t\t\t\t\troute: '/pokemon',\r\n\t\t\t\t}),\r\n\t\t\t\tnew MenuItem({\r\n\t\t\t\t\ticon: Icons.archive,\r\n\t\t\t\t\ttext: 'Collection',\r\n\t\t\t\t\troute: '/collection',\r\n\t\t\t\t}),\r\n\t\t\t],\r\n\t\t});\r\n\t\tthis.menuCenter = new Menu({\r\n\t\t\titems: [\r\n\t\t\t\tnew MenuItem({\r\n\t\t\t\t\thref: 'https://discord.gg/AQFwQDVU',\r\n\t\t\t\t\ttext: 'Discord',\r\n\t\t\t\t\tsymbol: Symbols.discord,\r\n\t\t\t\t}),\r\n\t\t\t\tnew MenuItem({\r\n\t\t\t\t\ttext: 'Patreon',\r\n\t\t\t\t\tsymbol: Symbols.patreon,\r\n\t\t\t\t}),\r\n\t\t\t\tnew MenuItem({\r\n\t\t\t\t\ttext: 'YouTube',\r\n\t\t\t\t\tsymbol: Symbols.youtube,\r\n\t\t\t\t}),\r\n\t\t\t\tnew MenuItem({\r\n\t\t\t\t\ttext: 'Facebook',\r\n\t\t\t\t\tsymbol: Symbols.facebook,\r\n\t\t\t\t}),\r\n\t\t\t],\r\n\t\t});\r\n\t}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"settings\";\r\n\r\n:host {\r\n\tposition: relative;\r\n\tz-index: 3;\r\n\t&::ng-deep {\r\n\t\t.symbol {\r\n\t\t\tfilter: none !important;\r\n\t\t\timg {\r\n\t\t\t\t//filter: contrast(0) sepia(100%) hue-rotate(164deg) brightness(1) saturate(2) !important;\r\n\t\t\t\tfilter: contrast(0) brightness(10) !important;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n#footer {\r\n\tpadding: $spacing * 4 $spacing * 2;\r\n\tborder-top: $border;\r\n\tbackground: $footer-bg;\r\n\r\n\t.max {\r\n\t\tz-index: 5;\r\n\t\tposition: relative;\r\n\t}\r\n\r\n\t.logo {\r\n\t\tdisplay: flex;\r\n\t\talign-items: center;\r\n\t\tcursor: pointer;\r\n\t\tborder-radius: $border-radius;\r\n\t\tposition: relative;\r\n\t\theight: 100%;\r\n\t\tcolor: $header-bg;\r\n\t\tpadding: 0 $spacing * 2;\r\n\t\tjustify-content: center;\r\n\t\timg {\r\n\t\t\tdisplay: block;\r\n\t\t\tborder-radius: $border-radius;\r\n\t\t\toverflow: hidden;\r\n\t\t\theight: 40px;\r\n\t\t\t&.logo-image-small {\r\n\t\t\t\tdisplay: none;\r\n\t\t\t}\r\n\t\t}\r\n\t\tspan {\r\n\t\t\tfont-size: 24px;\r\n\t\t\ttext-transform: uppercase;\r\n\t\t\tletter-spacing: 2px;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n.copyright {\r\n\tbackground: lighten($footer-bg, 5%);\r\n\tfont-size: 10px;\r\n\ttext-align: center;\r\n\ttext-transform: uppercase;\r\n\tletter-spacing: 0.5px;\r\n\tline-height: 1;\r\n\tpadding: $spacing;\r\n\tcolor: rgba(white, 0.5);\r\n}\r\n",
                    "styleUrl": "./footer.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit"
            ],
            "templateData": "<footer id=\"footer\">\r\n\t<div class=\"max\">\r\n\t\t<div class=\"flex padded\">\r\n\t\t\t<div class=\"width-4 small-12 small-order-2\">\r\n\t\t\t\t<mb-menu [menu]=\"menuLeft\"></mb-menu>\r\n\t\t\t</div>\r\n\t\t\t<div class=\"width-4 small-12 small-order-3\">\r\n\t\t\t\t<mb-menu [menu]=\"menuCenter\"></mb-menu>\r\n\t\t\t</div>\r\n\t\t\t<div class=\"width-4 small-12 small-order-1\">\r\n\t\t\t\t<a class=\"logo\" routerLink=\"/\">\r\n\t\t\t\t\t<span><b>Rotom</b>dex</span>\r\n\t\t\t\t</a>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n</footer>\r\n<div class=\"copyright\">\r\n\tRotom Dex is not affiliated with, sponsored or endorsed by, or in any way\r\n\tassociated with Pokemon or The Pokemon Company International Inc. &copy;\r\n\t{{ year }} Rotom Dex. All rights reserved.\r\n</div>\r\n"
        },
        {
            "name": "ForgotComponent",
            "id": "component-ForgotComponent-b9507d5401560fd5810d5101afebc7905cd55412d7e47f8b803833386f23dbed94d846c097d3eb9ebd2d21d7884952231743f0d7e8152b0c8c7ace062d879c5f",
            "file": "src/app/pages/auth/forgot/forgot.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "mb-forgot",
            "styleUrls": [
                "./forgot.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./forgot.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "buttonSubmit",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Button",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "textboxEmail",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Textbox",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "submit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Router } from '@angular/router';\r\nimport { AuthenticationService } from '@app/services/auth.service';\r\nimport { Textbox, Button, ButtonType } from '@app/controls';\r\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { NotificationsService, Notification, AlertType } from '@app/controls';\r\n\r\n@Component({\r\n\tselector: 'mb-forgot',\r\n\ttemplateUrl: './forgot.component.html',\r\n\tstyleUrls: ['./forgot.component.scss'],\r\n})\r\nexport class ForgotComponent implements OnInit {\r\n\tform: FormGroup;\r\n\ttextboxEmail: Textbox;\r\n\tbuttonSubmit: Button;\r\n\r\n\tconstructor(\r\n\t\tprivate authenticationService: AuthenticationService,\r\n\t\tprivate router: Router,\r\n\t\tprivate formBuilder: FormBuilder,\r\n\t\tprivate notificationService: NotificationsService\r\n\t) {\r\n\t\tif (this.authenticationService.currentUserValue) {\r\n\t\t\tthis.router.navigateByUrl('/');\r\n\t\t}\r\n\t}\r\n\r\n\tngOnInit(): void {\r\n\t\tthis.form = this.formBuilder.group({\r\n\t\t\temailControl: ['', Validators.required],\r\n\t\t});\r\n\t\tthis.textboxEmail = new Textbox({\r\n\t\t\tlabel: 'Email',\r\n\t\t});\r\n\t\tthis.buttonSubmit = new Button({\r\n\t\t\ttext: 'Send Reset Password',\r\n\t\t\ttype: ButtonType.submit,\r\n\t\t});\r\n\t}\r\n\r\n\tsubmit() {\r\n\t\tif (this.form.invalid) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis.authenticationService\r\n\t\t\t.forgot(this.form.controls.emailControl.value)\r\n\t\t\t.subscribe(() => {\r\n\t\t\t\tthis.notificationService.addNotifications([\r\n\t\t\t\t\tnew Notification({\r\n\t\t\t\t\t\talertType: AlertType.success,\r\n\t\t\t\t\t\tmessage:\r\n\t\t\t\t\t\t\t\"If your email exists, we've sent you a reset link\",\r\n\t\t\t\t\t}),\r\n\t\t\t\t]);\r\n\t\t\t});\r\n\t}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./forgot.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authenticationService",
                        "type": "AuthenticationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "notificationService",
                        "type": "NotificationsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "authenticationService",
                        "type": "AuthenticationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "notificationService",
                        "type": "NotificationsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<form\r\n\tclass=\"padding-y-8 flex vertical flex-center\"\r\n\t[formGroup]=\"form\"\r\n\t(ngSubmit)=\"submit()\"\r\n>\r\n\t<div class=\"flex vertical padded-2\" style=\"max-width: 400px\">\r\n\t\t<div>\r\n\t\t\t<h1>Forgot Password?</h1>\r\n\t\t</div>\r\n\t\t<div>\r\n\t\t\t<p>\r\n\t\t\t\tIf you forgot your password, enter your email below and we will\r\n\t\t\t\tsend you instructions on how to reset it.\r\n\t\t\t</p>\r\n\t\t</div>\r\n\t\t<div>\r\n\t\t\t<mb-textbox\r\n\t\t\t\t[formControl]=\"form.controls.emailControl\"\r\n\t\t\t\t[textbox]=\"textboxEmail\"\r\n\t\t\t></mb-textbox>\r\n\t\t</div>\r\n\t\t<div>\r\n\t\t\t<mb-button [button]=\"buttonSubmit\"></mb-button>\r\n\t\t</div>\r\n\t</div>\r\n</form>\r\n"
        },
        {
            "name": "FormComponent",
            "id": "component-FormComponent-65fe4245f480d8c650933c1a43b378f637589bb038e9871a97baa28230dea74a4639e917dfccd384c0a4dbec557d70483128adf938144775588074d29dad1ec7",
            "file": "src/app/controls/form/form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "mb-form",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "form.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "MBForm",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [
                        {
                            "name": "formGroup",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "formGroup",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input } from '@angular/core';\r\nimport { MBForm } from './form';\r\nimport { FormGroup } from '@angular/forms';\r\n\r\n@Component({\r\n\tselector: 'mb-form',\r\n\ttemplateUrl: 'form.component.html'\r\n})\r\n\r\nexport class FormComponent implements OnInit {\r\n\r\n\t@Input() form: MBForm;\r\n\r\n\tconstructor() { }\r\n\r\n\tngOnInit() { }\r\n\r\n\tonSubmit(formGroup: FormGroup) {\r\n\t\twindow.alert('Valid: ' + formGroup.valid);\r\n\t}\r\n}",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 12
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<form *ngIf=\"form\" [formGroup]=\"form.formGroup\" (ngSubmit)=\"onSubmit(form.formGroup)\">\r\n\t<h2 *ngIf=\"form.title\">{{form.title}}</h2>\r\n\t<div class=\"flex padded vertical\">\r\n\t\t<div *ngFor=\"let formGroup of form.groups\">\r\n\t\t\t<mb-form-group [mbFormGroup]=\"formGroup\"></mb-form-group>\r\n\t\t</div>\r\n\t</div>\r\n</form>"
        },
        {
            "name": "FormControlComponent",
            "id": "component-FormControlComponent-f72b84421577d2c3320e1565a3797c7f48d2df408fd406d970d2e836397c3ab7e19651234a58d36073970106fe1235258b1b433569b298302e66a4eb4308b4e8",
            "file": "src/app/controls/form/form-group/form-control/from-control.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "mb-form-control",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "form-control.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "mbFormControl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "MBFormControl",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "isCheckbox",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isEditor",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isSelect",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isTextarea",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isTextbox",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isToggle",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input } from '@angular/core';\r\nimport { MBFormControl } from './form-control';\r\nimport { Textbox } from '@app/controls/textbox';\r\nimport { Editor } from '@app/controls/editor';\r\nimport { Textarea } from '@app/controls/textarea';\r\nimport { Select } from '@app/controls/select';\r\nimport { Checkbox } from '@app/controls/checkbox';\r\nimport { Toggle } from '@app/controls/toggle';\r\n\r\n@Component({\r\n\tselector: 'mb-form-control',\r\n\ttemplateUrl: 'form-control.component.html'\r\n})\r\n\r\nexport class FormControlComponent implements OnInit {\r\n\r\n\t@Input() mbFormControl: MBFormControl;\r\n\t\r\n\tconstructor() { }\r\n\r\n\tngOnInit() {\r\n\t\t\r\n\t}\r\n\r\n\tisTextbox() {\r\n\t\treturn this.mbFormControl.control instanceof Textbox;\r\n\t}\r\n\tisTextarea() {\r\n\t\treturn this.mbFormControl.control instanceof Textarea;\r\n\t}\r\n\tisSelect() {\r\n\t\treturn this.mbFormControl.control instanceof Select;\r\n\t}\r\n\tisEditor() {\r\n\t\treturn this.mbFormControl.control instanceof Editor;\r\n\t}\r\n\tisCheckbox() {\r\n\t\treturn this.mbFormControl.control instanceof Checkbox;\r\n\t}\r\n\tisToggle() {\r\n\t\treturn this.mbFormControl.control instanceof Toggle;\r\n\t}\r\n}",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 17
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div *ngIf=\"mbFormControl\">\r\n\t<mb-textbox\r\n\t\t*ngIf=\"isTextbox()\"\r\n\t\t[textbox]=\"mbFormControl.control\"\r\n\t\t[formControl]=\"mbFormControl.formControl\"\r\n\t></mb-textbox>\r\n\t<mb-textarea\r\n\t\t*ngIf=\"isTextarea()\"\r\n\t\t[textarea]=\"mbFormControl.control\"\r\n\t\t[formControl]=\"mbFormControl.formControl\"\r\n\t></mb-textarea>\r\n\t<mb-select\r\n\t\t*ngIf=\"isSelect()\"\r\n\t\t[select]=\"mbFormControl.control\"\r\n\t\t[formControl]=\"mbFormControl.formControl\"\r\n\t></mb-select>\r\n\t<mb-editor\r\n\t\t*ngIf=\"isEditor()\"\r\n\t\t[editor]=\"mbFormControl.control\"\r\n\t\t[formControl]=\"mbFormControl.formControl\"\r\n\t></mb-editor>\r\n\t<mb-checkbox\r\n\t\t*ngIf=\"isCheckbox()\"\r\n\t\t[checkbox]=\"mbFormControl.control\"\r\n\t\t[formControl]=\"mbFormControl.formControl\"\r\n\t></mb-checkbox>\r\n\t<mb-toggle\r\n\t\t*ngIf=\"isToggle()\"\r\n\t\t[toggle]=\"mbFormControl.control\"\r\n\t\t[formControl]=\"mbFormControl.formControl\"\r\n\t></mb-toggle>\r\n</div>\r\n"
        },
        {
            "name": "FormGroupComponent",
            "id": "component-FormGroupComponent-1cdb4a576d223f3e71d95145c13323d16ab4b2ffed0e48e1c8b483ca8dcb1da330e7257ee2dc0b0bce143da16f41e2f4d2addc703a73d61e96fa2c2a107169f9",
            "file": "src/app/controls/form/form-group/form-group.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "mb-form-group",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "form-group.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "mbFormGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "MBFormGroup",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input } from '@angular/core';\r\nimport { MBFormGroup } from './form-group';\r\n\r\n@Component({\r\n\tselector: 'mb-form-group',\r\n\ttemplateUrl: 'form-group.component.html'\r\n})\r\n\r\nexport class FormGroupComponent implements OnInit {\r\n\r\n\t@Input() mbFormGroup: MBFormGroup;\r\n\r\n\tconstructor() { }\r\n\r\n\tngOnInit() {\r\n\t\t\r\n\t}\r\n}",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 11
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div *ngIf=\"mbFormGroup\" class=\"flex padded flex-wrap\">\r\n\t<h4 *ngIf=\"mbFormGroup.title\">{{mbFormGroup.title}}</h4>\r\n\t<div class=\"{{formControl.classes}}\" *ngFor=\"let formControl of mbFormGroup.controls\">\r\n\t\t<mb-form-control [mbFormControl]=\"formControl\"></mb-form-control>\r\n\t</div>\r\n</div>"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-0cd94fbc94a83702e45bf987cb3b3f9074d69cd27e6ca2e4fbac0dc5b5047bd4dc3a9ce8a77f6bd9ab7ae3e6ca8e49b34bed529ca0da0fa428fec544a0324870",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 54,
                    "type": "User | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 63,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 57,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 60,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { User } from './User';\n\n@Component({\n  selector: 'storybook-header',\n  template: `<header>\n    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport default class HeaderComponent {\n  @Input()\n  user: User | null = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\nsvg {\n  display: inline-block;\n  vertical-align: top;\n}\n\nh1 {\n  font-weight: 900;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nbutton + button {\n  margin-left: 10px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-983aaf8a2b542eed45f46c248ba8c0281052e07997fe8980269b03f7cb3c6ba1bf3c061df68aee7f5d4d88cd7f617c442fa7ff927fa5d7609e02ed01390b0051-1",
            "file": "src/app/layout/header/header.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "mb-header",
            "styleUrls": [
                "./header.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./header.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "transparent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "menu",
                    "defaultValue": "new Menu()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Menu",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "menuBack",
                    "defaultValue": "new Menu()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Menu",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "menuLogin",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Menu",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "scrolled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onWindowScroll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 113,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'window:scroll', undefined"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "window:scroll",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 113
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n\tComponent,\r\n\tHostListener,\r\n\tInput,\r\n\tOnInit,\r\n\tViewEncapsulation,\r\n} from '@angular/core';\r\nimport { Icons, Symbols } from '@app/models/icons';\r\nimport { Menu, MenuItem } from '@app/controls/menu';\r\n\r\nimport { AuthenticationService } from '@app/services/auth.service';\r\nimport { Location } from '@angular/common';\r\nimport { User } from '@app/models/user';\r\n\r\n@Component({\r\n\tselector: 'mb-header',\r\n\ttemplateUrl: './header.component.html',\r\n\tstyleUrls: ['./header.component.scss'],\r\n\tencapsulation: ViewEncapsulation.None,\r\n})\r\nexport class HeaderComponent implements OnInit {\r\n\tmenu: Menu = new Menu();\r\n\tmenuBack: Menu = new Menu();\r\n\tuser: User;\r\n\tmenuLogin: Menu;\r\n\tscrolled: boolean;\r\n\t@Input() transparent: boolean;\r\n\r\n\tconstructor(\r\n\t\tprivate authenticationService: AuthenticationService,\r\n\t\tprivate location: Location\r\n\t) {}\r\n\r\n\tngOnInit(): void {\r\n\t\tthis.menuLogin = new Menu({\r\n\t\t\tclasses: 'round',\r\n\t\t\thorizontal: true,\r\n\t\t\titems: [\r\n\t\t\t\tnew MenuItem({\r\n\t\t\t\t\ticon: Icons.signIn,\r\n\t\t\t\t\troute: 'signin',\r\n\t\t\t\t\ttext: 'Sign In',\r\n\t\t\t\t}),\r\n\t\t\t],\r\n\t\t});\r\n\r\n\t\tthis.menuBack.items.push(\r\n\t\t\tnew MenuItem({\r\n\t\t\t\ttext: 'Back',\r\n\t\t\t\ticon: Icons.arrowLeft,\r\n\t\t\t\tclick: () => {\r\n\t\t\t\t\tthis.location.back();\r\n\t\t\t\t},\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\t//this.menu.round = false;\r\n\t\tthis.menu.clearActiveClickOutside = true;\r\n\t\tthis.menu.horizontal = true;\r\n\t\tthis.menu.classes = 'medium-12 medium-stacked medium-square';\r\n\t\tthis.menu.items.push(\r\n\t\t\tnew MenuItem({\r\n\t\t\t\ticon: Icons.box,\r\n\t\t\t\ttext: 'Expansions',\r\n\t\t\t\troute: 'expansions',\r\n\t\t\t\tclick: () => {\r\n\t\t\t\t\tthis.menu.clearActive();\r\n\t\t\t\t},\r\n\t\t\t}),\r\n\t\t\tnew MenuItem({\r\n\t\t\t\tsymbol: Symbols.cards,\r\n\t\t\t\ttext: 'Cards',\r\n\t\t\t\troute: 'cards',\r\n\t\t\t\tclick: () => {\r\n\t\t\t\t\tthis.menu.clearActive();\r\n\t\t\t\t},\r\n\t\t\t}),\r\n\t\t\tnew MenuItem({\r\n\t\t\t\tsymbol: Symbols.pokeball,\r\n\t\t\t\ttext: 'Pokémon',\r\n\t\t\t\troute: 'pokemon',\r\n\t\t\t\tclick: () => {\r\n\t\t\t\t\tthis.menu.clearActive();\r\n\t\t\t\t},\r\n\t\t\t}),\r\n\t\t\t// new MenuItem({\r\n\t\t\t// \ttext: \"Collection\",\r\n\t\t\t// \troute: \"collection\",\r\n\t\t\t// \tclick: () => {\r\n\t\t\t// \t\tthis.menu.clearActive();\r\n\t\t\t// \t}\r\n\t\t\t// }),\r\n\t\t\t// new MenuItem({\r\n\t\t\t// \ticon: Icons.scanner,\r\n\t\t\t// \ttext: 'Scanner',\r\n\t\t\t// \troute: 'scanner',\r\n\t\t\t// \tclick: () => {\r\n\t\t\t// \t\tthis.menu.clearActive();\r\n\t\t\t// \t},\r\n\t\t\t// }),\r\n\t\t\tnew MenuItem({\r\n\t\t\t\ticon: Icons.archive,\r\n\t\t\t\ttext: 'Collection',\r\n\t\t\t\troute: 'collection',\r\n\t\t\t\tclick: () => {\r\n\t\t\t\t\tthis.menu.clearActive();\r\n\t\t\t\t},\r\n\t\t\t})\r\n\t\t);\r\n\t}\r\n\r\n\t@HostListener('window:scroll', [])\r\n\tonWindowScroll() {\r\n\t\tthis.scrolled =\r\n\t\t\tdocument.body.scrollTop > 20 ||\r\n\t\t\tdocument.documentElement.scrollTop > 20;\r\n\t}\r\n\r\n\tget signedIn(): boolean {\r\n\t\treturn this.authenticationService.currentUserValue != null;\r\n\t}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"settings\";\r\n\r\n:host {\r\n\tposition: relative;\r\n\tz-index: 1;\r\n}\r\n\r\n.menu-wrapper {\r\n\tpadding-top: $header-height;\r\n\t@media (max-width: $screen-medium) {\r\n\t\tposition: fixed;\r\n\t\tbottom: 0;\r\n\t\tleft: 0;\r\n\t\tright: 0;\r\n\t\tz-index: 99;\r\n\t\tbox-shadow: $shadow-large;\r\n\t\tborder-top: $border;\r\n\t\tpadding-top: 0;\r\n\t\t.menu {\r\n\t\t\tbox-shadow: none !important;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n#header {\r\n\theight: $header-height;\r\n\tposition: fixed;\r\n\ttop: 0;\r\n\tleft: 0;\r\n\tright: 0;\r\n\tbackground: $header-bg;\r\n\tdisplay: flex;\r\n\talign-items: center;\r\n\tjustify-content: center;\r\n\tz-index: 10;\r\n\tpadding: $spacing ($spacing * 2);\r\n\tborder-bottom: $border;\r\n\tbox-shadow: $shadow;\r\n\t&:before {\r\n\t\tcontent: \"\";\r\n\t\tbackground: $header-bg;\r\n\t\tposition: absolute;\r\n\t\ttop: 0;\r\n\t\tleft: 0;\r\n\t\tright: 0;\r\n\t\tbottom: 0;\r\n\t\ttransition: $transition;\r\n\t\topacity: 1;\r\n\t}\r\n\r\n\t&.transparent:not(.scrolled) {\r\n\t\tbackground: none;\r\n\t\tbox-shadow: none;\r\n\t\tborder-bottom: none;\r\n\t\ttext-shadow: $text-shadow;\r\n\t\t&:before {\r\n\t\t\topacity: 0;\r\n\t\t}\r\n\t}\r\n\r\n\t&.transparent {\r\n\t\t+ .menu-wrapper #menu {\r\n\t\t\t@media (min-width: $screen-medium + 1px) {\r\n\t\t\t\tbackground: transparent;\r\n\t\t\t}\r\n\t\t\tcolor: white;\r\n\t\t\tborder-bottom: 0;\r\n\t\t\tmargin-left: auto;\r\n\t\t\tmargin-right: auto;\r\n\r\n\t\t\t.symbol {\r\n\t\t\t\tfilter: invert(100%) !important;\r\n\t\t\t}\r\n\t\t\t.menu {\r\n\t\t\t\tbackground: $menu-bg;\r\n\t\t\t\tbox-shadow: $shadow;\r\n\t\t\t\t@media (max-width: $screen-medium) {\r\n\t\t\t\t\tbackground: none;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\ta {\r\n\t\t\t\tcolor: white;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t.logo {\r\n\t\tdisplay: flex;\r\n\t\talign-items: center;\r\n\t\tcursor: pointer;\r\n\t\tborder-radius: $border-radius;\r\n\t\tposition: relative;\r\n\t\theight: 100%;\r\n\t\tcolor: $header-color;\r\n\t\tpadding: 0 $spacing * 2;\r\n\t\timg {\r\n\t\t\tdisplay: block;\r\n\t\t\tborder-radius: $border-radius;\r\n\t\t\toverflow: hidden;\r\n\t\t\theight: 40px;\r\n\t\t\t&.logo-image-small {\r\n\t\t\t\tdisplay: none;\r\n\t\t\t}\r\n\t\t}\r\n\t\tspan {\r\n\t\t\tfont-size: 24px;\r\n\t\t\ttext-transform: uppercase;\r\n\t\t\tletter-spacing: 2px;\r\n\t\t}\r\n\t}\r\n\r\n\ta {\r\n\t\tcolor: $header-color;\r\n\t}\r\n\r\n\t.max {\r\n\t\tposition: relative;\r\n\t\theight: $header-height;\r\n\t\tz-index: 4;\r\n\t\tdisplay: flex;\r\n\t\talign-items: center;\r\n\t\tflex: 1;\r\n\t}\r\n}\r\n\r\n#menu {\r\n\tbackground: $menu-bg;\r\n\tjustify-content: center;\r\n\tz-index: 2;\r\n\tposition: relative;\r\n\tpadding: $spacing ($spacing * 2);\r\n\t@media (max-width: $screen-medium) {\r\n\t\tpadding: 0;\r\n\t\tbackground: $header-bg;\r\n\t\t.menu {\r\n\t\t\tborder: 0 !important;\r\n\t\t\t.text {\r\n\t\t\t\tpadding-left: 0;\r\n\t\t\t\tpadding-top: $spacing / 2;\r\n\t\t\t}\r\n\t\t\ta {\r\n\t\t\t\tcolor: white;\r\n\t\t\t}\r\n\t\t\t.symbol {\r\n\t\t\t\tfilter: contrast(0) brightness(10);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n@media (max-width: $screen-medium) {\r\n\t#menu .menu {\r\n\t\t> ul {\r\n\t\t\t> li {\r\n\t\t\t\tflex: 1;\r\n\t\t\t\ta {\r\n\t\t\t\t\tjustify-content: center;\r\n\t\t\t\t\t.text {\r\n\t\t\t\t\t\tflex: initial;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tmb-search {\r\n\t\twidth: 100%;\r\n\t}\r\n}\r\n\r\n#menuBack,\r\n#menuLogin {\r\n\tbackground: rgba(black, 0.2);\r\n\tborder-radius: $border-radius;\r\n}\r\n",
                    "styleUrl": "./header.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authenticationService",
                        "type": "AuthenticationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "location",
                        "type": "Location",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "authenticationService",
                        "type": "AuthenticationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "location",
                        "type": "Location",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "signedIn": {
                    "name": "signedIn",
                    "getSignature": {
                        "name": "signedIn",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 119
                    }
                }
            },
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "HeaderComponent-1",
            "templateData": "<header\r\n\tid=\"header\"\r\n\t[class.transparent]=\"transparent\"\r\n\t[class.scrolled]=\"scrolled\"\r\n>\r\n\t<div class=\"max\">\r\n\t\t<div class=\"flex box padded\">\r\n\t\t\t<div class=\"width-3 flex\">\r\n\t\t\t\t<mb-menu id=\"menuBack\" [menu]=\"menuBack\"></mb-menu>\r\n\t\t\t</div>\r\n\t\t\t<div class=\"width-6 flex justify-center\">\r\n\t\t\t\t<a class=\"logo\" routerLink=\"\">\r\n\t\t\t\t\t<span><b>Rotom</b>dex</span>\r\n\t\t\t\t</a>\r\n\t\t\t</div>\r\n\t\t\t<div\r\n\t\t\t\t*ngIf=\"signedIn\"\r\n\t\t\t\tclass=\"profile flex justify-end width-3\"\r\n\t\t\t\tmb-profile\r\n\t\t\t></div>\r\n\t\t\t<div *ngIf=\"!signedIn\" class=\"login flex justify-end width-3\">\r\n\t\t\t\t<mb-menu id=\"menuLogin\" [menu]=\"menuLogin\"></mb-menu>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n</header>\r\n\r\n<div class=\"menu-wrapper\">\r\n\t<mb-menu id=\"menu\" class=\"flex\" [menu]=\"menu\"></mb-menu>\r\n</div>\r\n"
        },
        {
            "name": "HeroComponent",
            "id": "component-HeroComponent-7741d72676f00d47f2d4700e844088035d44c7cdd66a7b1e90e9d59f6004850acd642638183460a826afa31922c6885cdd450951fc40f2ed04018daa064d2315",
            "file": "src/app/controls/hero/hero.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hero",
            "styleUrls": [
                "./hero.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "hero.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "version",
                    "defaultValue": "version",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { version } from '@app/../../package.json';\r\n\r\n@Component({\r\n  selector: 'hero',\r\n  templateUrl: 'hero.component.html',\r\n  styleUrls: ['./hero.component.scss'],\r\n})\r\nexport class HeroComponent implements OnInit {\r\n  public version: string = version;\r\n  constructor() {}\r\n\r\n  ngOnInit() {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"settings\";\r\n\r\n.hero {\r\n\theight: 80vh;\r\n\tmax-height: 650px;\r\n\tbackground-size: cover;\r\n\tbackground-position: top center;\r\n\tpadding-top: $header-height;\r\n\tcolor: white;\r\n\tposition: relative;\r\n\tmargin-top: -($header-height + 58px);\r\n\t@media (max-width: $screen-medium) {\r\n\t\tpadding-top: 150px;\r\n\t}\r\n\t.hero-content {\r\n\t\tz-index: 3;\r\n\t\tposition: relative;\r\n\t\tfilter: drop-shadow($shadow);\r\n\t}\r\n\t.logo {\r\n\t\tmargin-bottom: 32px;\r\n\t\th1 {\r\n\t\t\tcolor: white;\r\n\t\t\tmargin-bottom: 8px;\r\n\t\t}\r\n\t\th5 {\r\n\t\t\tcolor: white;\r\n\t\t\tfont-weight: normal;\r\n\t\t\tmargin-top: 0;\r\n\t\t}\r\n\t}\r\n\t.hero-overlay {\r\n\t\tz-index: 1;\r\n\t\tposition: absolute;\r\n\t\tleft: 0;\r\n\t\tright: 0;\r\n\t\ttop: 0;\r\n\t\tbottom: 0;\r\n\t\tpointer-events: none;\r\n\t\tbackground: linear-gradient(rgba(black, 0.9) 0%, rgba(black, 0.25) 50%);\r\n\t}\r\n\t&:after {\r\n\t\tcontent: \"\";\r\n\t\tposition: absolute;\r\n\t\tbottom: 0;\r\n\t\tleft: 0;\r\n\t\tright: 0;\r\n\t\theight: 128px;\r\n\t\tbackground: linear-gradient(transparent 0%, $main-bg 100%);\r\n\t\tz-index: 2;\r\n\t\tpointer-events: none;\r\n\t}\r\n}\r\n",
                    "styleUrl": "./hero.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 10
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div\r\n  class=\"width-12 align-center hero flex vertical justify-center\"\r\n  style=\"background-image: url('/assets/moltresgalar.jpg')\"\r\n>\r\n  <div class=\"max\">\r\n    <div class=\"padding-8 hero-content\">\r\n      <div class=\"logo\">\r\n        <h1>Welcome to <b>Rotom</b> Dex</h1>\r\n\t\t<h5>A Card Management Mobile App and Website for Pokemon.</h5>\r\n      </div>\r\n      <div class=\"padding-top\">\r\n        <mb-search></mb-search>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div class=\"hero-overlay\"></div>\r\n</div>\r\n"
        },
        {
            "name": "HomeComponent",
            "id": "component-HomeComponent-0b2e37464b156dbd333aadc749f68a6abb3e6a7eff3df58438efc844f73d6c31198fe2f1dd36549383dd56609a149b2644f2f1991534db1468a588e2fe91f57f",
            "file": "src/app/pages/home/home.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "mb-home",
            "styleUrls": [
                "./home.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./home.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "alert",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Alert",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "cardsButton",
                    "defaultValue": "new Button({\r\n\t\ttext: 'View All Cards',\r\n\t\ticon: Icons.externalLink,\r\n\t\troute: '/cards',\r\n\t})",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Button",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "collectionButton",
                    "defaultValue": "new Button({\r\n\t\ttext: 'Manage Your Collection',\r\n\t\ticon: Icons.externalLink,\r\n\t\troute: '/collection',\r\n\t})",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Button",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "expansionButton",
                    "defaultValue": "new Button({\r\n\t\ttext: 'View All Expansions',\r\n\t\ticon: Icons.externalLink,\r\n\t\troute: '/expansions',\r\n\t})",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Button",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "featured",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Featured",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "pokemonButton",
                    "defaultValue": "new Button({\r\n\t\ttext: 'View All Pokémon',\r\n\t\ticon: Icons.externalLink,\r\n\t\troute: '/pokemon',\r\n\t})",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Button",
                    "optional": false,
                    "description": "",
                    "line": 33
                }
            ],
            "methodsClass": [
                {
                    "name": "createDialogReleaseNote",
                    "args": [
                        {
                            "name": "releaseNote",
                            "type": "ReleaseNote",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "releaseNote",
                            "type": "ReleaseNote",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Featured } from './featured';\r\nimport { FeaturedService } from './../../services/featured.service';\r\nimport { DatePipe } from '@angular/common';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { Alert, AlertType, Button, Dialog, DialogService } from '@app/controls';\r\nimport { Icons } from '@app/models';\r\nimport { ExpansionsService } from '@app/services/expansions.service';\r\nimport {\r\n\tReleaseNote,\r\n\tReleaseNotesServices,\r\n} from '@app/services/release-notes.services';\r\nimport { Expansion } from '../expansions';\r\nimport { Pokemon } from '../pokemons';\r\n\r\n@Component({\r\n\tselector: 'mb-home',\r\n\ttemplateUrl: './home.component.html',\r\n\tstyleUrls: ['./home.component.scss'],\r\n})\r\nexport class HomeComponent implements OnInit {\r\n\tfeatured: Featured;\r\n\talert: Alert;\r\n\texpansionButton: Button = new Button({\r\n\t\ttext: 'View All Expansions',\r\n\t\ticon: Icons.externalLink,\r\n\t\troute: '/expansions',\r\n\t});\r\n\tcardsButton: Button = new Button({\r\n\t\ttext: 'View All Cards',\r\n\t\ticon: Icons.externalLink,\r\n\t\troute: '/cards',\r\n\t});\r\n\tpokemonButton: Button = new Button({\r\n\t\ttext: 'View All Pokémon',\r\n\t\ticon: Icons.externalLink,\r\n\t\troute: '/pokemon',\r\n\t});\r\n\tcollectionButton: Button = new Button({\r\n\t\ttext: 'Manage Your Collection',\r\n\t\ticon: Icons.externalLink,\r\n\t\troute: '/collection',\r\n\t});\r\n\r\n\tconstructor(\r\n\t\tprivate datePipe: DatePipe,\r\n\t\tprivate featuredService: FeaturedService,\r\n\t\tprivate releaseNotesService: ReleaseNotesServices,\r\n\t\tprivate dialogService: DialogService\r\n\t) {}\r\n\r\n\tngOnInit(): void {\r\n\t\tthis.alert = new Alert({\r\n\t\t\ttype: AlertType.warning,\r\n\t\t\tmessage:\r\n\t\t\t\t'<b>Under Development:</b> Please note that Rotom Dex is still under development, you should expect to find some issues.',\r\n\t\t});\r\n\r\n\t\t// Featured\r\n\t\tthis.featuredService.getFeaturedObservable().subscribe((featured) => {\r\n\t\t\tthis.featured = featured;\r\n\t\t});\r\n\t\tthis.featuredService.getFeatured();\r\n\t}\r\n\r\n\tcreateDialogReleaseNote(releaseNote: ReleaseNote) {\r\n\t\tthis.dialogService.setDialog(\r\n\t\t\tnew Dialog({\r\n\t\t\t\ttitle: releaseNote.title,\r\n\t\t\t\tcontent: `\r\n\t\t\t\t<p>${releaseNote.content}</p>\r\n\t\t\t\t<div class=\"subheading\">v${releaseNote.version} - ${this.datePipe.transform(\r\n\t\t\t\t\treleaseNote.date\r\n\t\t\t\t)}</div>`,\r\n\t\t\t})\r\n\t\t);\r\n\t}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"settings\";\r\n\r\n.logo {\r\n\th1 {\r\n\t\tfont-family: $font-family;\r\n\t\ttext-transform: uppercase;\r\n\t\tletter-spacing: 2px;\r\n\t\tfont-weight: normal;\r\n\t\tcolor: white;\r\n\t}\r\n}\r\n\r\n.card {\r\n\tborder-radius: $border-radius-card;\r\n\toverflow: hidden;\r\n\tbox-shadow: $shadow;\r\n\tdisplay: block;\r\n}\r\n\r\n.section {\r\n\tpadding: $spacing * 14 $spacing * 2;\r\n\tbackground: $main-bg;\r\n\toverflow: hidden;\r\n\t&:not(:last-child) {\r\n\t\tborder-bottom: $border;\r\n\t}\r\n}\r\n\r\n#dev-alert {\r\n\tposition: absolute;\r\n\tleft: 50%;\r\n\ttransform: translateX(-50%) translateY(-50%);\r\n\twidth: calc(100% - #{$spacing * 4});\r\n\tmax-width: 816px;\r\n\ttext-align: center;\r\n\tz-index: 2;\r\n}\r\n\r\n#expansion-logos,\r\n#cards,\r\n#pokemon {\r\n\tposition: relative;\r\n\t&:before {\r\n\t\tcontent: \"\";\r\n\t\tposition: absolute;\r\n\t\tleft: 50%;\r\n\t\ttop: 50%;\r\n\t\ttransform: translate(-50%, -50%);\r\n\t\tbackground: radial-gradient(rgba(white, 0.2) 0%, transparent 50%);\r\n\t\twidth: 200%;\r\n\t\theight: 200%;\r\n\t\tpointer-events: none;\r\n\t}\r\n}\r\n\r\n#pokemon {\r\n\t.pokemon-link {\r\n\t\tposition: relative;\r\n\t\tdisplay: block;\r\n\t\timg {\r\n\t\t\ttransition: $transition;\r\n\t\t\tdisplay: block;\r\n\t\t}\r\n\t\t.sprite-animated {\r\n\t\t\tposition: absolute;\r\n\t\t\topacity: 0;\r\n\t\t\ttop: 50%;\r\n\t\t\tleft: 50%;\r\n\t\t\ttransform: translate(-50%, -50%);\r\n\t\t}\r\n\t\t&:hover {\r\n\t\t\t.sprite-default {\r\n\t\t\t\topacity: 0;\r\n\t\t\t}\r\n\t\t\t.sprite-animated {\r\n\t\t\t\topacity: 1;\r\n\t\t\t\ttransform: translate(-50%, -50%) scale(1.5);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n",
                    "styleUrl": "./home.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "datePipe",
                        "type": "DatePipe",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "featuredService",
                        "type": "FeaturedService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "releaseNotesService",
                        "type": "ReleaseNotesServices",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialogService",
                        "type": "DialogService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 42,
                "jsdoctags": [
                    {
                        "name": "datePipe",
                        "type": "DatePipe",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "featuredService",
                        "type": "FeaturedService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "releaseNotesService",
                        "type": "ReleaseNotesServices",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogService",
                        "type": "DialogService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<!-- Hero -->\r\n<hero></hero>\r\n\r\n<!-- Under development -->\r\n<mb-alert [alert]=\"alert\" id=\"dev-alert\" *ngIf=\"false\"></mb-alert>\r\n\r\n<!-- Expansions -->\r\n<div class=\"section dark\" *ngIf=\"featured && featured.expansions\">\r\n\t<div class=\"max\">\r\n\t\t<div class=\"flex flex-center padded-8\">\r\n\t\t\t<div class=\"width-6 small-12 small-order-2\">\r\n\t\t\t\t<div id=\"expansion-logos\">\r\n\t\t\t\t\t<div class=\"flex padded relative\">\r\n\t\t\t\t\t\t<div\r\n\t\t\t\t\t\t\tclass=\"width-3 small-2\"\r\n\t\t\t\t\t\t\t*ngFor=\"let expansion of featured.expansions\"\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<a [routerLink]=\"expansion.route\">\r\n\t\t\t\t\t\t\t\t<img\r\n\t\t\t\t\t\t\t\t\tclass=\"hover-zoom-large shadow hover-z-1\"\r\n\t\t\t\t\t\t\t\t\tsrc=\"{{ expansion.logo }}\"\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t</a>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<div class=\"width-6 small-12 small-order-1\">\r\n\t\t\t\t<h2>Expansions</h2>\r\n\t\t\t\t<p>\r\n\t\t\t\t\tExplore the most recent expansions, vintage expansions, and\r\n\t\t\t\t\teverything in-between. RotomDex provides the latest card and\r\n\t\t\t\t\tset data for both English and Japanese (coming soon).\r\n\t\t\t\t</p>\r\n\t\t\t\t<mb-button [button]=\"expansionButton\"></mb-button>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n</div>\r\n\r\n<!-- Cards -->\r\n<div class=\"section dark\" *ngIf=\"featured && featured.cards\">\r\n\t<div class=\"max\">\r\n\t\t<div class=\"flex flex-center padded-8\">\r\n\t\t\t<div class=\"width-6 small-12\">\r\n\t\t\t\t<h2>Cards</h2>\r\n\t\t\t\t<p>\r\n\t\t\t\t\tEveryone has a favorite card but with over 9,000 English\r\n\t\t\t\t\tcards and many more unique Japanese cards, there is always\r\n\t\t\t\t\tnew cards to find and appreciate.\r\n\t\t\t\t</p>\r\n\t\t\t\t<mb-button [button]=\"cardsButton\"></mb-button>\r\n\t\t\t</div>\r\n\t\t\t<div class=\"width-6 small-12\">\r\n\t\t\t\t<div id=\"cards\">\r\n\t\t\t\t\t<div class=\"flex padded relative\">\r\n\t\t\t\t\t\t<div\r\n\t\t\t\t\t\t\tclass=\"width-2 small-2\"\r\n\t\t\t\t\t\t\t*ngFor=\"let card of featured.cards\"\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<a [routerLink]=\"card.route\">\r\n\t\t\t\t\t\t\t\t<img\r\n\t\t\t\t\t\t\t\t\tclass=\"card hover-zoom-large hover-z-1\"\r\n\t\t\t\t\t\t\t\t\tsrc=\"{{ card.image }}\"\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t</a>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n</div>\r\n\r\n<!-- Pokemon -->\r\n<div class=\"section dark\" *ngIf=\"featured && featured.pokemon\">\r\n\t<div class=\"max\">\r\n\t\t<div class=\"flex flex-center padded-8\">\r\n\t\t\t<div class=\"width-6 small-12 small-order-2\">\r\n\t\t\t\t<div id=\"pokemon\">\r\n\t\t\t\t\t<div class=\"flex padded relative\">\r\n\t\t\t\t\t\t<div\r\n\t\t\t\t\t\t\tclass=\"width-2 small-2\"\r\n\t\t\t\t\t\t\t*ngFor=\"let pokemon of featured.pokemon\"\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<a\r\n\t\t\t\t\t\t\t\t[routerLink]=\"pokemon.route\"\r\n\t\t\t\t\t\t\t\tclass=\"pokemon-link\"\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t<img\r\n\t\t\t\t\t\t\t\t\tclass=\"sprite-default shadow\"\r\n\t\t\t\t\t\t\t\t\tsrc=\"{{ pokemon.sprites.default }}\"\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t<img\r\n\t\t\t\t\t\t\t\t\tclass=\"sprite-animated shadow z-1\"\r\n\t\t\t\t\t\t\t\t\tsrc=\"{{\r\n\t\t\t\t\t\t\t\t\t\tpokemon.sprites.animated ||\r\n\t\t\t\t\t\t\t\t\t\t\tpokemon.sprites.default\r\n\t\t\t\t\t\t\t\t\t}}\"\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t</a>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<div class=\"width-6 small-12 small-order-1\">\r\n\t\t\t\t<h2>Pokemon</h2>\r\n\t\t\t\t<p>\r\n\t\t\t\t\tView all the cards featuring your favorite Pokemon and\r\n\t\t\t\t\texplore the ever-growing Pokedex. With nearly 1,000 Pokemon\r\n\t\t\t\t\tspecies there is always a new Pokemon to learn about.\r\n\t\t\t\t</p>\r\n\t\t\t\t<mb-button [button]=\"pokemonButton\"></mb-button>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n</div>\r\n\r\n<!-- Collection -->\r\n<div class=\"section dark\">\r\n\t<div class=\"max\">\r\n\t\t<div class=\"flex flex-center padded-8\">\r\n\t\t\t<div class=\"width-6 small-12 small-order-1\">\r\n\t\t\t\t<h2>Collection</h2>\r\n\t\t\t\t<p>\r\n\t\t\t\t\tManage your entire Pokemon card collection, including card\r\n\t\t\t\t\tmetadata such as condition, graded condition, and unique\r\n\t\t\t\t\tprintings. Organize cards using binders, decks, and other\r\n\t\t\t\t\tgrouping categories. View and share your collection stats\r\n\t\t\t\t\tand history.\r\n\t\t\t\t</p>\r\n\t\t\t\t<mb-button [button]=\"collectionButton\"></mb-button>\r\n\t\t\t</div>\r\n\t\t\t<div class=\"width-6 small-12 small-order-2\">\r\n\t\t\t\t<div id=\"pokemon\">\r\n\t\t\t\t\t<div class=\"flex padded relative\"></div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n</div>\r\n"
        },
        {
            "name": "ItemsComponent",
            "id": "component-ItemsComponent-fd00615980f5e1e6ee089b4be5420b4fa0a50181426b8fefe90c91ce942c1e70cda2ca8323b57282c50887018a23ad17b0516b574f4f0ce0fd9de4b1de3bd937",
            "file": "src/app/layout/main/items/items.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "mb-items",
            "styleUrls": [
                "./items.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "items.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "Items",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "outputDisplayModeChanged",
                    "defaultValue": "new EventEmitter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "EventEmitter<ItemDisplayType>"
                },
                {
                    "name": "outputGetItems",
                    "defaultValue": "new EventEmitter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "EventEmitter<void>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "empty",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Empty",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methodsClass": [
                {
                    "name": "_outputGetItems",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "displayModeChanged",
                    "args": [
                        {
                            "name": "itemDisplayType",
                            "type": "ItemDisplayType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "itemDisplayType",
                            "type": "ItemDisplayType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "showEmpty",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "showGroups",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateQueryParams",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\n\r\nimport { Items } from './items';\r\nimport { ItemDisplayType } from './items-filter';\r\nimport { Title } from '@angular/platform-browser';\r\nimport { AppSettings } from '@app/app';\r\nimport { Empty } from '@app/controls';\r\n\r\n@Component({\r\n\tselector: 'mb-items',\r\n\ttemplateUrl: 'items.component.html',\r\n\tstyleUrls: ['./items.component.scss']\r\n})\r\n\r\nexport class ItemsComponent implements OnInit {\r\n\r\n\t@Input() items: Items;\r\n\t@Output() outputGetItems: EventEmitter<void> = new EventEmitter;\r\n\t@Output() outputDisplayModeChanged: EventEmitter<ItemDisplayType> = new EventEmitter;\r\n\tempty: Empty;\r\n\r\n\tconstructor(\r\n\t\tprivate route: ActivatedRoute,\r\n\t\tprivate router: Router) { }\r\n\r\n\tngOnInit() {\r\n\t\t\r\n\t\t// Get query params\r\n\t\tthis.route.queryParams.subscribe(params => {\r\n\r\n\t\t\tif (params[\"search\"]) {\r\n\t\t\t\tthis.items.filter.textboxSearch.value = params[\"search\"];\r\n\t\t\t}\r\n\r\n\t\t\tif (params[\"sortby\"]) {\r\n\t\t\t\tthis.items.filter.selectSortBy.value = params[\"sortby\"];\r\n\t\t\t}\r\n\r\n\t\t\tif (params[\"sortdirection\"]) {\r\n\t\t\t\tthis.items.filter.selectSortDirection.value = params[\"sortdirection\"];\r\n\t\t\t}\r\n\r\n\t\t\tif (params[\"displaymode\"]) {\r\n\t\t\t\tthis.items.itemDisplayType = ItemDisplayType[params[\"displaymode\"]];\r\n\t\t\t\tthis.items.filter.setDisplayMode(this.items.itemDisplayType);\r\n\t\t\t}\r\n\r\n\t\t\tif (params[\"pagesize\"]) {\r\n\t\t\t\tthis.items.footer.pageSize = +params[\"pagesize\"];\r\n\t\t\t}\r\n\r\n\t\t\tif (params[\"page\"]) {\r\n\t\t\t\tthis.items.footer.page = +params[\"page\"];\r\n\t\t\t}\r\n\r\n\t\t});\r\n\r\n\t\tthis.outputGetItems.emit();\r\n\r\n\t\tthis.empty = new Empty({\r\n\t\t\ttext: this.items.noResults,\r\n\t\t\tbutton: this.items.buttonNoResults,\r\n\t\t\ticon: this.items.noResultsIcon,\r\n\t\t\timage: this.items.noResultsImage,\r\n\t\t})\r\n\t}\r\n\r\n\tupdateQueryParams() {\r\n\t\tthis.router.navigate([], {\r\n\t\t\tqueryParams: {\r\n\t\t\t\tpagesize: this.items.footer.pageSize,\r\n\t\t\t\tpage: this.items.footer.page,\r\n\t\t\t\tsearch: this.items.filter.textboxSearch.value,\r\n\t\t\t\tsortby: this.items.filter.selectSortBy.value,\r\n\t\t\t\tsortdirection: this.items.filter.selectSortDirection.value,\r\n\t\t\t\tdisplaymode: this.items.filter.displayMode.toLowerCase()\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tshowEmpty() {\r\n\t\treturn this.items.itemGroups.length == 0;\r\n\t}\r\n\r\n\tshowGroups() {\r\n\t\treturn this.items.itemGroups.length > 0;\r\n\t}\r\n\r\n\tdisplayModeChanged(itemDisplayType: ItemDisplayType) {\r\n\t\tthis.items.itemDisplayType = itemDisplayType;\r\n\t\tthis.items.filter.displayMode = this.items.itemDisplayType;\r\n\t\tthis.outputDisplayModeChanged.emit(itemDisplayType);\r\n\t\tthis.updateQueryParams();\r\n\t}\r\n\r\n\t_outputGetItems() {\r\n\t\tthis.outputGetItems.emit();\r\n\t\tthis.updateQueryParams();\r\n\t}\r\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./items.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div\r\n\tclass=\"relative small-square\"\r\n\t*ngIf=\"items\">\r\n\r\n\t<!-- Header -->\r\n\t<mb-items-header\r\n\t\t*ngIf=\"items.showHeader\"\r\n\t\t[itemsHeader]=\"items.header\">\r\n\t</mb-items-header>\r\n\r\n\t<!-- Filter -->\r\n\t<mb-items-filter\r\n\t\t*ngIf=\"items.showFilters\"\r\n\t\t[itemsFilter]=\"items.filter\"\r\n\t\t(outputGetItems)=\"_outputGetItems()\"\r\n\t\t(outputDisplayModeChanged)=\"displayModeChanged($event)\">\r\n\t</mb-items-filter>\r\n\r\n\t<!-- Empty -->\r\n\t<mb-empty *ngIf=\"empty && showEmpty()\" [empty]=\"empty\"></mb-empty>\r\n\r\n\t<!-- Groups -->\r\n\t<mb-items-groups\r\n\t\t*ngIf=\"showGroups()\"\r\n\t\t[groups]=\"items.itemGroups\"\r\n\t\t[itemClasses]=\"items.itemClasses\"\r\n\t\t[itemDisplayType]=\"items.itemDisplayType\">\r\n\t</mb-items-groups>\r\n\r\n\t<!-- Footer -->\r\n\t<mb-items-footer\r\n\t\t*ngIf=\"items.itemGroups.length && items.showFooter\"\r\n\t\t[itemsFooter]=\"items.footer\"\r\n\t\t(outputGetItems)=\"_outputGetItems()\">\r\n\t</mb-items-footer>\r\n\r\n</div>"
        },
        {
            "name": "ItemsFilterComponent",
            "id": "component-ItemsFilterComponent-d1104eaf81548a191e0fdd476ba4d24d4ae9777f225fc494435dd96c8111be48805232ad3e0f88c3405e62f507729057c3d8e7b6e3ef21ca6466aae1fe4d6761",
            "file": "src/app/layout/main/items/items-filter/items-filter.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "mb-items-filter",
            "styleUrls": [
                "./items-filter.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "items-filter.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "itemsFilter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "ItemsFilter",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "outputDisplayModeChanged",
                    "defaultValue": "new EventEmitter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "EventEmitter<ItemDisplayType>"
                },
                {
                    "name": "outputGetItems",
                    "defaultValue": "new EventEmitter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "EventEmitter<string>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setDisplayMode",
                    "args": [
                        {
                            "name": "type",
                            "type": "ItemDisplayType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "ItemDisplayType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setupDefaultControls",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, Output, EventEmitter, ViewEncapsulation } from '@angular/core';\r\nimport { ItemsFilter, ItemDisplayType } from './items-filter';\r\nimport { Menu, MenuItem } from '@app/controls/menu';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { Icons } from '@app/models/icons';\r\n\r\n@Component({\r\n\tselector: 'mb-items-filter',\r\n\ttemplateUrl: 'items-filter.component.html',\r\n\tstyleUrls: ['./items-filter.component.scss'],\r\n\tencapsulation: ViewEncapsulation.None\r\n})\r\n\r\nexport class ItemsFilterComponent implements OnInit {\r\n\r\n\t@Input() itemsFilter: ItemsFilter;\r\n\t@Output() outputGetItems: EventEmitter<string> = new EventEmitter;\r\n\t@Output() outputDisplayModeChanged: EventEmitter<ItemDisplayType> = new EventEmitter;\r\n\r\n\tconstructor(\r\n\t\tprivate route: ActivatedRoute,\r\n\t\tprivate router: Router) { }\r\n\r\n\tngOnInit() {\r\n\t\tthis.setupDefaultControls();\r\n\t}\r\n\r\n\tsetupDefaultControls() {\r\n\r\n\t\t// Search\r\n\t\tthis.itemsFilter.textboxSearch.keydownEnter = value => {\r\n\t\t\tthis.outputGetItems.emit();\r\n\t\t}\r\n\t\tthis.itemsFilter.textboxSearch.clickIcon = value => {\r\n\t\t\tthis.outputGetItems.emit();\r\n\t\t}\r\n\t\tthis.itemsFilter.textboxSearch.clickClear = () => {\r\n\t\t\tthis.outputGetItems.emit();\r\n\t\t}\r\n\r\n\t\t// Sort by\r\n\t\tthis.itemsFilter.selectSortBy.change = value => {\r\n\t\t\tthis.outputGetItems.emit();\r\n\t\t}\r\n\r\n\t\t// Sort direction\r\n\t\tthis.itemsFilter.selectSortDirection.change = value => {\r\n\t\t\tthis.outputGetItems.emit();\r\n\t\t}\r\n\r\n\t\t// Display modes\r\n\t\tthis.itemsFilter.menuDisplayMode = new Menu({\r\n\t\t\tclearActiveClickOutside: false,\r\n\t\t\thorizontal: true,\r\n\t\t\tclasses: \"round border shadow-light\",\r\n\t\t});\r\n\r\n\t\t// Grid\r\n\t\tif (this.itemsFilter.showGridDisplayMode) {\r\n\t\t\tthis.itemsFilter.menuItemGridDisplayMode = new MenuItem({\r\n\t\t\t\ttext: \"Grid\",\r\n\t\t\t\ticon: Icons.grid,\r\n\t\t\t\tactive: this.itemsFilter.displayMode == ItemDisplayType.grid,\r\n\t\t\t\tclick: () => {\r\n\t\t\t\t\tthis.setDisplayMode(ItemDisplayType.grid);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\tthis.itemsFilter.menuDisplayMode.items.push(this.itemsFilter.menuItemGridDisplayMode);\r\n\t\t}\r\n\t\t\r\n\t\t// List\r\n\t\tif (this.itemsFilter.showListDisplayMode) { \r\n\t\t\tthis.itemsFilter.menuItemListDisplayMode = new MenuItem({\r\n\t\t\t\ttext: \"List\",\r\n\t\t\t\ticon: Icons.list,\r\n\t\t\t\tactive: this.itemsFilter.displayMode == ItemDisplayType.list,\r\n\t\t\t\tclick: () => {\r\n\t\t\t\t\tthis.setDisplayMode(ItemDisplayType.list);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\tthis.itemsFilter.menuDisplayMode.items.push(this.itemsFilter.menuItemListDisplayMode);\r\n\t\t}\r\n\t}\r\n\r\n\tsetDisplayMode(type: ItemDisplayType) {\r\n\t\tthis.outputDisplayModeChanged.emit(type);\r\n\t\tthis.itemsFilter.setDisplayMode(type);\r\n\t\tthis.itemsFilter.displayMode = type;\r\n\t}\r\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"settings\";\r\n\r\n@media (max-width: $screen-small) {\r\n\t.col-display {\r\n\t\t> div {\r\n\t\t\twidth: 100%;\r\n\t\t\tdisplay: block;\r\n\t\t}\r\n\t\tmb-menu {\r\n\t\t\twidth: 100%;\r\n\t\t\tdisplay: block;\r\n\t\t\tul {\r\n\t\t\t\tdisplay: flex;\r\n\t\t\t\tli {\r\n\t\t\t\t\tflex: 1;\r\n\t\t\t\t\ta {\r\n\t\t\t\t\t\tjustify-content: center;\r\n\t\t\t\t\t\t.text {\r\n\t\t\t\t\t\t\tflex: initial !important;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t.col-sort {\r\n\t\t.col-sort-by {\r\n\t\t\tposition: relative;\r\n\t\t\tz-index: 1;\r\n\t\t}\r\n\t\t.col-sort-direction {\r\n\t\t\tposition: relative;\r\n\t\t\tz-index: 1;\r\n\t\t}\r\n\t}\r\n}",
                    "styleUrl": "./items-filter.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<!-- Filters -->\r\n<div\r\n\tid=\"cards-filters\" \r\n\tclass=\"border-bottom padding-y padding-x-2\">\r\n\t<div class=\"max\">\r\n\t\t<div\r\n\t\t\t*ngIf=\"itemsFilter\"\r\n\t\t\tclass=\"relative z-2\">\r\n\r\n\t\t\t<div class=\"flex padded flex-center flex-wrap justify-center\">\r\n\r\n\t\t\t\t<!-- Search -->\r\n\t\t\t\t<div class=\"box medium-min-12\">\r\n\t\t\t\t\t<div class=\"medium-12\" style=\"width: 300px;\">\r\n\t\t\t\t\t\t<mb-textbox [textbox]=\"itemsFilter.textboxSearch\"></mb-textbox>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<!-- Sort by/direction -->\r\n\t\t\t\t<div class=\"col-sort small-min-12\" *ngIf=\"itemsFilter.showSort\">\r\n\t\t\t\t\t<div class=\"flex\">\r\n\t\t\t\t\t\t<mb-select\r\n\t\t\t\t\t\t\tclass=\"col-sort-by small-min-6\"\r\n\t\t\t\t\t\t\t*ngIf=\"itemsFilter.selectSortBy\"\r\n\t\t\t\t\t\t\t[select]=\"itemsFilter.selectSortBy\">\r\n\t\t\t\t\t\t</mb-select>\r\n\t\t\t\t\t\t<mb-select\r\n\t\t\t\t\t\t\tclass=\"col-sort-direction small-min-6\"\r\n\t\t\t\t\t\t\t*ngIf=\"itemsFilter.selectSortDirection\"\r\n\t\t\t\t\t\t\t[select]=\"itemsFilter.selectSortDirection\">\r\n\t\t\t\t\t\t</mb-select>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<!-- Diplay mode -->\r\n\t\t\t\t<div\r\n\t\t\t\t\t*ngIf=\"itemsFilter.menuDisplayMode && itemsFilter.menuDisplayMode.items.length > 1\"\r\n\t\t\t\t\tclass=\"col-display small-min-12 flex justify-end\">\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<mb-menu [menu]=\"itemsFilter.menuDisplayMode\"></mb-menu>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t\r\n\t\t\t</div>\r\n\t\t</div>\r\n\r\n\t</div>\r\n</div>"
        },
        {
            "name": "ItemsFooterComponent",
            "id": "component-ItemsFooterComponent-7670251f5ffe703bd44a38a18f22011f3be86657a6781ca9d25bbdd7c0bc8e2a4591ab7be01c41bdd81fce041efd5f9d6cab52f04d37fac925f9f4f9a987a612",
            "file": "src/app/layout/main/items/items-footer/items-footer-component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "mb-items-footer",
            "styleUrls": [
                "./items-footer-component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "items-footer-component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "itemsFooter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "ItemsFooter",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "outputGetItems",
                    "defaultValue": "new EventEmitter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "EventEmitter<void>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "isNextDisabled",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 108,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isPrevDisabled",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 104,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setupDefaultControlAttributes",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setupDefaultControls",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\r\nimport { ItemsFooter } from './items-footer';\r\nimport { SelectOptionGroup, SelectOption, Select } from '@app/controls/select';\r\nimport { Textbox } from '@app/controls/textbox';\r\nimport { Button } from '@app/controls/button';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { Icons } from '@app/models/icons';\r\n\r\n@Component({\r\n\tselector: 'mb-items-footer',\r\n\ttemplateUrl: 'items-footer-component.html',\r\n\tstyleUrls: ['./items-footer-component.scss']\r\n})\r\n\r\nexport class ItemsFooterComponent implements OnInit {\r\n\r\n\t@Input() itemsFooter: ItemsFooter;\r\n\r\n\t@Output() outputGetItems: EventEmitter<void> = new EventEmitter;\r\n\r\n\tconstructor(\r\n\t\tprivate route: ActivatedRoute,\r\n\t\tprivate router: Router) { }\r\n\r\n\tngOnInit() {\r\n\r\n\t\tthis.setupDefaultControls();\r\n\t\tthis.setupDefaultControlAttributes();\r\n\t}\r\n\r\n\tsetupDefaultControls() {\r\n\r\n\t\t// Page\r\n\t\tthis.itemsFooter.textboxPage.value = this.itemsFooter.page.toString();\r\n\t\tthis.itemsFooter.textboxPage.max = this.itemsFooter.totalPages;\r\n\t\tthis.itemsFooter.textboxPage.change = value => {\r\n\t\t\tthis.itemsFooter.page = +value;\r\n\t\t\tthis.outputGetItems.emit();\r\n\t\t}\r\n\r\n\t\t// Page size\r\n\t\tthis.itemsFooter.selectPageSize.value = this.itemsFooter.pageSize.toString();\r\n\t\tthis.itemsFooter.selectPageSize.change = value => {\r\n\t\t\tthis.itemsFooter.pageSize = +value;\r\n\t\t\tthis.itemsFooter.page = 1;\r\n\t\t\tthis.itemsFooter.textboxPage.value = this.itemsFooter.page.toString();\r\n\t\t\tthis.outputGetItems.emit();\r\n\t\t};\r\n\r\n\t\t// Prev\r\n\t\tthis.itemsFooter.buttonPrev.click = () => {\r\n\t\t\tthis.itemsFooter.page--;\r\n\t\t\tthis.itemsFooter.textboxPage.value = this.itemsFooter.page.toString();\r\n\t\t\tthis.outputGetItems.emit();\r\n\t\t};\r\n\r\n\t\t// Next\r\n\t\tthis.itemsFooter.buttonNext.click = () => {\r\n\t\t\tthis.itemsFooter.page++;\r\n\t\t\tthis.itemsFooter.textboxPage.value = this.itemsFooter.page.toString();\r\n\t\t\tthis.outputGetItems.emit();\r\n\t\t};\r\n\t}\r\n\r\n\tsetupDefaultControlAttributes() {\r\n\r\n\t\t// Prev/next\r\n\t\tthis.itemsFooter.buttonPrev.icon = Icons.arrowLeft;\r\n\t\tthis.itemsFooter.buttonNext.icon = Icons.arrowRight;\r\n\r\n\t\t// Page size\r\n\t\tthis.itemsFooter.selectPageSize.optionGroups = [\r\n\t\t\tnew SelectOptionGroup({\r\n\t\t\t\tlabel: \"Page Size\",\r\n\t\t\t\toptions: [\r\n\t\t\t\t\t\r\n\t\t\t\t\tnew SelectOption({\r\n\t\t\t\t\t\ttext: \"12\",\r\n\t\t\t\t\t\tvalue: \"12\"\r\n\t\t\t\t\t}),\r\n\t\t\t\t\tnew SelectOption({\r\n\t\t\t\t\t\ttext: \"24\",\r\n\t\t\t\t\t\tvalue: \"24\"\r\n\t\t\t\t\t}),\r\n\t\t\t\t\tnew SelectOption({\r\n\t\t\t\t\t\ttext: \"60\",\r\n\t\t\t\t\t\tvalue: \"60\"\r\n\t\t\t\t\t}),\r\n\t\t\t\t\tnew SelectOption({\r\n\t\t\t\t\t\ttext: \"100\",\r\n\t\t\t\t\t\tvalue: \"100\"\r\n\t\t\t\t\t})\r\n\t\t\t\t]\r\n\t\t\t})\r\n\t\t];\r\n\t\tthis.itemsFooter.selectPageSize.value = this.itemsFooter.pageSize.toString();\r\n\r\n\t\t// Page\r\n\t\tthis.itemsFooter.textboxPage.type = \"number\";\r\n\t\tthis.itemsFooter.textboxPage.min = 1;\r\n\t\tthis.itemsFooter.textboxPage.width = 64;\r\n\t}\r\n\r\n\tisPrevDisabled() {\r\n\t\treturn this.itemsFooter.page <= 1;\r\n\t}\r\n\r\n\tisNextDisabled() {\r\n\t\treturn this.itemsFooter.page >= this.itemsFooter.totalPages;\r\n\t}\r\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./items-footer-component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<!-- Footer -->\r\n<div\r\n\tid=\"main-footer\"\r\n\tclass=\"pager padding-y padding-x-2 relative round-bottom border-top z-1\"\r\n>\r\n\t<div class=\"max\">\r\n\t\t<div class=\"flex padded flex-center\">\r\n\t\t\t<!-- Page size -->\r\n\t\t\t<div class=\"width-3\">\r\n\t\t\t\t<div class=\"flex\">\r\n\t\t\t\t\t<mb-select\r\n\t\t\t\t\t\t*ngIf=\"itemsFooter.selectPageSize\"\r\n\t\t\t\t\t\t[select]=\"itemsFooter.selectPageSize\"\r\n\t\t\t\t\t></mb-select>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\r\n\t\t\t<!-- Pages -->\r\n\t\t\t<div class=\"width-6 flex justify-center\">\r\n\t\t\t\t<div class=\"flex\" *ngIf=\"itemsFooter.totalPages > 1\">\r\n\t\t\t\t\t<mb-button\r\n\t\t\t\t\t\t[disabled]=\"isPrevDisabled()\"\r\n\t\t\t\t\t\t[button]=\"itemsFooter.buttonPrev\"\r\n\t\t\t\t\t></mb-button>\r\n\t\t\t\t\t<mb-textbox\r\n\t\t\t\t\t\t[textbox]=\"itemsFooter.textboxPage\"\r\n\t\t\t\t\t></mb-textbox>\r\n\t\t\t\t\t<mb-button\r\n\t\t\t\t\t\t[disabled]=\"isNextDisabled()\"\r\n\t\t\t\t\t\t[button]=\"itemsFooter.buttonNext\"\r\n\t\t\t\t\t></mb-button>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\r\n\t\t\t<!-- Total -->\r\n\t\t\t<div class=\"width-3 align-right\">\r\n\t\t\t\t<div class=\"subheading\">\r\n\t\t\t\t\t{{itemsFooter.totalItems}} Total - Page {{itemsFooter.page}}\r\n\t\t\t\t\tof {{itemsFooter.totalPages}}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n</div>\r\n"
        },
        {
            "name": "ItemsGridComponent",
            "id": "component-ItemsGridComponent-0e57ef51e599f3137f24604905b7b220b3231c82894971a405939c7b23d0f9b40bd2cab93d150c0b46ac1d27d290bcf8e98f459b9d8695a14637d517db9d1354",
            "file": "src/app/layout/main/items/items-grid/items-grid.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "mb-items-grid",
            "styleUrls": [
                "./items-grid.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./items-grid.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "itemClasses",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "items",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "any[]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "isCard",
                    "args": [
                        {
                            "name": "item",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isExpansion",
                    "args": [
                        {
                            "name": "item",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isPokemon",
                    "args": [
                        {
                            "name": "item",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isPokemonVariant",
                    "args": [
                        {
                            "name": "item",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\r\nimport { Pokemon, PokemonVariant } from '@app/pages';\r\nimport { Card } from '@app/pages/cards/card';\r\nimport { Expansion } from '@app/pages/expansions/expansion/expansion';\r\n\r\n@Component({\r\n    selector: 'mb-items-grid',\r\n\ttemplateUrl: './items-grid.component.html',\r\n\tstyleUrls: ['./items-grid.component.scss']\r\n})\r\n\r\nexport class ItemsGridComponent implements OnInit {\r\n\r\n\t@Input() items: any[] = [];\r\n\t@Input() itemClasses: string;\r\n\r\n\tconstructor() {}\r\n\r\n    ngOnInit() {}\r\n\r\n\tisCard(item) { return item instanceof Card }\r\n\tisPokemon(item) { return item instanceof Pokemon }\r\n\tisExpansion(item) { return item instanceof Expansion }\r\n\tisPokemonVariant(item) { return item instanceof PokemonVariant }\r\n\t\r\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"settings\";\r\n\r\n.items-grid {\r\n\tdisplay: flex;\r\n\tflex-wrap: wrap;\r\n\t.item-grid {\r\n\t\tdisplay: flex;\r\n\t\twidth: percentage(1/6);\r\n\t\tposition: relative;\r\n\t\ttransition: $transition;\r\n\t\t@media (max-width: $screen-medium) {\r\n\t\t\twidth: percentage(1/4);\r\n\t\t}\r\n\t\t@media (max-width: $screen-small) {\r\n\t\t\twidth: percentage(1/3);\r\n\t\t}\r\n\t\t@media (max-width: $screen-xsmall) {\r\n\t\t\twidth: percentage(1/2);\r\n\t\t}\r\n\t\t@for $i from 1 through 100 {\r\n\t\t\t&:nth-child(#{$i}) {\r\n\t\t\t\tz-index: 100 - $i;\r\n\t\t\t}\r\n\t\t}\r\n\t\t&:hover {\r\n\t\t\tz-index: 999;\r\n\t\t\ttransform: scale(1.1);\t\r\n\t\t}\r\n\t}\r\n}\r\n.pager {\r\n    display: flex;\r\n    justify-content: center;\r\n}",
                    "styleUrl": "./items-grid.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 15
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"items-grid flex padded\" *ngIf=\"items.length\">\r\n\t<div class=\"item-grid {{itemClasses}}\" *ngFor=\"let item of items\">\r\n\r\n\t\t<!-- Expansion -->\r\n\t\t<mb-expansion-item-grid\r\n\t\t\t*ngIf=\"isExpansion(item)\"\r\n\t\t\t[expansion]=\"item\">\r\n\t\t</mb-expansion-item-grid>\r\n\r\n\t\t<!-- Card -->\r\n\t\t<mb-card-item-grid\r\n\t\t\t*ngIf=\"isCard(item)\"\r\n\t\t\t[card]=\"item\">\r\n\t\t</mb-card-item-grid>\r\n\r\n\t\t<!-- Pokemon -->\r\n\t\t<!-- <mb-pokemon-item-grid\r\n\t\t\t*ngIf=\"isPokemon(item)\"\r\n\t\t\t[pokemon]=\"item\">\r\n\t\t</mb-pokemon-item-grid> -->\r\n\r\n\t\t<!-- Pokemon variant -->\r\n\t\t<mb-pokemon-item-grid\r\n\t\t\t*ngIf=\"isPokemonVariant(item)\"\r\n\t\t\t[pokemonVariant]=\"item\">\r\n\t\t</mb-pokemon-item-grid>\r\n\r\n\t</div>\r\n</div>"
        },
        {
            "name": "ItemsGroupsComponent",
            "id": "component-ItemsGroupsComponent-d4a503e796de23755c6ec5815d6848d74dacff6d9dc6f5608077ffd508af6a6deb8873c8e885f96dcaffc39572bd2271eec7a1c1ce2e2ea854f771b8b893b7a5",
            "file": "src/app/layout/main/items/items-groups/items-groups.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "mb-items-groups",
            "styleUrls": [
                "./items-groups.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "items-groups.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "groups",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "ItemGroup[]",
                    "decorators": []
                },
                {
                    "name": "itemClasses",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "itemDisplayType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "ItemDisplayType",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "progressBar",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ProgressBar",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methodsClass": [
                {
                    "name": "getProgressBar",
                    "args": [
                        {
                            "name": "group",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "group",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "showEmpty",
                    "args": [
                        {
                            "name": "group",
                            "type": "ItemGroup",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "group",
                            "type": "ItemGroup",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showGrid",
                    "args": [
                        {
                            "name": "group",
                            "type": "ItemGroup",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "group",
                            "type": "ItemGroup",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showList",
                    "args": [
                        {
                            "name": "group",
                            "type": "ItemGroup",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "group",
                            "type": "ItemGroup",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\r\nimport { ProgressBar } from '@app/controls/progress-bar/progress-bar';\r\nimport { ItemDisplayType } from '../items-filter';\r\nimport { ItemGroup } from './item-group';\r\n\r\n@Component({\r\n\tselector: 'mb-items-groups',\r\n\ttemplateUrl: 'items-groups.component.html',\r\n\tstyleUrls: ['./items-groups.component.scss']\r\n})\r\n\r\nexport class ItemsGroupsComponent implements OnInit {\r\n\r\n\t@Input() groups: ItemGroup[];\r\n\t@Input() itemDisplayType: ItemDisplayType;\r\n\t@Input() itemClasses: string;\r\n\tprogressBar: ProgressBar;\r\n\r\n\tconstructor() { }\r\n\r\n\tngOnInit() {\r\n\t}\r\n\r\n\tgetProgressBar(group) {\r\n\t\tthis.progressBar = new ProgressBar({\r\n\t\t\tvalue: group.progress,\r\n\t\t\ttotal: group.total_cards\r\n\t\t});\r\n\t}\r\n\r\n\tshowGrid(group: ItemGroup) {\r\n\t\treturn group.items.length\r\n\t\t\t&& this.itemDisplayType == ItemDisplayType.grid;\r\n\t}\r\n\r\n\tshowList(group: ItemGroup) {\r\n\t\treturn group.items.length\r\n\t\t\t&& this.itemDisplayType == ItemDisplayType.list;\r\n\t}\r\n\r\n\tshowEmpty(group: ItemGroup) {\r\n\t\treturn group.items.length == 0;\r\n\t}\r\n\r\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"settings\";\r\n\r\n.item-group {\r\n\tborder-bottom: $border;\r\n\t&:last-child {\r\n\t\tborder-bottom: 0;\r\n\t}\r\n\th2 {\r\n\t\tmargin-top: $spacing * 2;\r\n\t}\r\n}",
                    "styleUrl": "./items-groups.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 17
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<!-- List/Grid -->\r\n<div\r\n\t[class.item-groups]=\"groups.length > 1\"\r\n\t*ngIf=\"groups && groups.length\">\r\n\t<div\r\n\t\t*ngFor=\"let group of groups\"\r\n\t\tclass=\"item-group\">\r\n\t\t<div class=\"item-group-inner padding-2\">\t\t\r\n\t\t\t<div class=\"max\">\r\n\r\n\t\t\t\t<div class=\"padding-bottom\" *ngIf=\"group.name\">\r\n\t\t\t\t\t<div class=\"flex padded flex-end\">\r\n\t\t\t\t\t\t<div class=\"box\">\r\n\t\t\t\t\t\t\t<div class=\"h2 bold\">{{group.name}}</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div class=\"width-3\">\r\n\t\t\t\t\t\t\t<progress-bar\r\n\t\t\t\t\t\t\t\tclass=\"padding-bottom block\"\r\n\t\t\t\t\t\t\t\t[progressBar]=\"getProgressBar(group)\">\r\n\t\t\t\t\t\t\t</progress-bar>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<!-- List -->\r\n\t\t\t\t<mb-items-list\r\n\t\t\t\t\t*ngIf=\"showList(group)\"\r\n\t\t\t\t\t[items]=\"group.items\">\r\n\t\t\t\t</mb-items-list>\r\n\r\n\t\t\t\t<!-- Grid -->\r\n\t\t\t\t<mb-items-grid\r\n\t\t\t\t\t*ngIf=\"showGrid(group)\"\r\n\t\t\t\t\t[itemClasses]=\"itemClasses\"\r\n\t\t\t\t\t[items]=\"group.items\">\r\n\t\t\t\t</mb-items-grid>\r\n\t\t\t\t\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n</div>"
        },
        {
            "name": "ItemsHeaderComponent",
            "id": "component-ItemsHeaderComponent-fe90e2a9127dab19f5829a5fa981e32ec2039b29f75544580f960c11210c11468091b2ce06f9555b30bb03f4ae014fc8bc9aac3c3ea102acf6996c92cda07084",
            "file": "src/app/layout/main/items/items-header/items-header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "mb-items-header",
            "styleUrls": [
                "./items-header.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "items-header.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "itemsHeader",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "ItemsHeader",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setupDefaultControlAttributes",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input } from '@angular/core';\r\nimport { ProgressBar } from '@app/controls/progress-bar/progress-bar';\r\nimport { ItemsHeader } from './items-header';\r\n\r\n@Component({\r\n\tselector: 'mb-items-header',\r\n\ttemplateUrl: 'items-header.component.html',\r\n\tstyleUrls: ['./items-header.component.scss']\r\n})\r\n\r\nexport class ItemsHeaderComponent implements OnInit {\r\n\r\n\t@Input() itemsHeader: ItemsHeader;\r\n\r\n\tconstructor() { }\r\n\r\n\tngOnInit() {\r\n\t\tthis.setupDefaultControlAttributes();\r\n\t}\r\n\r\n\tsetupDefaultControlAttributes() {\r\n\t\tif (this.itemsHeader.menu) { \r\n\t\t\tthis.itemsHeader.menu.classes = \"round border-primary shadow-light\";\r\n\t\t\tthis.itemsHeader.menu.horizontal = true;\r\n\t\t}\r\n\t}\r\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"settings\";\r\n\r\n#item-header {\r\n\tposition: relative;\r\n\tpadding: $spacing * 2;\r\n\tdisplay: flex;\r\n\tfa-icon {\r\n\t\twidth: 64px;\r\n\t\theight: 64px;\r\n\t\tpadding: $spacing * 2;\r\n\t}\r\n\t.symbol-wrapper {\r\n\t\twidth: auto;\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t\tjustify-content: center;\r\n\t\talign-items: center;\r\n\t\t@media (max-width: $screen-small) {\r\n\t\t\twidth: 100%;\r\n\t\t}\r\n\t\timg {\r\n\t\t\tmax-width: 100%;\r\n\t\t\tmax-height: 100%;\r\n\t\t}\r\n\t\t.symbol-inner {\r\n\t\t\theight: 56px;\r\n\t\t\tmax-width: 200px;\r\n\t\t\tpadding: $spacing;\r\n\t\t\tdisplay: flex;\r\n\t\t\tjustify-content: center;\r\n\t\t\talign-items: center;\r\n\t\t}\r\n\t}\r\n\t.title {\r\n\t\tmargin: 0;\r\n\t}\r\n\t.price {\r\n\t\tcolor: $green;\r\n\t\tfont-weight: bold;\r\n\t}\r\n\t.tags {\r\n\t\tmargin-top: 6px;\r\n\t}\r\n\t@media (max-width: $screen-small) {\r\n\t\tborder-top-left-radius: 0;\r\n\t\tborder-top-right-radius: 0;\r\n\t\t[class^=\"texture\"] {\r\n\t\t\tborder-top-left-radius: 0;\r\n\t\t\tborder-top-right-radius: 0;\r\n\t\t}\r\n\t\t.icon-wrapper,\r\n\t\t.symbol-wrapper {\r\n\t\t\t//display: none;\r\n\t\t\tfa-icon {\r\n\t\t\t\tpadding: $spacing;\r\n\t\t\t\twidth: 40px;\r\n\t\t\t\theight: 40px;\r\n\t\t\t}\r\n\t\t}\r\n\t\t.cards-menu {\r\n\t\t\tdisplay: flex;\r\n\t\t\twidth: 100%;\r\n\t\t}\r\n\t\t.main-header-menu {\r\n\t\t\twidth: 100%;\r\n\t\t\tdisplay: flex;\r\n\t\t}\r\n\t}\r\n}\r\n",
                    "styleUrl": "./items-header.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 13
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<!-- Header -->\r\n<div *ngIf=\"itemsHeader\" id=\"item-header\" class=\"z-4 border-bottom\">\r\n\t<div class=\"max-12 width-12\">\r\n\t\t<div class=\"max\">\r\n\t\t\t<div class=\"flex box padded-2 flex-center\">\r\n\t\t\t\t<!-- Symbol -->\r\n\t\t\t\t<div class=\"symbol-wrapper\" *ngIf=\"itemsHeader.symbol\">\r\n\t\t\t\t\t<div class=\"symbol-inner\">\r\n\t\t\t\t\t\t<img\r\n\t\t\t\t\t\t\tclass=\"symbol {{ itemsHeader.symbolRarity }}\"\r\n\t\t\t\t\t\t\tsrc=\"{{ itemsHeader.symbol }}\"\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<!-- Icon -->\r\n\t\t\t\t<div *ngIf=\"itemsHeader.icon\" class=\"icon-wrapper\">\r\n\t\t\t\t\t<fa-icon [icon]=\"itemsHeader.icon\"></fa-icon>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<div class=\"box min-0\">\r\n\t\t\t\t\t<!-- Title -->\r\n\t\t\t\t\t<h2 class=\"title ellipsis\">\r\n\t\t\t\t\t\t<a\r\n\t\t\t\t\t\t\t*ngIf=\"itemsHeader.titleRoute\"\r\n\t\t\t\t\t\t\t[routerLink]=\"itemsHeader.titleRoute\"\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t{{ itemsHeader.title }}\r\n\t\t\t\t\t\t</a>\r\n\t\t\t\t\t\t<span *ngIf=\"!itemsHeader.titleRoute\">\r\n\t\t\t\t\t\t\t{{ itemsHeader.title }}\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t</h2>\r\n\r\n\t\t\t\t\t<!-- Sub heading -->\r\n\t\t\t\t\t<div class=\"subheading\">\r\n\t\t\t\t\t\t{{ itemsHeader.subtitle }}\r\n\t\t\t\t\t\t<span *ngIf=\"itemsHeader.price\"\r\n\t\t\t\t\t\t\t>-\r\n\t\t\t\t\t\t\t<span class=\"price\">\r\n\t\t\t\t\t\t\t\t{{ itemsHeader.price | currency }}\r\n\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t<!-- Tags -->\r\n\t\t\t\t\t<div class=\"tags\" *ngIf=\"itemsHeader.tags.length\">\r\n\t\t\t\t\t\t<div class=\"flex padded flex-wrap\">\r\n\t\t\t\t\t\t\t<div *ngFor=\"let tag of itemsHeader.tags\">\r\n\t\t\t\t\t\t\t\t<mb-tag [tag]=\"tag\"></mb-tag>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<!-- Menu -->\r\n\t\t\t\t<div class=\"main-header-menu\" *ngIf=\"itemsHeader.menu\">\r\n\t\t\t\t\t<mb-menu [menu]=\"itemsHeader.menu\"></mb-menu>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<!-- Toggle -->\r\n\t\t\t\t<div *ngIf=\"itemsHeader.toggle\">\r\n\t\t\t\t\t<mb-toggle [toggle]=\"itemsHeader.toggle\"></mb-toggle>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<!-- Button -->\r\n\t\t\t\t<div *ngIf=\"itemsHeader.button\">\r\n\t\t\t\t\t<mb-button [button]=\"itemsHeader.button\"></mb-button>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<!-- Progress bar -->\r\n\t\t\t\t<div *ngIf=\"itemsHeader.progressBar\" class=\"width-3 medium-12\">\r\n\t\t\t\t\t<progress-bar\r\n\t\t\t\t\t\t[progressBar]=\"itemsHeader.progressBar\"\r\n\t\t\t\t\t></progress-bar>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n</div>\r\n"
        },
        {
            "name": "ItemsListComponent",
            "id": "component-ItemsListComponent-904a4940939dd26a400c29209171ee90b0d5a0c750eeca3c28e6ebad5e04e3777f73d86b1929c6b1ce7644a2529ecec886c296f56be76fd2b065a30a64a4e3a1",
            "file": "src/app/layout/main/items/items-list/items-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "mb-items-list",
            "styleUrls": [
                "./items-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./items-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "any[]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "isCard",
                    "args": [
                        {
                            "name": "item",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isExpansion",
                    "args": [
                        {
                            "name": "item",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isPokemon",
                    "args": [
                        {
                            "name": "item",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isPokemonVariant",
                    "args": [
                        {
                            "name": "item",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\r\nimport { Pokemon, PokemonVariant } from '@app/pages';\r\n\r\nimport { Card } from '@app/pages/cards/card';\r\nimport { Expansion } from '@app/pages/expansions/expansion';\r\n\r\n@Component({\r\n    selector: 'mb-items-list',\r\n\ttemplateUrl: './items-list.component.html',\r\n\tstyleUrls: ['./items-list.component.scss']\r\n})\r\n\r\nexport class ItemsListComponent implements OnInit {\r\n\r\n\t@Input() items: any[];\r\n\r\n    constructor() {}\r\n\r\n    ngOnInit() {}\r\n\t\r\n\tisCard(item) { return item instanceof Card; }\r\n\tisPokemon(item) { return item instanceof Pokemon; }\r\n\tisExpansion(item) { return item instanceof Expansion; }\r\n\tisPokemonVariant(item) { return item instanceof PokemonVariant; }\r\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"settings\",\r\n\t\t\"scaffold/typography\";\r\n\r\n.items-list {\r\n    > ul {\r\n        > li {\r\n            position: relative;\r\n            @for $i from 1 through 100 {\r\n                &:nth-child(#{$i}) {\r\n                    z-index: 100 - $i;\r\n                }\r\n\t\t\t}\r\n\t\t\tborder-bottom: $border;\r\n\t\t\t&:last-child {\r\n\t\t\t\tborder-bottom: 0;\r\n\t\t\t}\r\n        }\r\n    }\r\n}\r\n.pager {\r\n    display: flex;\r\n    justify-content: center;\r\n    > * {\r\n        margin: 4px;\r\n    }\r\n}",
                    "styleUrl": "./items-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 16
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"items-list\" *ngIf=\"items.length\">\r\n    <ul>\r\n        <li *ngFor=\"let item of items\">\r\n\t\t\t\r\n\t\t\t<!-- Card -->\r\n\t\t\t<mb-card-item-list\r\n\t\t\t\t*ngIf=\"isCard(item)\"\r\n\t\t\t\t[card]=\"item\">\r\n\t\t\t</mb-card-item-list>\r\n\r\n\t\t\t<!-- Expansion -->\r\n\t\t\t<mb-expansion-item-list\r\n\t\t\t\t*ngIf=\"isExpansion(item)\"\r\n\t\t\t\t[expansion]=\"item\">\r\n\t\t\t</mb-expansion-item-list>\r\n\r\n\t\t\t<!-- Pokemon variant -->\r\n\t\t\t<mb-pokemon-item-list\r\n\t\t\t\t*ngIf=\"isPokemonVariant(item)\"\r\n\t\t\t\t[pokemonVariant]=\"item\">\r\n\t\t\t</mb-pokemon-item-list>\r\n\r\n\t\t</li>\r\n    </ul>\r\n</div>"
        },
        {
            "name": "LoaderComponent",
            "id": "component-LoaderComponent-4e9a62ea115e01f50241676b8f5ec5ff5cd52ef8ad6c952023e2fa2554db296e766ab9c74afafd0f04cda34c3e70dde09ff184fd9c2df0eef01449a0cc12cfbe",
            "file": "src/app/controls/loader/loader.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "mb-loader",
            "styleUrls": [
                "./loader.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./loader.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "active",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "dark",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input } from '@angular/core';\r\n\r\n@Component({\r\n\tselector: 'mb-loader',\r\n\ttemplateUrl: './loader.component.html',\r\n\tstyleUrls: ['./loader.component.scss']\r\n})\r\n\r\nexport class LoaderComponent implements OnInit {\r\n\r\n\t@Input() dark: boolean;\r\n\t@Input() active: boolean;\r\n\r\n\tconstructor() { }\r\n\r\n\tngOnInit(): void {\r\n\r\n\t}\r\n\r\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"settings\";\r\n\r\n$border-pokeball: 4px solid rgb(102, 0, 0);\r\n\r\n.pokeball-wrapper {\r\n\tposition: absolute;\r\n\ttop: 50%;\r\n\tleft: 50%;\r\n\ttransform: translate(-50%, -50%);\r\n}\r\n\r\n.pokeball {\r\n\twidth: 60px;\r\n\theight: 60px;\r\n\tbackground-color: #fff;\r\n\tborder-radius: 50%;\r\n\tposition: relative;\r\n\toverflow: hidden;\r\n\tanimation: rotate 0.8s linear 0s infinite;\r\n\tbox-shadow: 0 0 8px 8px black;\r\n}\r\n\r\n// Center\r\n.pokeball:before {\r\n\tcontent: \"\";\r\n\tposition: absolute;\r\n\tbackground-color: #fff;\r\n\twidth: 14px;\r\n\theight: 14px;\r\n\tborder: $border-pokeball;\r\n\tborder-radius: 50%;\r\n\tz-index: 1;\r\n\ttop: 50%;\r\n\tleft: 50%;\r\n\ttransform: translate(-50%, -50%);\r\n}\r\n\r\n// Red\r\n.pokeball:after {\r\n\tcontent: \"\";\r\n\tposition: absolute;\r\n\tbackground-color: red;\r\n\tborder-bottom: $border-pokeball;\r\n\ttop: 0;\r\n\theight: calc(50% + 2px);\r\n\twidth: 100%;\r\n}\r\n\r\n@keyframes rotate {\r\n\t0% {\r\n\t\ttransform: rotate(0deg);\r\n\t}\r\n\t100% {\r\n\t\ttransform: rotate(360deg);\r\n\t}\r\n}\r\n",
                    "styleUrl": "./loader.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 12
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"overlay\" [class.active]=\"active\">\r\n\t<div class=\"pokeball-wrapper\">\r\n\t\t<div class=\"pokeball\"></div>\r\n\t</div>\r\n</div>"
        },
        {
            "name": "MenuComponent",
            "id": "component-MenuComponent-9b01cb374d7eee05be1e21a893881e508e559dd4dd213de2ebc54a02ab9b4296d4aaff1504fb06c4b79f7674e5f65bbec4496a7d2b3f326b1464ec8eda953b8e",
            "file": "src/app/controls/menu/menu.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "mb-menu",
            "styleUrls": [
                "./menu.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./menu.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "menu",
                    "defaultValue": "new Menu()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "Menu",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "clickOutside",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getExpandIcon",
                    "args": [
                        {
                            "name": "item",
                            "type": "MenuItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "\"caret-up\" | \"caret-down\"",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "MenuItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onItemClick",
                    "args": [
                        {
                            "name": "item",
                            "type": "MenuItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "MenuItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input } from '@angular/core';\r\nimport { Menu, MenuItem } from './menu';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\n\r\n@Component({\r\n\tselector: 'mb-menu',\r\n\ttemplateUrl: './menu.component.html',\r\n\tstyleUrls: ['./menu.component.scss'],\r\n})\r\nexport class MenuComponent implements OnInit {\r\n\t@Input() menu: Menu = new Menu();\r\n\r\n\tconstructor(private router: Router, private route: ActivatedRoute) {}\r\n\r\n\tngOnInit(): void {}\r\n\r\n\tonItemClick(item: MenuItem, event: MouseEvent) {\r\n\t\tif (!item.href) {\r\n\t\t\tevent.preventDefault();\r\n\t\t\tevent.stopPropagation();\r\n\r\n\t\t\tif (item.route) {\r\n\t\t\t\tthis.router.navigate([item.route], { relativeTo: this.route });\r\n\t\t\t}\r\n\r\n\t\t\t// item.click is often clearActive, so save current active state first\r\n\t\t\tlet active = item.active;\r\n\t\t\tif (item.click) {\r\n\t\t\t\titem.click(event);\r\n\t\t\t}\r\n\t\t\tif (item.menu) {\r\n\t\t\t\titem.active = !active;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tgetExpandIcon(item: MenuItem) {\r\n\t\tif (item.menu.classes && item.menu.classes.includes('anchor-bottom')) {\r\n\t\t\treturn 'caret-up';\r\n\t\t} else {\r\n\t\t\treturn 'caret-down';\r\n\t\t}\r\n\t}\r\n\r\n\tclickOutside() {\r\n\t\tif (this.menu.clearActiveClickOutside) {\r\n\t\t\tthis.menu.clearActive();\r\n\t\t}\r\n\t}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"settings\";\r\n@import \"../button/button.component.scss\";\r\n\r\n.menu {\r\n\t//box-shadow: $shadow-sheen;\r\n\t//border: $border;\r\n\tbackground: $input-bg;\r\n\t@media (max-width: $screen-medium) {\r\n\t\t&.medium-stacked {\r\n\t\t\ta {\r\n\t\t\t\tflex-direction: column;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\ta:not(.no-ellipsis) {\r\n\t\t.text {\r\n\t\t\twhite-space: nowrap;\r\n\t\t\ttext-overflow: ellipsis;\r\n\t\t\toverflow: hidden;\r\n\t\t}\r\n\t}\r\n\t&.dark {\r\n\t\tborder-color: $border-color-strong;\r\n\t}\r\n\ta {\r\n\t\tdisplay: flex;\r\n\t\tflex-wrap: nowrap;\r\n\t\talign-items: center;\r\n\t\tmin-height: 40px;\r\n\t\tpadding: $spacing ($spacing * 2);\r\n\t\tflex: 1;\r\n\t\tmax-width: 100%;\r\n\t\tuser-select: none;\r\n\t\tcolor: $font-color;\r\n\t\t@media (max-width: $screen-small) {\r\n\t\t\tpadding: 8px 12px;\r\n\t\t}\r\n\t\t&:hover {\r\n\t\t\tbackground: rgba($grey, 0.1);\r\n\t\t}\r\n\t\t.text {\r\n\t\t\tflex: 1 0 0;\r\n\t\t\tmin-width: 0;\r\n\t\t\t+ .price {\r\n\t\t\t\tpadding-left: $spacing;\r\n\t\t\t}\r\n\t\t}\r\n\t\t.symbol {\r\n\t\t\theight: 20px;\r\n\t\t\twidth: 20px;\r\n\t\t\tdisplay: flex;\r\n\t\t\tjustify-content: center;\r\n\t\t\tfilter: contrast(0) brightness(10);\r\n\t\t\t//filter: contrast(0) sepia(100%) hue-rotate(164deg) brightness(0.7)\r\n\t\t\t//\tsaturate(2);\r\n\t\t\timg {\r\n\t\t\t\tmax-height: 100%;\r\n\t\t\t\tdisplay: block;\r\n\t\t\t}\r\n\t\t\t+ * {\r\n\t\t\t\tpadding-left: $spacing;\r\n\t\t\t}\r\n\t\t}\r\n\t\t.icon {\r\n\t\t\tfa-icon {\r\n\t\t\t\twidth: 20px;\r\n\t\t\t\theight: 16px;\r\n\t\t\t}\r\n\t\t\t+ .text {\r\n\t\t\t\tpadding-left: $spacing;\r\n\t\t\t}\r\n\t\t}\r\n\t\tspan + .icon-expand {\r\n\t\t\tpadding-left: $spacing;\r\n\t\t}\r\n\t\t.price {\r\n\t\t\tcolor: $green;\r\n\t\t\tfont-weight: bold;\r\n\t\t}\r\n\t}\r\n\tli {\r\n\t\tposition: relative;\r\n\t\tdisplay: flex;\r\n\t\tuser-select: none;\r\n\t\tflex-wrap: wrap;\r\n\t\t//flex: 1 0 0; // Made card detail tabs span parent\r\n\t\t&.active {\r\n\t\t\t> a {\r\n\t\t\t\tbox-shadow: inset 3px 0 0 $primary-color;\r\n\t\t\t\tbackground: rgba($primary-color, 0.1);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t&.disabled {\r\n\t\t\topacity: 0.5;\r\n\t\t\tcursor: not-allowed;\r\n\t\t\ta {\r\n\t\t\t\tpointer-events: none;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t.form {\r\n\t\t\tdisplay: flex;\r\n\t\t\tflex-wrap: nowrap;\r\n\t\t}\r\n\r\n\t\t// Handle icon rotation\r\n\t\t&.icon-tap {\r\n\t\t\t> a {\r\n\t\t\t\t> .icon {\r\n\t\t\t\t\tfa-icon {\r\n\t\t\t\t\t\ttransform: rotateY(180deg);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tmb-textbox {\r\n\t\t\tdisplay: block;\r\n\t\t\t+ mb-button {\r\n\t\t\t\t&.padding {\r\n\t\t\t\t\tpadding-left: 0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tmb-button {\r\n\t\t\tdisplay: block;\r\n\t\t}\r\n\r\n\t\t// See collection card version menu for why\r\n\t\tmb-menu {\r\n\t\t\tmin-width: 100%;\r\n\t\t}\r\n\t}\r\n\tul {\r\n\t\tposition: relative;\r\n\t\t.menu {\r\n\t\t\tposition: absolute;\r\n\t\t\ttop: 100%;\r\n\t\t\tleft: 0;\r\n\t\t\tbackground: $panel-bg;\r\n\t\t\tbox-shadow: $shadow;\r\n\t\t\tborder-radius: $border-radius;\r\n\t\t\twhite-space: nowrap;\r\n\t\t\tz-index: 1;\r\n\t\t\t&.anchor-right {\r\n\t\t\t\tleft: auto;\r\n\t\t\t\tright: 0;\r\n\t\t\t}\r\n\t\t\t&.anchor-bottom {\r\n\t\t\t\tbottom: 100%;\r\n\t\t\t\ttop: auto;\r\n\t\t\t}\r\n\t\t\t&.anchor-center {\r\n\t\t\t\tleft: 50%;\r\n\t\t\t\ttransform: translateX(-50%);\r\n\t\t\t}\r\n\r\n\t\t\tul {\r\n\t\t\t\toverflow-y: auto;\r\n\t\t\t\t// Sub-sub menu\r\n\t\t\t\t.menu {\r\n\t\t\t\t\tposition: relative;\r\n\t\t\t\t\ttop: 0;\r\n\t\t\t\t\tleft: 0;\r\n\t\t\t\t\tright: auto;\r\n\t\t\t\t\tbottom: auto;\r\n\t\t\t\t\tmargin: $spacing;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// Borders\r\n\t&.borders {\r\n\t\t&:not(.horizonal) {\r\n\t\t\tli:not(:last-child) {\r\n\t\t\t\tborder-bottom: $border;\r\n\t\t\t}\r\n\t\t}\r\n\t\t&.horizonal {\r\n\t\t\tli:not(:last-child) {\r\n\t\t\t\tborder-right: $border;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// Sizes\r\n\t&.small {\r\n\t\ta {\r\n\t\t\tpadding: 8px 12px;\r\n\t\t\tfont-size: 14px;\r\n\t\t\t.icon {\r\n\t\t\t\tfa-icon {\r\n\t\t\t\t\twidth: 14px;\r\n\t\t\t\t\theight: 14px;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t&.large {\r\n\t\ta {\r\n\t\t\tpadding: 12px 24px;\r\n\t\t\tfont-size: 120%;\r\n\t\t\t.icon {\r\n\t\t\t\tfa-icon {\r\n\t\t\t\t\twidth: 24px;\r\n\t\t\t\t\theight: 24px;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// Round\r\n\t&.round {\r\n\t\t> ul > li {\r\n\t\t\t&:first-child > a {\r\n\t\t\t\tborder-top-left-radius: $border-radius;\r\n\t\t\t\tborder-top-right-radius: $border-radius;\r\n\t\t\t}\r\n\t\t\t&:last-child > a {\r\n\t\t\t\tborder-bottom-left-radius: $border-radius;\r\n\t\t\t\tborder-bottom-right-radius: $border-radius;\r\n\t\t\t}\r\n\t\t}\r\n\t\t&.horizontal {\r\n\t\t\t> ul > li {\r\n\t\t\t\t&:first-child > a {\r\n\t\t\t\t\tborder-top-left-radius: $border-radius;\r\n\t\t\t\t\tborder-bottom-left-radius: $border-radius;\r\n\t\t\t\t\tborder-top-right-radius: 0;\r\n\t\t\t\t\tborder-bottom-right-radius: 0;\r\n\t\t\t\t}\r\n\t\t\t\t&:last-child > a {\r\n\t\t\t\t\tborder-top-right-radius: $border-radius;\r\n\t\t\t\t\tborder-bottom-right-radius: $border-radius;\r\n\t\t\t\t\tborder-bottom-left-radius: 0;\r\n\t\t\t\t\tborder-top-left-radius: 0;\r\n\t\t\t\t}\r\n\t\t\t\t&:first-child:last-child > a {\r\n\t\t\t\t\tborder-radius: $border-radius;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t@media (max-width: $screen-medium) {\r\n\t\t&.medium-square {\r\n\t\t\t> ul > li {\r\n\t\t\t\t&:first-child > a {\r\n\t\t\t\t\tborder-radius: 0 !important;\r\n\t\t\t\t}\r\n\t\t\t\t&:last-child > a {\r\n\t\t\t\t\tborder-radius: 0 !important;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t&.round-top {\r\n\t\tli {\r\n\t\t\t&:first-child > a {\r\n\t\t\t\tborder-top-left-radius: $border-radius;\r\n\t\t\t\tborder-top-right-radius: $border-radius;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t&.round-bottom {\r\n\t\tli {\r\n\t\t\t&:last-child > a {\r\n\t\t\t\tborder-bottom-right-radius: $border-radius;\r\n\t\t\t\tborder-bottom-left-radius: $border-radius;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// Tabs\r\n\t&.tabs {\r\n\t\tborder-bottom: 1px solid $border-color;\r\n\t\t> ul {\r\n\t\t\t> li {\r\n\t\t\t\t> a {\r\n\t\t\t\t\tborder-top-left-radius: $border-radius-small;\r\n\t\t\t\t\tborder-top-right-radius: $border-radius-small;\r\n\t\t\t\t\t@media (max-width: $screen-medium) {\r\n\t\t\t\t\t\tflex-direction: column;\r\n\t\t\t\t\t\talign-items: center;\r\n\t\t\t\t\t\tfont-size: 100%;\r\n\t\t\t\t\t\tpadding: $spacing;\r\n\t\t\t\t\t\t.text {\r\n\t\t\t\t\t\t\tflex: initial;\r\n\t\t\t\t\t\t\tpadding-left: 0 !important;\r\n\t\t\t\t\t\t\tmargin-top: 4px;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t.icon-expand {\r\n\t\t\t\t\t\t\tdisplay: none;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t@media (max-width: $screen-small) {\r\n\t\t\t\t\t\tfont-size: 14px;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// Horizontal\r\n\t&.tabs,\r\n\t&.horizontal {\r\n\t\t> ul {\r\n\t\t\tdisplay: flex;\r\n\t\t\tflex-wrap: nowrap;\r\n\t\t\t> li {\r\n\t\t\t\t&.active {\r\n\t\t\t\t\t> a {\r\n\t\t\t\t\t\tbox-shadow: inset 0 -3px 0 0 $primary-color,\r\n\t\t\t\t\t\t\t0 1px 0 0 $primary-color;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n",
                    "styleUrl": "./menu.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<nav\r\n\t*ngIf=\"menu\"\r\n\t(clickOutside)=\"clickOutside()\"\r\n\t[class.dark]=\"menu.dark\"\r\n\tclass=\"menu\r\n\t\t{{ menu.round ? 'round' : '' }}\r\n\t\t{{ menu.size ? menu.size : '' }}\r\n\t\t{{ menu.classes ? menu.classes : '' }}\r\n\t\t{{ menu.horizontal ? 'horizontal' : '' }}\r\n\t\t{{ menu.tabs ? 'tabs' : '' }}\r\n\t\t{{ menu.borders ? 'borders' : '' }}\"\r\n>\r\n\t<div class=\"menu-search\" *ngIf=\"menu.search\">\r\n\t\t<mb-textbox [textbox]=\"menu.textboxSearch\"></mb-textbox>\r\n\t</div>\r\n\t<ul\r\n\t\t[style.minHeight]=\"menu.minHeight ? menu.minHeight : null\"\r\n\t\t[style.minWidth]=\"menu.minWidth ? menu.minWidth : null\"\r\n\t\t[style.maxHeight]=\"menu.maxHeight ? menu.maxHeight : null\"\r\n\t\t[style.maxWidth]=\"menu.maxWidth ? menu.maxWidth : null\"\r\n\t>\r\n\t\t<li\r\n\t\t\t*ngFor=\"let item of menu.items\"\r\n\t\t\t[class.disabled]=\"item.disabled\"\r\n\t\t\t[class.active]=\"item.active\"\r\n\t\t\tclass=\"{{ item.classes ? item.classes : '' }}\"\r\n\t\t\t[routerLinkActive]=\"item.route ? 'active' : ''\"\r\n\t\t\t[routerLinkActiveOptions]=\"{ exact: item.exactMatch }\"\r\n\t\t>\r\n\t\t\t<hr *ngIf=\"item.separator\" />\r\n\r\n\t\t\t<a\r\n\t\t\t\t[class]=\"item.classesLink\"\r\n\t\t\t\t*ngIf=\"!item.separator && !item.textbox && !item.route\"\r\n\t\t\t\t[href]=\"item && item.href\"\r\n\t\t\t\t[target]=\"item && item.target\"\r\n\t\t\t\t(click)=\"onItemClick(item, $event)\"\r\n\t\t\t>\r\n\t\t\t\t<span class=\"symbol\" *ngIf=\"item.symbol\">\r\n\t\t\t\t\t<img [src]=\"item.symbol\" />\r\n\t\t\t\t</span>\r\n\t\t\t\t<span class=\"icon\" *ngIf=\"item.icon\">\r\n\t\t\t\t\t<fa-icon [icon]=\"item.icon\"></fa-icon>\r\n\t\t\t\t</span>\r\n\t\t\t\t<span\r\n\t\t\t\t\tclass=\"text {{ menu.maxWidth ? 'ellipsis' : '' }}\"\r\n\t\t\t\t\t*ngIf=\"item.text\"\r\n\t\t\t\t>\r\n\t\t\t\t\t{{ item.text }}\r\n\t\t\t\t</span>\r\n\t\t\t\t<span class=\"price\" *ngIf=\"item.price\">\r\n\t\t\t\t\t{{ item.price | currency }}\r\n\t\t\t\t</span>\r\n\t\t\t\t<span class=\"icon-expand\" *ngIf=\"item.menu\">\r\n\t\t\t\t\t<fa-icon [icon]=\"getExpandIcon(item)\"></fa-icon>\r\n\t\t\t\t</span>\r\n\t\t\t</a>\r\n\r\n\t\t\t<a\r\n\t\t\t\t[routerLink]=\"item.route\"\r\n\t\t\t\t[class]=\"item.classesLink\"\r\n\t\t\t\t*ngIf=\"!item.separator && !item.textbox && item.route\"\r\n\t\t\t\t(click)=\"onItemClick(item, $event)\"\r\n\t\t\t>\r\n\t\t\t\t<span class=\"symbol\" *ngIf=\"item.symbol\">\r\n\t\t\t\t\t<img [src]=\"item.symbol\" />\r\n\t\t\t\t</span>\r\n\t\t\t\t<span class=\"icon\" *ngIf=\"item.icon\">\r\n\t\t\t\t\t<fa-icon [icon]=\"item.icon\"></fa-icon>\r\n\t\t\t\t</span>\r\n\t\t\t\t<span\r\n\t\t\t\t\tclass=\"text {{ menu.maxWidth ? 'ellipsis' : '' }}\"\r\n\t\t\t\t\t*ngIf=\"item.text\"\r\n\t\t\t\t>\r\n\t\t\t\t\t{{ item.text }}\r\n\t\t\t\t</span>\r\n\t\t\t\t<span class=\"price\" *ngIf=\"item.price\">\r\n\t\t\t\t\t{{ item.price | currency }}\r\n\t\t\t\t</span>\r\n\t\t\t\t<span class=\"icon-expand\" *ngIf=\"item.menu\">\r\n\t\t\t\t\t<fa-icon [icon]=\"getExpandIcon(item)\"></fa-icon>\r\n\t\t\t\t</span>\r\n\t\t\t</a>\r\n\r\n\t\t\t<div class=\"form\" *ngIf=\"item.textbox || item.button\">\r\n\t\t\t\t<mb-textbox\r\n\t\t\t\t\t*ngIf=\"item.textbox\"\r\n\t\t\t\t\t[textbox]=\"item.textbox\"\r\n\t\t\t\t\tclass=\"padding\"\r\n\t\t\t\t></mb-textbox>\r\n\t\t\t\t<mb-button\r\n\t\t\t\t\t*ngIf=\"item.button\"\r\n\t\t\t\t\t[button]=\"item.button\"\r\n\t\t\t\t\tclass=\"padding\"\r\n\t\t\t\t></mb-button>\r\n\t\t\t</div>\r\n\r\n\t\t\t<mb-menu\r\n\t\t\t\t*ngIf=\"item.menu && item.active\"\r\n\t\t\t\t[menu]=\"item.menu\"\r\n\t\t\t></mb-menu>\r\n\t\t</li>\r\n\t</ul>\r\n</nav>\r\n"
        },
        {
            "name": "NotificationsComponent",
            "id": "component-NotificationsComponent-28ef018f5abc03e451f710d1536f094931913cf0f9c86d99551ef8e681b7f66c55ce232769a1061e3de98f995b20053f59e3569421c840298b89a1ad1ed17b08",
            "file": "src/app/controls/notifications/notifications.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "mb-notifications",
            "styleUrls": [
                "./notifications.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "notifications.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "notifications",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Notification[]",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "removeNotification",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ViewEncapsulation, ViewChild, ElementRef } from '@angular/core';\r\nimport { Notification } from './notification';\r\nimport { NotificationsService } from './notifications.service';\r\n\r\n@Component({\r\n\tselector: 'mb-notifications',\r\n\ttemplateUrl: 'notifications.component.html',\r\n\tstyleUrls: ['./notifications.component.scss'],\r\n\tencapsulation: ViewEncapsulation.None\r\n})\r\n\r\nexport class NotificationsComponent implements OnInit {\r\n\r\n\tnotifications: Notification[] = [];\r\n\r\n\tconstructor(private notificationService: NotificationsService) { }\r\n\r\n\tngOnInit() {\r\n\t\t// let tempId = 0;\r\n\t\t// let test1 = new Notification({\r\n\t\t// \talertType: AlertType.success,\r\n\t\t// \tmessage: \"Added {{card.name}} to collection\",\r\n\t\t// \tduration: 2000,\r\n\t\t// \tid: tempId++\r\n\t\t// });\r\n\t\t// test1.destroy = () => {\r\n\t\t// \tthis.removeNotification(test1.id);\r\n\t\t// }\r\n\t\t// let test2 = new Notification({\r\n\t\t// \talertType: AlertType.error,\r\n\t\t// \tmessage: \"Error example\",\r\n\t\t// \tid: tempId++\r\n\t\t// });\r\n\t\t// test2.destroy = () => {\r\n\t\t// \tthis.removeNotification(test2.id);\r\n\t\t// }\r\n\t\t// this.notifications.push(test1, test2);\r\n\r\n\t\tthis.notificationService.notificationsObservable().subscribe(notifications => {\r\n\t\t\tthis.notifications = notifications;\r\n\t\t});\r\n\t}\r\n\r\n\tremoveNotification(id: number) {\r\n\t\tthis.notifications = this.notifications.filter(notification => {\r\n\t\t\treturn notification.id != id;\r\n\t\t});\r\n\t}\r\n\r\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"settings\";\r\n\r\n.notifications-wrapper {\r\n\tpadding: $spacing;\r\n\tposition: fixed;\r\n\ttop: $header-height + 57px;\r\n\tleft: 0;\r\n\tright: 0;\r\n\tz-index: 9999;\r\n\tpointer-events: none;\r\n}\r\n.notifications {\r\n\tposition: relative;\r\n\tright: 0;\r\n\ttop: 0;\r\n\tposition: absolute;\r\n\tz-index: 999;\r\n\tmax-width: 100%;\r\n}\r\n.notification {\r\n\tpointer-events: all;\r\n\tbackground: rgba(black, .8);\r\n\tborder-radius: $border-radius-small;\r\n\tcolor: white;\r\n\tpadding: $spacing + 1px ($spacing * 2);\r\n\tpadding-right: 40px;\r\n\tbox-shadow: $shadow;\r\n\ttransition: $transition, ease .2s height, ease .2s padding, ease .2s margin;\r\n\tmargin-bottom: $spacing;\r\n\tposition: relative;\r\n\t//height: 40px;\r\n\tmax-width: 100%;\r\n\twidth: 400px;\r\n\topacity: 1;\r\n\t.notification-message {\r\n\t\ttext-overflow: ellipsis;\r\n\t\toverflow: hidden;\r\n\t\tdisplay: block;\r\n\t\tmax-width: 100%;\r\n\t}\r\n\t.close {\r\n\t\tcursor: pointer;\r\n\t\tposition: absolute;\r\n\t\ttop: 0;\r\n\t\tright: 0;\r\n\t\tbottom: 0;\r\n\t\tbackground: rgba(black, .2);\r\n\t\tborder-top-right-radius: $border-radius-small;\r\n\t\tborder-bottom-right-radius: $border-radius-small;\r\n\t\tpadding: $spacing;\r\n\t\ttransition: $transition;\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t\tjustify-content: center;\r\n\t\tfa-icon {\r\n\t\t\tmargin: 0;\r\n\t\t\twidth: 16px;\r\n\t\t\theight: 16px;\r\n\t\t}\r\n\t\t&:hover {\r\n\t\t\tbackground: rgba(black, .4);\r\n\t\t\tbox-shadow: $shadow;\r\n\t\t}\r\n\t}\r\n\t&.hidden {\r\n\t\theight: 0;\r\n\t\tpadding-top: 0;\r\n\t\tpadding-bottom: 0;\r\n\t\topacity: 0;\r\n\t\toverflow: hidden;\r\n\t\tmargin: 0;\r\n\t\tpointer-events: none;\r\n\t\t&:hover, &:active {\r\n\t\t\tbox-shadow: none;\r\n\t\t}\r\n\t}\r\n\tfa-icon {\r\n\t\twidth: 24px;\r\n\t\theight: 24px;\r\n\t\tmargin-right: $spacing;\r\n\t}\r\n\t&:hover, &:active {\r\n\t\tbox-shadow: $shadow, $shadow-focus;\r\n\t}\r\n}",
                    "styleUrl": "./notifications.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "notificationService",
                        "type": "NotificationsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "notificationService",
                        "type": "NotificationsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div *ngIf=\"notifications.length\" class=\"notifications-wrapper\">\r\n\t<div class=\"max relative\">\r\n\t\t<div class=\"notifications\">\r\n\t\t\t<div\r\n\t\t\t\t*ngFor=\"let notification of notifications\"\r\n\t\t\t\t(click)=\"notification.click()\"\r\n\t\t\t\tclass=\"notification animated fadeInUp\r\n\t\t\t\t\t{{ notification.alertType }}\r\n\t\t\t\t\t{{ notification.hidden ? 'hidden' : '' }}\"\r\n\t\t\t>\r\n\t\t\t\t<div class=\"flex padded flex-center flex-nowrap\">\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<fa-icon [icon]=\"notification.icon\"></fa-icon>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div class=\"box word-break\">\r\n\t\t\t\t\t\t<div\r\n\t\t\t\t\t\t\tclass=\"notification-message\"\r\n\t\t\t\t\t\t\ttitle=\"{{ notification.message }}\"\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<span>{{ notification.message }}</span>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div\r\n\t\t\t\t\t*ngIf=\"!notification.duration\"\r\n\t\t\t\t\tclass=\"close\"\r\n\t\t\t\t\t(click)=\"notification.hide()\"\r\n\t\t\t\t>\r\n\t\t\t\t\t<fa-icon icon=\"times\"></fa-icon>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n</div>\r\n"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-432c9ae0bcf6e2e1f46701f7565a67376cb10145b7d049c5fe930cf8f075c6e02e24151589750b18cbaa8266f7c61393b95c4d833fbfd71ee228904aa014349f",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65,
                    "type": "User | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 74,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 71,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { User } from './User';\n\n@Component({\n  selector: 'storybook-page',\n  template: `<article>\n    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>`,\n  styleUrls: ['./page.css'],\n})\nexport default class PageComponent {\n  @Input()\n  user: User | null = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n\n// export const Page = ({ user, onLogin, onLogout, onCreateAccount }) => (\n//   <article>\n//     <Header user={user} onLogin={onLogin} onLogout={onLogout} onCreateAccount={onCreateAccount} />\n\n// );\n// Page.propTypes = {\n//   user: PropTypes.shape({}),\n//   onLogin: PropTypes.func.isRequired,\n//   onLogout: PropTypes.func.isRequired,\n//   onCreateAccount: PropTypes.func.isRequired,\n// };\n\n// Page.defaultProps = {\n//   user: null,\n// };\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "section {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 48px 20px;\n  margin: 0 auto;\n  max-width: 600px;\n  color: #333;\n}\n\nsection h2 {\n  font-weight: 900;\n  font-size: 32px;\n  line-height: 1;\n  margin: 0 0 4px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nsection p {\n  margin: 1em 0;\n}\n\nsection a {\n  text-decoration: none;\n  color: #1ea7fd;\n}\n\nsection ul {\n  padding-left: 30px;\n  margin: 1em 0;\n}\n\nsection li {\n  margin-bottom: 8px;\n}\n\nsection .tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #e7fdd8;\n  color: #66bf3c;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\nsection .tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\nsection .tip-wrapper svg {\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  margin-right: 4px;\n  vertical-align: top;\n  margin-top: 3px;\n}\n\nsection .tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "PokemonComponent",
            "id": "component-PokemonComponent-1fbe455efd3a55da080268867e3424df5e8bf26409c2acc89b650f86a1acffcb2c0016bd07d71416daf006ad31fee3cb4cc6a0de3cf196517d727532042462dd",
            "file": "src/app/pages/pokemons/pokemon/pokemon.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "mb-pokemon",
            "styleUrls": [
                "./pokemon.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "pokemon.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "pokemonVariant",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "PokemonVariant",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "buttonDex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Button",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "items",
                    "defaultValue": "new Items()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Items",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "progressBar",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ProgressBar",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "selectVariants",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Select",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "slug",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 30
                }
            ],
            "methodsClass": [
                {
                    "name": "getCards",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 152,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setupControls",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 135,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n\tSelect,\r\n\tSelectOptionGroup,\r\n\tSelectOption,\r\n} from './../../../controls/select/select';\r\nimport { Component, Input, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { Button, DialogService, LoaderService } from '@app/controls';\r\nimport { ItemGroup, Items } from '@app/layout/main';\r\nimport { Card, Cards } from '@app/pages/cards';\r\nimport { SetSortByPokemon, PokemonVariant } from './pokemon';\r\nimport {\r\n\tGetPokemonVariantCards,\r\n\tPokemonService,\r\n} from '../../../services/pokemon.service';\r\nimport { Title } from '@angular/platform-browser';\r\nimport { AppSettings } from '@app/app';\r\nimport { Icons, Size, Symbols } from '@app/models';\r\nimport { Dialog } from '@app/controls/dialog/dialog';\r\nimport { ProgressBar } from '@app/controls/progress-bar/progress-bar';\r\n\r\n@Component({\r\n\tselector: 'mb-pokemon',\r\n\ttemplateUrl: 'pokemon.component.html',\r\n\tstyleUrls: ['./pokemon.component.scss'],\r\n})\r\nexport class PokemonComponent implements OnInit {\r\n\t@Input() pokemonVariant: PokemonVariant;\r\n\titems: Items = new Items();\r\n\tslug: string;\r\n\tbuttonDex: Button;\r\n\tprogressBar: ProgressBar;\r\n\tselectVariants: Select;\r\n\r\n\tconstructor(\r\n\t\tprivate titleService: Title,\r\n\t\tprivate pokemonService: PokemonService,\r\n\t\tprivate loaderService: LoaderService,\r\n\t\tprivate route: ActivatedRoute,\r\n\t\tprivate router: Router,\r\n\t\tprivate dialogService: DialogService\r\n\t) {}\r\n\r\n\tngOnInit() {\r\n\t\tthis.setupControls();\r\n\r\n\t\t// Response get pokemon\r\n\t\tthis.pokemonService\r\n\t\t\t.getPokemonVariantObservable()\r\n\t\t\t.subscribe((pokemonVariant) => {\r\n\t\t\t\tif (pokemonVariant) {\r\n\t\t\t\t\tthis.titleService.setTitle(\r\n\t\t\t\t\t\tAppSettings.titlePrefix + pokemonVariant.pokemon.name\r\n\t\t\t\t\t);\r\n\t\t\t\t\tthis.loaderService.clearItemLoading('getPokemon');\r\n\t\t\t\t\tthis.pokemonVariant = pokemonVariant;\r\n\t\t\t\t\tthis.items.noResults =\r\n\t\t\t\t\t\t'No ' + this.pokemonVariant.name + ' cards found';\r\n\t\t\t\t\tthis.progressBar = new ProgressBar({\r\n\t\t\t\t\t\tvalue: pokemonVariant.progress,\r\n\t\t\t\t\t\ttotal: pokemonVariant.total_cards,\r\n\t\t\t\t\t});\r\n\t\t\t\t\tthis.getCards();\r\n\r\n\t\t\t\t\t// Dex button\r\n\t\t\t\t\tthis.buttonDex = new Button({\r\n\t\t\t\t\t\tsymbol: Symbols.pokeball,\r\n\t\t\t\t\t\ttext: 'Pokédex Entry',\r\n\t\t\t\t\t\tsize: Size.small,\r\n\t\t\t\t\t\tclick: () => {\r\n\t\t\t\t\t\t\tthis.dialogService.setDialog(\r\n\t\t\t\t\t\t\t\tnew Dialog({\r\n\t\t\t\t\t\t\t\t\ttitle: 'Pokédex Entry',\r\n\t\t\t\t\t\t\t\t\tcontent:\r\n\t\t\t\t\t\t\t\t\t\tthis.pokemonVariant.pokemon\r\n\t\t\t\t\t\t\t\t\t\t\t.flavor_texts,\r\n\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\t// Variants\r\n\t\t\t\t\tthis.selectVariants.optionGroups = [\r\n\t\t\t\t\t\tnew SelectOptionGroup({\r\n\t\t\t\t\t\t\tlabel: 'Variants',\r\n\t\t\t\t\t\t\toptions: [\r\n\t\t\t\t\t\t\t\tnew SelectOption({\r\n\t\t\t\t\t\t\t\t\ttext: this.pokemonVariant.name,\r\n\t\t\t\t\t\t\t\t\tvalue: this.pokemonVariant.route,\r\n\t\t\t\t\t\t\t\t}),\r\n\t\t\t\t\t\t\t\t...this.pokemonVariant.other_variants.map(\r\n\t\t\t\t\t\t\t\t\t(variant) =>\r\n\t\t\t\t\t\t\t\t\t\tnew SelectOption({\r\n\t\t\t\t\t\t\t\t\t\t\ttext: variant.name,\r\n\t\t\t\t\t\t\t\t\t\t\tvalue: variant.route,\r\n\t\t\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t\t),\r\n\t\t\t\t\t\t\t],\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t];\r\n\t\t\t\t\tthis.selectVariants.value = this.pokemonVariant.route;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t// Response get pokemon cards\r\n\t\tthis.pokemonService\r\n\t\t\t.getPokemonVariantCardsObservable()\r\n\t\t\t.subscribe((res) => {\r\n\t\t\t\tif (res) {\r\n\t\t\t\t\tthis.loaderService.clearItemLoading('getPokemonCards');\r\n\t\t\t\t\tthis.items.footer.totalPages = res.total_pages;\r\n\t\t\t\t\tthis.items.footer.totalItems = res.total_results;\r\n\t\t\t\t\tthis.items.filter.textboxSearch.placeholder = `Search ${this.pokemonVariant.name} cards...`;\r\n\t\t\t\t\tif (res.cards.length) {\r\n\t\t\t\t\t\tthis.items.itemGroups = [\r\n\t\t\t\t\t\t\tnew ItemGroup({\r\n\t\t\t\t\t\t\t\titems: res.cards,\r\n\t\t\t\t\t\t\t}),\r\n\t\t\t\t\t\t];\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis.items.itemGroups = [];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t// Request get pokemon\r\n\t\tthis.route.params.subscribe((params) => {\r\n\t\t\tthis.slug = params['slug'];\r\n\r\n\t\t\tthis.loaderService.addItemLoading('getPokemon');\r\n\t\t\tthis.pokemonService.getPokemonVariant(this.slug);\r\n\t\t});\r\n\t}\r\n\r\n\tsetupControls() {\r\n\t\tSetSortByPokemon(this.items.filter.selectSortBy);\r\n\t\tthis.items.showHeader = false;\r\n\t\tthis.items.footer.pageSize = 24;\r\n\t\tthis.items.footer.selectPageSize.value =\r\n\t\t\tthis.items.footer.pageSize.toString();\r\n\t\tthis.items.noResultsImage = Symbols.cards;\r\n\r\n\t\t// Variants\r\n\t\tthis.selectVariants = new Select({\r\n\t\t\tclasses: 'small',\r\n\t\t\tchange: (value) => {\r\n\t\t\t\tthis.router.navigate([value]);\r\n\t\t\t},\r\n\t\t});\r\n\t}\r\n\r\n\tgetCards() {\r\n\t\tthis.loaderService.addItemLoading('getPokemonCards');\r\n\t\tthis.pokemonService.getPokemonVariantCards(\r\n\t\t\tnew GetPokemonVariantCards({\r\n\t\t\t\tpage: this.items.footer.page,\r\n\t\t\t\tslug: this.slug,\r\n\t\t\t\tpage_size: this.items.footer.pageSize,\r\n\t\t\t\tsort_by: this.items.filter.selectSortBy.value,\r\n\t\t\t\tsort_direction: this.items.filter.selectSortDirection.value,\r\n\t\t\t\tquery: this.items.filter.textboxSearch.value,\r\n\t\t\t})\r\n\t\t);\r\n\t}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"settings\", \"custom\";\r\n\r\n:host {\r\n\tdisplay: block;\r\n}\r\n\r\n.hero {\r\n\tposition: relative;\r\n\toverflow: hidden;\r\n\tdisplay: flex;\r\n\tflex-direction: column;\r\n\theight: 548px;\r\n\tjustify-content: flex-start;\r\n\t&:after {\r\n\t\tcontent: \"\";\r\n\t\tbox-shadow: $shadow-inset-large;\r\n\t\ttop: 0;\r\n\t\tleft: 0;\r\n\t\tright: 0;\r\n\t\tbottom: 0;\r\n\t\tposition: absolute;\r\n\t\tz-index: 2;\r\n\t\tpointer-events: none;\r\n\t}\r\n\t@each $type, $color in $poke-types {\r\n\t\t&.#{$type} {\r\n\t\t\tbackground: linear-gradient(\r\n\t\t\t\tto right,\r\n\t\t\t\tdarken($color, 20%),\r\n\t\t\t\tdarken(mix($color, black, 80%), 20%)\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\t.pokemon-types {\r\n\t\tpadding: $spacing;\r\n\t\tpadding-bottom: $spacing * 4;\r\n\t\tdisplay: flex;\r\n\t\tjustify-content: center;\r\n\t\tz-index: 2;\r\n\t\tposition: relative;\r\n\t}\r\n\t.pokemon-image-placeholder {\r\n\t\twidth: 400px;\r\n\t\theight: 400px;\r\n\t\tpadding: $spacing * 8;\r\n\t\tdisplay: flex;\r\n\t\tjustify-content: center;\r\n\t\tz-index: 2;\r\n\t\tposition: relative;\r\n\t\tmargin: auto;\r\n\t\tfa-icon {\r\n\t\t\twidth: 100%;\r\n\t\t}\r\n\t}\r\n\t.art {\r\n\t\tmargin: 0 auto;\r\n\t\tfilter: drop-shadow($shadow);\r\n\t\tposition: relative;\r\n\t\tz-index: 2;\r\n\t\tpadding: $spacing * 4;\r\n\t\twidth: 400px;\r\n\t\t&.noEvolutionChain {\r\n\t\t\tmargin-top: -$spacing * 2;\r\n\t\t}\r\n\t}\r\n\t.bg-type {\r\n\t\tposition: absolute;\r\n\t\tleft: 50%;\r\n\t\ttop: 50%;\r\n\t\ttransform: translate(-50%, -50%);\r\n\t\twidth: 500px;\r\n\t\topacity: 0.1;\r\n\t\tz-index: 1;\r\n\t}\r\n\t.prev-pokemon,\r\n\t.next-pokemon {\r\n\t\tposition: absolute;\r\n\t\ttop: 50%;\r\n\t\ttransform: translateY(-50%);\r\n\t\tbackground: $menu-bg;\r\n\t\tpadding: $spacing * 3;\r\n\t\tcolor: white;\r\n\t\tbox-shadow: $shadow;\r\n\t\tz-index: 3;\r\n\t\t&:hover {\r\n\t\t\tbox-shadow: $shadow, $shadow-focus;\r\n\t\t}\r\n\t}\r\n\t.prev-pokemon {\r\n\t\tleft: 0;\r\n\t\tborder-top-right-radius: $border-radius;\r\n\t\tborder-bottom-right-radius: $border-radius;\r\n\t}\r\n\t.next-pokemon {\r\n\t\tright: 0;\r\n\t\tborder-top-left-radius: $border-radius;\r\n\t\tborder-bottom-left-radius: $border-radius;\r\n\t}\r\n}\r\n\r\n.pokemon-info {\r\n\tpadding: $spacing * 2;\r\n\tborder-bottom: $border;\r\n\th1 {\r\n\t\tline-height: 1;\r\n\t}\r\n}\r\n\r\n.dex-number {\r\n\tfont-size: 60%;\r\n\topacity: 0.75;\r\n\ttext-transform: capitalize;\r\n}\r\n\r\n.pokemon-dex {\r\n\t@media (max-width: $screen-medium) {\r\n\t\twidth: 100%;\r\n\t}\r\n}\r\n\r\n.pokemon-sprites {\r\n\tposition: absolute;\r\n\tleft: 80px;\r\n\ttop: 50%;\r\n\ttransform: translateY(-50%);\r\n\tfilter: drop-shadow($shadow);\r\n}\r\n\r\n.pokemon-region {\r\n\ttext-transform: capitalize;\r\n}\r\n\r\n.pokemon-generation {\r\n\ttext-transform: capitalize;\r\n}\r\n\r\n.pokemon-evolution-chain {\r\n\tborder-radius: $border-radius-small;\r\n\tborder-bottom-left-radius: 0;\r\n\tborder-bottom-right-radius: 0;\r\n\t//background: rgba($menu-bg, .5);\r\n\tz-index: 2;\r\n\tpadding: $spacing;\r\n\tposition: relative;\r\n\tdisplay: flex;\r\n\tmargin: auto;\r\n\tcolor: white;\r\n\t.pokemon-evolution-wrapper {\r\n\t\t&:not(:last-child) {\r\n\t\t\tfa-icon {\r\n\t\t\t\tposition: absolute;\r\n\t\t\t\ttop: 50%;\r\n\t\t\t\ttransform: translateY(-50%);\r\n\t\t\t\tright: -16px;\r\n\t\t\t}\r\n\t\t}\r\n\t\t&:last-child {\r\n\t\t\tfa-icon {\r\n\t\t\t\tdisplay: none;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t.pokemon-evolution {\r\n\t\tposition: relative;\r\n\t\tpadding: $spacing;\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t\talign-items: center;\r\n\t\tcolor: white;\r\n\t}\r\n}\r\n\r\nprogress-bar {\r\n\tposition: absolute;\r\n\tbottom: 140px;\r\n\tleft: 50%;\r\n\ttransform: translateX(-50%);\r\n\twidth: 200px;\r\n\t&.noEvolutionChain {\r\n\t}\r\n}\r\n\r\nmb-select {\r\n\tposition: absolute;\r\n\tbottom: 157px;\r\n\tleft: 50%;\r\n\ttransform: translateX(-50%);\r\n\twidth: 200px;\r\n\tz-index: 2;\r\n}\r\n",
                    "styleUrl": "./pokemon.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "titleService",
                        "type": "Title",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "pokemonService",
                        "type": "PokemonService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "loaderService",
                        "type": "LoaderService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialogService",
                        "type": "DialogService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 33,
                "jsdoctags": [
                    {
                        "name": "titleService",
                        "type": "Title",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "pokemonService",
                        "type": "PokemonService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "loaderService",
                        "type": "LoaderService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogService",
                        "type": "DialogService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div *ngIf=\"pokemonVariant\" class=\"pokemon-details\">\r\n\t<div class=\"flex justify-center hero {{ pokemonVariant.types[0] }}\">\r\n\t\t<!-- Prev -->\r\n\t\t<a\r\n\t\t\tclass=\"prev-pokemon\"\r\n\t\t\t[routerLink]=\"'/pokemon/' + pokemonVariant.previous_pokemon\"\r\n\t\t>\r\n\t\t\t<fa-icon icon=\"arrow-left\"></fa-icon>\r\n\t\t</a>\r\n\r\n\t\t<!-- Next -->\r\n\t\t<a\r\n\t\t\tclass=\"next-pokemon\"\r\n\t\t\t[routerLink]=\"'/pokemon/' + pokemonVariant.next_pokemon\"\r\n\t\t>\r\n\t\t\t<fa-icon icon=\"arrow-right\"></fa-icon>\r\n\t\t</a>\r\n\r\n\t\t<!-- Sprite -->\r\n\t\t<img\r\n\t\t\t*ngIf=\"pokemonVariant.sprites.official\"\r\n\t\t\tclass=\"art\"\r\n\t\t\tsrc=\"{{ pokemonVariant.sprites.official }}\"\r\n\t\t/>\r\n\r\n\t\t<!-- No sprite -->\r\n\t\t<div\r\n\t\t\tclass=\"pokemon-image-placeholder\"\r\n\t\t\t*ngIf=\"!pokemonVariant.sprites.official\"\r\n\t\t>\r\n\t\t\t<fa-icon icon=\"question\"></fa-icon>\r\n\t\t</div>\r\n\r\n\t\t<!-- Pokeball -->\r\n\t\t<img\r\n\t\t\tclass=\"bg-type\"\r\n\t\t\tsrc=\"https://duiker101.github.io/pokemon-type-svg-icons/icons/{{\r\n\t\t\t\tpokemonVariant.types[0].toLowerCase()\r\n\t\t\t}}.svg\"\r\n\t\t/>\r\n\r\n\t\t<progress-bar [progressBar]=\"progressBar\"> </progress-bar>\r\n\r\n\t\t<mb-select [select]=\"selectVariants\"></mb-select>\r\n\r\n\t\t<!-- Evolutions -->\r\n\t\t<div\r\n\t\t\t*ngIf=\"pokemonVariant.pokemon.evolution_chain.length > 1\"\r\n\t\t\tclass=\"pokemon-evolution-chain\"\r\n\t\t>\r\n\t\t\t<div class=\"flex padded-2\">\r\n\t\t\t\t<div\r\n\t\t\t\t\tclass=\"pokemon-evolution-wrapper\"\r\n\t\t\t\t\t*ngFor=\"\r\n\t\t\t\t\t\tlet evolution of pokemonVariant.pokemon.evolution_chain\r\n\t\t\t\t\t\"\r\n\t\t\t\t>\r\n\t\t\t\t\t<a\r\n\t\t\t\t\t\tclass=\"pokemon-evolution round-small\"\r\n\t\t\t\t\t\t[routerLink]=\"'/pokemon/' + evolution.slug\"\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<img [src]=\"evolution.sprite\" />\r\n\t\t\t\t\t\t<div class=\"evolution-name\">{{ evolution.name }}</div>\r\n\t\t\t\t\t\t<fa-icon icon=\"arrow-right\"></fa-icon>\r\n\t\t\t\t\t</a>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n\t<div class=\"pokemon-info\">\r\n\t\t<div class=\"max\">\r\n\t\t\t<div\r\n\t\t\t\tclass=\"flex padded flex-center medium-flex-start medium-vertical\"\r\n\t\t\t>\r\n\t\t\t\t<div class=\"box flex flex-center padded\">\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<h1>\r\n\t\t\t\t\t\t\t{{ pokemonVariant.name }}\r\n\t\t\t\t\t\t\t<span class=\"dex-number\">\r\n\t\t\t\t\t\t\t\t#{{\r\n\t\t\t\t\t\t\t\t\tpokemonVariant.pokemon.national_dex_number\r\n\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t-\r\n\t\t\t\t\t\t\t\t<span class=\"pokemon-region\">\r\n\t\t\t\t\t\t\t\t\t{{\r\n\t\t\t\t\t\t\t\t\t\tpokemonVariant.pokemon.generation.region\r\n\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t</h1>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class=\"flex padded flex-center\">\r\n\t\t\t\t\t<div class=\"pokemon-types\">\r\n\t\t\t\t\t\t<div class=\"flex padded\">\r\n\t\t\t\t\t\t\t<div *ngFor=\"let type of pokemonVariant.types\">\r\n\t\t\t\t\t\t\t\t<mb-type-tag [type]=\"type\"></mb-type-tag>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div class=\"pokemon-height\">\r\n\t\t\t\t\t\t<mb-tag\r\n\t\t\t\t\t\t\t[tag]=\"{ text: pokemonVariant.height / 10 + ' m' }\"\r\n\t\t\t\t\t\t></mb-tag>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div class=\"pokemon-weight\">\r\n\t\t\t\t\t\t<mb-tag\r\n\t\t\t\t\t\t\t[tag]=\"{ text: pokemonVariant.weight / 10 + ' kg' }\"\r\n\t\t\t\t\t\t></mb-tag>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div class=\"pokemon-dex\" *ngIf=\"buttonDex\">\r\n\t\t\t\t\t\t<mb-button [button]=\"buttonDex\"></mb-button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n\t<div>\r\n\t\t<div class=\"pokemon-cards\">\r\n\t\t\t<mb-items [items]=\"items\" (outputGetItems)=\"getCards()\"> </mb-items>\r\n\t\t</div>\r\n\t</div>\r\n</div>\r\n\r\n<div>\r\n\t<ng-template #dialogDex>\r\n\t\t<p>\r\n\t\t\tLorem ipsum dolor sit amet consectetur, adipisicing elit. Neque\r\n\t\t\tblanditiis asperiores aperiam quasi! Aperiam ipsum fugiat corporis\r\n\t\t\taccusantium cupiditate, modi sequi deleniti optio? Assumenda culpa\r\n\t\t\tincidunt pariatur! Nam, laboriosam tempora?\r\n\t\t</p>\r\n\t</ng-template>\r\n</div>\r\n"
        },
        {
            "name": "PokemonItemGridComponent",
            "id": "component-PokemonItemGridComponent-09772baf0795d9dea1b8fce09523f34a18a7cfa48acefaea7d933a4c15acf58b0808679b434ac7821b1cb0e5472fb10da763a2332a8ffef870a5ef350d2704fa",
            "file": "src/app/pages/pokemons/pokemon-item/pokemon-item-grid/pokemon-item-grid.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "mb-pokemon-item-grid",
            "styleUrls": [
                "./pokemon-item-grid.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "pokemon-item-grid.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "pokemonVariant",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "PokemonVariant",
                    "decorators": []
                },
                {
                    "name": "size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "progressBar",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ProgressBar",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "getSprite",
                    "args": [
                        {
                            "name": "pokemon_variant",
                            "type": "PokemonVariant",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "pokemon_variant",
                            "type": "PokemonVariant",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input } from '@angular/core';\r\nimport { ProgressBar } from '@app/controls/progress-bar/progress-bar';\r\nimport { Pokemon, PokemonVariant } from '../../pokemon/pokemon';\r\n\r\n@Component({\r\n\tselector: 'mb-pokemon-item-grid',\r\n\ttemplateUrl: 'pokemon-item-grid.component.html',\r\n\tstyleUrls: ['./pokemon-item-grid.component.scss'],\r\n})\r\nexport class PokemonItemGridComponent implements OnInit {\r\n\t@Input() pokemonVariant: PokemonVariant;\r\n\t@Input() size: string;\r\n\r\n\tprogressBar: ProgressBar;\r\n\r\n\tconstructor() {}\r\n\r\n\tngOnInit() {\r\n\t\tthis.progressBar = new ProgressBar({\r\n\t\t\tvalue: this.pokemonVariant.progress,\r\n\t\t\ttotal: this.pokemonVariant.total_cards,\r\n\t\t});\r\n\t}\r\n\r\n\tgetSprite(pokemon_variant: PokemonVariant): string {\r\n\t\tif (pokemon_variant.sprites.official)\r\n\t\t\treturn pokemon_variant.sprites.official;\r\n\t\telse return pokemon_variant.sprites.default;\r\n\t}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"settings\", \"custom\";\r\n\r\n:host {\r\n\twidth: 100%;\r\n}\r\n\r\n.item-grid-pokemon {\r\n\tborder-radius: $border-radius-small;\r\n\tdisplay: flex;\r\n\tflex-direction: column;\r\n\talign-items: center;\r\n\ttransition: $transition;\r\n\tposition: relative;\r\n\toverflow: hidden;\r\n\t&:after {\r\n\t\tcontent: \"\";\r\n\t\tborder-radius: $border-radius-small;\r\n\t\twidth: 100%;\r\n\t\theight: 100%;\r\n\t\tbox-shadow: $shadow-sheen;\r\n\t\tz-index: 10;\r\n\t\tposition: absolute;\r\n\t\tborder: $border;\r\n\t}\r\n\t&.small {\r\n\t\tmin-width: 140px;\r\n\t\t.pokemon-image-wrapper {\r\n\t\t\t.pokemon-image {\r\n\t\t\t\tmargin-top: 0;\r\n\t\t\t\tmargin-bottom: 0;\r\n\t\t\t\theight: 80px;\r\n\t\t\t\twidth: 80px;\r\n\t\t\t\tpadding: $spacing;\r\n\t\t\t}\r\n\t\t\t.pokemon-image-placeholder {\r\n\t\t\t\tpadding: 0 !important;\r\n\t\t\t\theight: 32px !important;\r\n\t\t\t\twidth: 32px !important;\r\n\t\t\t\tmargin-top: $spacing * 3;\r\n\t\t\t\tmargin-bottom: $spacing * 3;\r\n\t\t\t}\r\n\t\t}\r\n\t\t.pokemon-types {\r\n\t\t\tdisplay: none !important;\r\n\t\t}\r\n\t}\r\n\t&:hover {\r\n\t\tborder-color: $primary-color;\r\n\t\tbox-shadow: $shadow-focus;\r\n\t\t&:after {\r\n\t\t\tborder-color: $primary-color;\r\n\t\t}\r\n\t}\r\n\t.pokemon-image-wrapper {\r\n\t\tdisplay: block;\r\n\t\tz-index: 2;\r\n\t\twidth: 100%;\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t\tjustify-content: center;\r\n\t\toverflow: hidden;\r\n\t\tposition: relative;\r\n\t\t.pokemon-image,\r\n\t\t.pokemon-image-placeholder {\r\n\t\t\tfilter: drop-shadow($shadow);\r\n\t\t\tmargin: auto;\r\n\t\t\tz-index: 2;\r\n\t\t\tposition: relative;\r\n\t\t\tmargin-top: $spacing * 2;\r\n\t\t\tmargin-bottom: $spacing * 2;\r\n\t\t\theight: 96px;\r\n\t\t\twidth: 96px;\r\n\t\t}\r\n\t\t.pokemon-image-placeholder {\r\n\t\t\tcolor: white;\r\n\t\t\tpadding: $spacing * 2;\r\n\t\t\tfa-icon {\r\n\t\t\t\theight: 100%;\r\n\t\t\t}\r\n\t\t}\r\n\t\t@each $type, $color in $poke-types {\r\n\t\t\t&.#{$type} {\r\n\t\t\t\tbackground: linear-gradient(\r\n\t\t\t\t\tto right,\r\n\t\t\t\t\t$color,\r\n\t\t\t\t\tlighten($color, 10%)\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t}\r\n\t\t.pokemon-number {\r\n\t\t\tpadding: $spacing;\r\n\t\t\tcolor: white;\r\n\t\t\tfont-weight: bold;\r\n\t\t\tfont-size: 14px;\r\n\t\t\ttext-shadow: $text-shadow;\r\n\t\t\tposition: absolute;\r\n\t\t\ttop: 0;\r\n\t\t\tleft: 0;\r\n\t\t}\r\n\r\n\t\t.bg-type {\r\n\t\t\tposition: absolute;\r\n\t\t\tleft: 50%;\r\n\t\t\ttop: 50%;\r\n\t\t\ttransform: translate(-50%, -50%);\r\n\t\t\twidth: 180px;\r\n\t\t\topacity: 0.15;\r\n\t\t\tz-index: 1;\r\n\t\t}\r\n\t\t.pokemon-types {\r\n\t\t\tdisplay: flex;\r\n\t\t\tflex-wrap: nowrap;\r\n\t\t\tpadding: $spacing;\r\n\t\t\tz-index: 2;\r\n\t\t}\r\n\t}\r\n\t.pokemon-info {\r\n\t\tpadding: $spacing;\r\n\t\tbackground: $main-bg;\r\n\t\twidth: 100%;\r\n\t\tcolor: white;\r\n\t}\r\n}\r\n",
                    "styleUrl": "./pokemon-item-grid.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 14
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<a\r\n\t*ngIf=\"pokemonVariant\"\r\n\tclass=\"item-grid-pokemon {{ size }}\"\r\n\t[routerLink]=\"pokemonVariant.route ? pokemonVariant.route : []\"\r\n>\r\n\t<figure class=\"pokemon-image-wrapper {{ pokemonVariant.types[0] }}\">\r\n\t\t<div class=\"pokemon-number\">\r\n\t\t\t#{{ pokemonVariant.pokemon.national_dex_number }}\r\n\t\t</div>\r\n\r\n\t\t<img\r\n\t\t\tclass=\"pokemon-image\"\r\n\t\t\t*ngIf=\"getSprite(pokemonVariant)\"\r\n\t\t\tsrc=\"{{ getSprite(pokemonVariant) }}\"\r\n\t\t/>\r\n\r\n\t\t<div\r\n\t\t\tclass=\"pokemon-image-placeholder\"\r\n\t\t\t*ngIf=\"getSprite(pokemonVariant).length == 0\"\r\n\t\t>\r\n\t\t\t<fa-icon icon=\"question\"></fa-icon>\r\n\t\t</div>\r\n\r\n\t\t<img\r\n\t\t\tclass=\"bg-type\"\r\n\t\t\tsrc=\"https://duiker101.github.io/pokemon-type-svg-icons/icons/{{\r\n\t\t\t\tpokemonVariant.types[0].toLowerCase()\r\n\t\t\t}}.svg\"\r\n\t\t/>\r\n\r\n\t\t<div class=\"pokemon-types\" *ngIf=\"pokemonVariant.types\">\r\n\t\t\t<div class=\"flex padded-small\">\r\n\t\t\t\t<div *ngFor=\"let type of pokemonVariant.types\">\r\n\t\t\t\t\t<mb-type-tag [type]=\"type\"></mb-type-tag>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\r\n\t\t<progress-bar\r\n\t\t\tclass=\"z-3 relative padding padding-top-none\"\r\n\t\t\t[progressBar]=\"progressBar\"\r\n\t\t>\r\n\t\t</progress-bar>\r\n\t</figure>\r\n\r\n\t<figcaption class=\"pokemon-info\">\r\n\t\t<div class=\"pokemon-name\">\r\n\t\t\t{{ pokemonVariant.name }}\r\n\t\t</div>\r\n\t\t<div class=\"pokemon-region subheading\">\r\n\t\t\t{{ pokemonVariant.pokemon.generation.region }}\r\n\t\t</div>\r\n\t</figcaption>\r\n</a>\r\n"
        },
        {
            "name": "PokemonsComponent",
            "id": "component-PokemonsComponent-fe5c8924312e48837ce9f03159efe520681ff1d5268dd78911c0fa7f26e5707d847807e917c817ce022305dfb7e887602b16f69f7d1830e73e37f0a91295e283",
            "file": "src/app/pages/pokemons/pokemons.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "mb-pokemons",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "pokemons.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "items",
                    "defaultValue": "new Items()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Items",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "getPokemonVariants",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setupControls",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setupSubscriptions",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ActivatedRoute } from '@angular/router';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { Title } from '@angular/platform-browser';\r\nimport { AppSettings } from '@app/app';\r\nimport { LoaderService, SelectOption, SelectOptionGroup } from '@app/controls';\r\nimport { ItemGroup, Items } from '@app/layout/main';\r\nimport { SetSortByPokemon, PokemonVariant } from './pokemon/pokemon';\r\nimport {\r\n\tGetPokemonVariants,\r\n\tPokemonsService,\r\n} from '../../services/pokemons.service';\r\nimport { Symbols } from '@app/models';\r\n\r\n@Component({\r\n\tselector: 'mb-pokemons',\r\n\ttemplateUrl: 'pokemons.component.html',\r\n})\r\nexport class PokemonsComponent implements OnInit {\r\n\titems: Items = new Items();\r\n\ttype: string;\r\n\r\n\tconstructor(\r\n\t\tprivate route: ActivatedRoute,\r\n\t\tprivate loaderService: LoaderService,\r\n\t\tprivate titleService: Title,\r\n\t\tprivate pokemonService: PokemonsService\r\n\t) {}\r\n\r\n\tngOnInit() {\r\n\t\tthis.setupSubscriptions();\r\n\t\tthis.setupControls();\r\n\t}\r\n\r\n\tsetupSubscriptions() {\r\n\t\t// Get query params\r\n\t\tthis.route.params.subscribe((params) => {\r\n\t\t\tthis.type = params['type']?.replace('-', ' ');\r\n\t\t});\r\n\r\n\t\t// Get data\r\n\t\tthis.pokemonService.getPokemonVariantsObservable().subscribe((res) => {\r\n\t\t\tif (res) {\r\n\t\t\t\tthis.loaderService.clearItemLoading('getPokemon');\r\n\t\t\t\tthis.items.footer.totalPages = res.total_pages;\r\n\t\t\t\tthis.items.footer.totalItems = res.total_results;\r\n\t\t\t\tvar group = new ItemGroup();\r\n\t\t\t\tres.pokemon_variants.forEach((pokemon_variant) => {\r\n\t\t\t\t\tgroup.items.push(new PokemonVariant(pokemon_variant));\r\n\t\t\t\t});\r\n\t\t\t\tthis.items.itemGroups = [group];\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tsetupControls() {\r\n\t\tSetSortByPokemon(this.items.filter.selectSortBy);\r\n\t\tthis.items.noResultsImage = Symbols.pokeball;\r\n\t\tthis.items.noResults = 'No Pokémon found';\r\n\t\tthis.titleService.setTitle(AppSettings.titlePrefix + 'Pokemon');\r\n\t\tthis.items.showHeader = false;\r\n\t\tthis.items.itemClasses = 'width-3 medium-4 small-6';\r\n\t\tthis.items.filter.textboxSearch.placeholder = 'Search Pokémon...';\r\n\t\tthis.items.footer.pageSize = 24;\r\n\t\tthis.items.footer.selectPageSize.value =\r\n\t\t\tthis.items.footer.pageSize.toString();\r\n\t}\r\n\r\n\tgetPokemonVariants() {\r\n\t\tthis.loaderService.addItemLoading('getPokemon');\r\n\t\tthis.pokemonService.getPokemonVariants(\r\n\t\t\tnew GetPokemonVariants({\r\n\t\t\t\tpage: this.items.footer.page,\r\n\t\t\t\tpage_size: this.items.footer.pageSize,\r\n\t\t\t\tsort_by: this.items.filter.selectSortBy.value,\r\n\t\t\t\tsort_direction: this.items.filter.selectSortDirection.value,\r\n\t\t\t\tquery: this.items.filter.textboxSearch.value,\r\n\t\t\t\ttype: this.type,\r\n\t\t\t})\r\n\t\t);\r\n\t}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "loaderService",
                        "type": "LoaderService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "titleService",
                        "type": "Title",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "pokemonService",
                        "type": "PokemonsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "loaderService",
                        "type": "LoaderService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "titleService",
                        "type": "Title",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "pokemonService",
                        "type": "PokemonsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mb-items [items]=\"items\" (outputGetItems)=\"getPokemonVariants()\"> </mb-items>\r\n"
        },
        {
            "name": "PokmeonItemListComponent",
            "id": "component-PokmeonItemListComponent-e15fc9ea70ca3a2e8d275b88047444e0318df7a223c5af2e2f9dba1d3a1e402f8c0ad00e53988dc910256c1a865272e08cbd0b56d6baffe50cf0e8d456975dc3",
            "file": "src/app/pages/pokemons/pokemon-item/pokemon-item-list/pokemon-item-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "mb-pokemon-item-list",
            "styleUrls": [
                "./pokemon-item-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "pokemon-item-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "pokemonVariant",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "PokemonVariant",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "getSprite",
                    "args": [
                        {
                            "name": "pokemon_variant",
                            "type": "PokemonVariant",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "pokemon_variant",
                            "type": "PokemonVariant",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input } from '@angular/core';\r\nimport { Pokemon, PokemonVariant } from '../../pokemon/pokemon';\r\n\r\n@Component({\r\n\tselector: 'mb-pokemon-item-list',\r\n\ttemplateUrl: 'pokemon-item-list.component.html',\r\n\tstyleUrls: ['./pokemon-item-list.component.scss']\r\n})\r\n\r\nexport class PokmeonItemListComponent implements OnInit {\r\n\r\n\t@Input() pokemonVariant: PokemonVariant;\r\n\t\r\n\tconstructor() { }\r\n\r\n\tngOnInit() { }\r\n\r\n\tgetSprite(pokemon_variant: PokemonVariant): string {\r\n\t\tif (pokemon_variant.sprites.default)\r\n\t\t\treturn pokemon_variant.sprites.default;\r\n\t\telse\r\n\t\t\treturn pokemon_variant.sprites.official;\r\n\t}\r\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".pokemon-image {\r\n\twidth: 64px;\r\n\theight: 64px;\r\n\tdisplay: flex;\r\n\tflex-direction: column;\r\n\tjustify-content: center;\r\n\talign-items: center;\r\n}",
                    "styleUrl": "./pokemon-item-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 12
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<a\r\n\tclass=\"item-list-pokemon flex\"\r\n\t[routerLink]=\"pokemonVariant.route ? pokemonVariant.route : []\">\r\n\r\n\t<div class=\"flex padded flex-center box\">\r\n\t\t<div>\r\n\t\t\t<figure class=\"pokemon-image\">\r\n\t\t\t\t<img\r\n\t\t\t\t\t*ngIf=\"getSprite(pokemonVariant)\"\r\n\t\t\t\t\tsrc=\"{{getSprite(pokemonVariant)}}\" />\r\n\t\t\t</figure>\r\n\t\t</div>\r\n\t\t<div class=\"box\">\r\n\t\t\t<figcaption class=\"pokemon-info\">\r\n\t\t\t\t<div class=\"flex padded flex-center\">\r\n\t\t\t\t\t<span class=\"width-6 pokemon-name\">\r\n\t\t\t\t\t\t{{pokemonVariant.name}}\r\n\t\t\t\t\t</span>\r\n\t\t\t\t\t<span class=\"width-3 expansion-release-date subheading\">\r\n\t\t\t\t\t\t#{{pokemonVariant.pokemon.national_dex_number}}\r\n\t\t\t\t\t</span>\r\n\t\t\t\t\t<span class=\"width-3 expansion-total-cards subheading\">\r\n\t\t\t\t\t\t<div\r\n\t\t\t\t\t\t\tclass=\"pokemon-types flex\"\r\n\t\t\t\t\t\t\t*ngIf=\"pokemonVariant.types\">\r\n\t\t\t\t\t\t\t<div class=\"flex padded\">\r\n\t\t\t\t\t\t\t\t<div\r\n\t\t\t\t\t\t\t\t\t*ngFor=\"let type of pokemonVariant.types\">\r\n\t\t\t\t\t\t\t\t\t<mb-type-tag [type]=\"type\"></mb-type-tag>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</span>\r\n\t\t\t\t</div>\r\n\t\t\t</figcaption>\r\n\t\t</div>\r\n\t</div>\r\n\r\n</a>"
        },
        {
            "name": "ProfileComponent",
            "id": "component-ProfileComponent-12a3c05ab9cc7b7525f61bca76dd616137fe45b3ef91df4a0bdb981dd2d72548119dcd0f38593afe562bf72d07308c880a2067c5a7c7c3ca44dd369f80c0f3d8",
            "file": "src/app/layout/header/profile/profile.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "[mb-profile]",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./profile.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "menu",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Menu",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { Menu, MenuItem } from '@app/controls/menu';\r\nimport { AuthenticationService } from '@app/services/auth.service';\r\nimport { Icons } from '@app/models/icons';\r\n\r\n@Component({\r\n\tselector: '[mb-profile]',\r\n\ttemplateUrl: './profile.component.html',\r\n})\r\nexport class ProfileComponent implements OnInit {\r\n\tmenu: Menu;\r\n\r\n\tconstructor(private authenticationService: AuthenticationService) {}\r\n\r\n\tngOnInit(): void {\r\n\t\tthis.menu = new Menu({\r\n\t\t\tclasses: 'round',\r\n\t\t\tclearActiveClickOutside: true,\r\n\t\t\thorizontal: true,\r\n\t\t\titems: [\r\n\t\t\t\tnew MenuItem({\r\n\t\t\t\t\ttext: this.authenticationService.currentUserValue.username,\r\n\t\t\t\t\ticon: Icons.user,\r\n\t\t\t\t\tmenu: new Menu({\r\n\t\t\t\t\t\tclasses: 'anchor-right',\r\n\t\t\t\t\t\titems: [\r\n\t\t\t\t\t\t\tnew MenuItem({\r\n\t\t\t\t\t\t\t\ttext: 'Dashboard',\r\n\t\t\t\t\t\t\t\ticon: Icons.dashboard,\r\n\t\t\t\t\t\t\t\troute: '/collection/dashboard/',\r\n\t\t\t\t\t\t\t\tclick: () => {\r\n\t\t\t\t\t\t\t\t\tthis.menu.clearActive();\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t}),\r\n\t\t\t\t\t\t\tnew MenuItem({\r\n\t\t\t\t\t\t\t\ttext: 'Profile',\r\n\t\t\t\t\t\t\t\ticon: Icons.user,\r\n\t\t\t\t\t\t\t\troute: '/profile/edit',\r\n\t\t\t\t\t\t\t\tclick: () => {\r\n\t\t\t\t\t\t\t\t\tthis.menu.clearActive();\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t}),\r\n\t\t\t\t\t\t\t// ...( [new MenuItem({\r\n\t\t\t\t\t\t\t// \ttext: \"Admin\",\r\n\t\t\t\t\t\t\t// \ticon: Icons.donate,\r\n\t\t\t\t\t\t\t// \troute: \"patreon\",\r\n\t\t\t\t\t\t\t// \tclick: () => {\r\n\t\t\t\t\t\t\t// \t\tthis.menu.clearActive();\r\n\t\t\t\t\t\t\t// \t}\r\n\t\t\t\t\t\t\t// })]),\r\n\t\t\t\t\t\t\tnew MenuItem({\r\n\t\t\t\t\t\t\t\ttext: 'Sign Out',\r\n\t\t\t\t\t\t\t\ticon: Icons.signOut,\r\n\t\t\t\t\t\t\t\tclick: () => {\r\n\t\t\t\t\t\t\t\t\tthis.authenticationService.logout();\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t}),\r\n\t\t\t\t\t\t],\r\n\t\t\t\t\t}),\r\n\t\t\t\t}),\r\n\t\t\t],\r\n\t\t});\r\n\t}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authenticationService",
                        "type": "AuthenticationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "authenticationService",
                        "type": "AuthenticationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mb-menu [menu]=\"menu\"></mb-menu>"
        },
        {
            "name": "ProgressBarComponent",
            "id": "component-ProgressBarComponent-39953b3c9792e2b281dda05556c7ee566bf0d23edbf07d8f6686a7cecbcf15ffe168b6c93da707d707c8b46b532fc12bc42c94a84cdd1f83f3b9555641dfaad7",
            "file": "src/app/controls/progress-bar/progress-bar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "progress-bar",
            "styleUrls": [
                "./progress-bar.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "progress-bar.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "progressBar",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "ProgressBar",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "getWidth",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "isComplete",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input } from '@angular/core';\r\nimport { ProgressBar } from './progress-bar';\r\n\r\n@Component({\r\n\tselector: 'progress-bar',\r\n\ttemplateUrl: 'progress-bar.component.html',\r\n\tstyleUrls: ['./progress-bar.component.scss']\r\n})\r\n\r\nexport class ProgressBarComponent implements OnInit {\r\n\r\n\t@Input() progressBar: ProgressBar;\r\n\t\r\n\tgetWidth = () => {\r\n\t\treturn `${Math.round(this.progressBar.value/this.progressBar.total * 100)}%`;\r\n\t}\r\n\r\n\tisComplete = () => {\r\n\t\treturn this.progressBar.value >= this.progressBar.total;\r\n\t}\r\n\r\n\tconstructor() { }\r\n\r\n\tngOnInit() { }\r\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"settings\";\r\n\r\n.progress {\r\n\twidth: 100%;\r\n\tbackground: $input-bg;\r\n\tborder: $border;\r\n\tborder-radius: $border-radius;\r\n\theight: 16px;\r\n\tposition: relative;\r\n\tfont-size: 12px;\r\n\t.progress-bar {\r\n\t\tbackground: $primary-color;\r\n\t\tborder-radius: $border-radius - 1px;\r\n\t\theight: 14px;\r\n\t}\r\n\t.progress-value {\r\n\t\tposition: absolute;\r\n\t\ttop: 50%;\r\n\t\tleft: 50%;\r\n\t\ttransform: translate(-50%, -50%);\r\n\t\tfont-weight: bold;\r\n\t\tcolor: $font-color;\r\n\t\tmargin-top: -1px;\r\n\t\twhite-space: nowrap;\r\n\t\ttext-align: center;\r\n\t}\r\n\t&.complete {\r\n\t\t.progress-bar {\r\n\t\t\tbackground: $green;\r\n\t\t}\r\n\t}\r\n}\r\n",
                    "styleUrl": "./progress-bar.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 20
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"progress\" *ngIf=\"progressBar\" [class.complete]=\"isComplete()\">\r\n\t<div class=\"progress-bar\" [style.width]=\"getWidth()\"></div>\r\n\t<div class=\"progress-value\">\r\n\t\t{{getWidth()}}\r\n\t\t({{progressBar.value}}/{{progressBar.total}})\r\n\t</div>\r\n</div>"
        },
        {
            "name": "ResetComponent",
            "id": "component-ResetComponent-088499b603ed48c5ba78c7b6beed923d3a7ad8e6e8a040d9914a9dd5561756b9398bd36d98900385fce71d0b8a96043ad287608f3c9dd97db5a2f5dc1039b7a7",
            "file": "src/app/pages/auth/reset/reset.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "mb-reset",
            "styleUrls": [
                "./reset.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./reset.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "buttonSubmit",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Button",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "textboxConfirmPassword",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Textbox",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "textboxEmail",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Textbox",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "textboxPassword",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Textbox",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "token",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "submit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { NotificationsService, Notification, AlertType } from '@app/controls';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { AuthenticationService } from '@app/services/auth.service';\r\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\r\nimport { Textbox, Button, ButtonType } from '@app/controls';\r\nimport { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n\tselector: 'mb-reset',\r\n\ttemplateUrl: './reset.component.html',\r\n\tstyleUrls: ['./reset.component.scss'],\r\n})\r\nexport class ResetComponent implements OnInit {\r\n\tform: FormGroup;\r\n\ttextboxEmail: Textbox;\r\n\ttextboxPassword: Textbox;\r\n\ttextboxConfirmPassword: Textbox;\r\n\tbuttonSubmit: Button;\r\n\ttoken: string;\r\n\r\n\tconstructor(\r\n\t\tprivate authenticationService: AuthenticationService,\r\n\t\tprivate formBuilder: FormBuilder,\r\n\t\tprivate router: Router,\r\n\t\tprivate route: ActivatedRoute,\r\n\t\tprivate notificationService: NotificationsService\r\n\t) {\r\n\t\tif (this.authenticationService.currentUserValue) {\r\n\t\t\tthis.router.navigateByUrl('/');\r\n\t\t}\r\n\t}\r\n\r\n\tngOnInit(): void {\r\n\t\t// Get query params\r\n\t\tthis.route.params.subscribe((params) => {\r\n\t\t\tthis.token = params['token'];\r\n\t\t});\r\n\r\n\t\t// Build form\r\n\t\tthis.form = this.formBuilder.group({\r\n\t\t\temailControl: ['', Validators.required],\r\n\t\t\tpasswordControl: ['', Validators.required],\r\n\t\t\tconfirmPasswordControl: ['', Validators.required],\r\n\t\t});\r\n\r\n\t\t// Build form controls\r\n\t\tthis.textboxEmail = new Textbox({\r\n\t\t\tlabel: 'Email',\r\n\t\t});\r\n\t\tthis.textboxPassword = new Textbox({\r\n\t\t\tlabel: 'Password',\r\n\t\t});\r\n\t\tthis.textboxConfirmPassword = new Textbox({\r\n\t\t\tlabel: 'Confirm Password',\r\n\t\t});\r\n\t\tthis.buttonSubmit = new Button({\r\n\t\t\ttext: 'Reset Password',\r\n\t\t\ttype: ButtonType.submit,\r\n\t\t});\r\n\t}\r\n\r\n\tsubmit() {\r\n\t\tif (this.form.invalid) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis.authenticationService\r\n\t\t\t.reset(\r\n\t\t\t\tthis.token,\r\n\t\t\t\tthis.form.controls.emailControl.value,\r\n\t\t\t\tthis.form.controls.passwordControl.value,\r\n\t\t\t\tthis.form.controls.confirmPasswordControl.value\r\n\t\t\t)\r\n\t\t\t.subscribe(() => {\r\n\t\t\t\tthis.notificationService.addNotifications([\r\n\t\t\t\t\tnew Notification({\r\n\t\t\t\t\t\talertType: AlertType.success,\r\n\t\t\t\t\t\tmessage: 'Password Reset',\r\n\t\t\t\t\t}),\r\n\t\t\t\t]);\r\n\t\t\t});\r\n\t}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./reset.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authenticationService",
                        "type": "AuthenticationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "notificationService",
                        "type": "NotificationsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "authenticationService",
                        "type": "AuthenticationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "notificationService",
                        "type": "NotificationsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<form\r\n\tclass=\"padding-y-8 flex vertical flex-center\"\r\n\t[formGroup]=\"form\"\r\n\t(ngSubmit)=\"submit()\"\r\n>\r\n\t<div class=\"flex vertical padded-2\" style=\"max-width: 400px\">\r\n\t\t<div>\r\n\t\t\t<h1>Reset Password</h1>\r\n\t\t</div>\r\n\t\t<div>\r\n\t\t\t<mb-textbox\r\n\t\t\t\t[formControl]=\"form.controls.emailControl\"\r\n\t\t\t\t[textbox]=\"textboxEmail\"\r\n\t\t\t></mb-textbox>\r\n\t\t</div>\r\n\t\t<div>\r\n\t\t\t<mb-textbox\r\n\t\t\t\t[formControl]=\"form.controls.passwordControl\"\r\n\t\t\t\t[textbox]=\"textboxPassword\"\r\n\t\t\t></mb-textbox>\r\n\t\t</div>\r\n\t\t<div>\r\n\t\t\t<mb-textbox\r\n\t\t\t\t[formControl]=\"form.controls.confirmPasswordControl\"\r\n\t\t\t\t[textbox]=\"textboxConfirmPassword\"\r\n\t\t\t>\r\n\t\t\t</mb-textbox>\r\n\t\t</div>\r\n\t\t<div>\r\n\t\t\t<mb-button [button]=\"buttonSubmit\"></mb-button>\r\n\t\t</div>\r\n\t</div>\r\n</form>\r\n"
        },
        {
            "name": "ScannerComponent",
            "id": "component-ScannerComponent-1cb19669ab45daa0097179af3d8070d675a1f5b2d5a5ce62a93bd32fa8b88734818a1eb62656ed3b028443fa2e1f3876787e92ef03fcacc77a2b26d3692e11d8",
            "file": "src/app/pages/scanner/scanner.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "mb-scanner",
            "styleUrls": [
                "./scanner.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./scanner.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "alert",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Alert",
                    "optional": false,
                    "description": "",
                    "line": 70
                },
                {
                    "name": "allowCameraSwitch",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "checkboxBatchMode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Checkbox",
                    "optional": false,
                    "description": "",
                    "line": 72
                },
                {
                    "name": "deviceId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "errors",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "WebcamInitError[]",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "lastImageSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "lastMatchedCard",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Card",
                    "optional": false,
                    "description": "",
                    "line": 64
                },
                {
                    "name": "matches",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Card[]",
                    "optional": false,
                    "description": "",
                    "line": 60
                },
                {
                    "name": "menuItemModeMultiple",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MenuItem",
                    "optional": false,
                    "description": "",
                    "line": 76
                },
                {
                    "name": "menuItemModeScanner",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MenuItem",
                    "optional": false,
                    "description": "",
                    "line": 75
                },
                {
                    "name": "menuItemModeSnapshot",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MenuItem",
                    "optional": false,
                    "description": "",
                    "line": 74
                },
                {
                    "name": "menuScannerModes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Menu",
                    "optional": false,
                    "description": "",
                    "line": 73
                },
                {
                    "name": "menuScannerOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Menu",
                    "optional": false,
                    "description": "",
                    "line": 77
                },
                {
                    "name": "multipleWebcamsAvailable",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "nextWebcam",
                    "defaultValue": "new Subject<boolean | string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<boolean | string>",
                    "optional": false,
                    "description": "",
                    "line": 47,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "prompt",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 63
                },
                {
                    "name": "scanned",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 68
                },
                {
                    "name": "scannerMode",
                    "defaultValue": "ScanType.snapshot",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ScanType",
                    "optional": false,
                    "description": "",
                    "line": 67
                },
                {
                    "name": "scannerMultipleServiceSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "scannerResultMenu",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Menu",
                    "optional": false,
                    "description": "",
                    "line": 79
                },
                {
                    "name": "scannerResultMenuItem",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MenuItem",
                    "optional": false,
                    "description": "",
                    "line": 80
                },
                {
                    "name": "scannerServiceSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "scanning",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "searching",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "showOptions",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "showResult",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 78
                },
                {
                    "name": "showWebcam",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "soundEffect",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HTMLAudioElement",
                    "optional": false,
                    "description": "",
                    "line": 66
                },
                {
                    "name": "subscribedMulti",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "subscribedSingle",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "testError",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "timer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "totalNullResults",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 65
                },
                {
                    "name": "trigger",
                    "defaultValue": "new Subject<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<void>",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "videoOptions",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MediaTrackConstraints",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "visibleMatches",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Card[]",
                    "optional": false,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "webcamImage",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "WebcamImage",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "addMatch",
                    "args": [
                        {
                            "name": "card",
                            "type": "Card",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 323,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "card",
                            "type": "Card",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addMatches",
                    "args": [
                        {
                            "name": "cards",
                            "type": "Card[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 314,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "cards",
                            "type": "Card[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "cameraWasSwitched",
                    "args": [
                        {
                            "name": "deviceId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 399,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "deviceId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleImage",
                    "args": [
                        {
                            "name": "webcamImage",
                            "type": "WebcamImage",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 367,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "webcamImage",
                            "type": "WebcamImage",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleInitError",
                    "args": [
                        {
                            "name": "error",
                            "type": "WebcamInitError",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 356,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "error",
                            "type": "WebcamInitError",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadSoundEffect",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 338,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 129,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 130,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "playSoundEffect",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 344,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "runScan",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 438,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "scannerStart",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 413,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "scannerStop",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 421,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "scannerToggle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 427,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setMode",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setModeMultiple",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 122,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setModeScanner",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 115,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setModeSnapshot",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 108,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setupMultipleScannerService",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 293,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setupScannerService",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 257,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setupService",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 243,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "showNextWebcam",
                    "args": [
                        {
                            "name": "directionOrDeviceId",
                            "type": "boolean | string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 360,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "directionOrDeviceId",
                            "type": "boolean | string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleWebcam",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 352,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "triggerSnapshot",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 348,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ViewEncapsulation, Version } from '@angular/core';\r\nimport { WebcamImage, WebcamInitError, WebcamUtil } from 'ngx-webcam';\r\nimport { Subject, Observable, Subscription } from 'rxjs';\r\nimport { ScannerService, ScanType } from '@app/services/scanner.service';\r\nimport { Router } from '@angular/router';\r\nimport { Card } from '@app/pages/cards/card';\r\nimport { Checkbox,  } from '@app/controls/checkbox';\r\nimport { Menu, MenuItem } from '@app/controls/menu';\r\nimport { NotificationsService, Notification } from '@app/controls/notifications';\r\nimport { AutoUnsubscribe } from \"ngx-auto-unsubscribe\";\r\nimport { CardsService } from '../cards';\r\nimport { Icons } from '@app/models/icons';\r\nimport { Title } from '@angular/platform-browser';\r\nimport { AlertType, Alert } from '@app/controls/alert/alert';\r\nimport { LoaderService } from '@app/controls';\r\nimport { AppSettings } from '@app/app';\r\n\r\n@AutoUnsubscribe()\r\n@Component({\r\n\tselector: 'mb-scanner',\r\n\ttemplateUrl: './scanner.component.html',\r\n\tencapsulation: ViewEncapsulation.None,\r\n\tstyleUrls: ['./scanner.component.scss']\r\n})\r\n\r\nexport class ScannerComponent implements OnInit {\r\n\r\n\tconstructor(\r\n\t\tprivate titleService: Title,\r\n\t\tprivate scannerService: ScannerService,\r\n\t\tprivate cardsService: CardsService,\r\n\t\tprivate router: Router,\r\n\t\tprivate loaderService: LoaderService,\r\n\t\tprivate notificationService: NotificationsService) { }\r\n\r\n\t// Webcam options\r\n\tpublic lastImageSize: string;\r\n\tpublic showWebcam = true;\r\n\tpublic allowCameraSwitch = true;\r\n\tpublic deviceId: string;\r\n\tpublic multipleWebcamsAvailable = false;\r\n\tpublic videoOptions: MediaTrackConstraints = {};\r\n\tpublic errors: WebcamInitError[] = [];\r\n\tpublic webcamImage: WebcamImage = null;\r\n\tprivate trigger: Subject<void> = new Subject<void>();\r\n\t// switch to next / previous / specific webcam; true/false: forward/backwards, string: deviceId\r\n\tprivate nextWebcam: Subject<boolean | string> = new Subject<boolean | string>();\r\n\r\n\t// Service subscriptions\r\n\tscannerServiceSubscription: Subscription;\r\n\tscannerMultipleServiceSubscription: Subscription;\r\n\r\n\t// Options\r\n\tsubscribedSingle: boolean = false; // use dto prevent no cards found when subscription initalizes\r\n\tsubscribedMulti: boolean = false;\r\n\tsearching: boolean = false;\r\n\tscanning: boolean = false;\r\n\tshowOptions: boolean = false;\r\n\ttimer: any;\r\n\tmatches: Card[] = [];\r\n\tvisibleMatches: Card[] = [];\r\n\ttestError: string = \"\";\r\n\tprompt: boolean = false;\r\n\tlastMatchedCard: Card = null;\r\n\ttotalNullResults: number = 0;\r\n\tsoundEffect: HTMLAudioElement;\r\n\tscannerMode: ScanType = ScanType.snapshot; // Default mode\r\n\tscanned: boolean = false; // Prevent sound effect when adding matches from cache\r\n\r\n\talert: Alert;\r\n\r\n\tcheckboxBatchMode: Checkbox;\r\n\tmenuScannerModes: Menu;\r\n\tmenuItemModeSnapshot: MenuItem;\r\n\tmenuItemModeScanner: MenuItem;\r\n\tmenuItemModeMultiple: MenuItem;\r\n\tmenuScannerOptions: Menu;\r\n\tshowResult: boolean;\r\n\tscannerResultMenu: Menu;\r\n\tscannerResultMenuItem: MenuItem;\r\n\tget showActionScan(): boolean {\r\n\t\treturn this.scannerMode == ScanType.scan;\r\n\t};\r\n\tget showActionSnapshot(): boolean {\r\n\t\treturn this.scannerMode == ScanType.snapshot;\r\n\t};\r\n\tget showActionMultiple(): boolean {\r\n\t\treturn this.scannerMode == ScanType.multiple;\r\n\t};\r\n\r\n\tsetMode() {\r\n\t\tswitch(this.scannerMode) {\r\n\t\t\tcase ScanType.snapshot: {\r\n\t\t\t\tthis.setModeSnapshot();\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase ScanType.scan: {\r\n\t\t\t\tthis.setModeScanner();\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase ScanType.multiple: {\r\n\t\t\t\tthis.setModeMultiple();\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tsetModeSnapshot() {\r\n\t\tthis.menuScannerModes.clearActive();\r\n\t\tthis.scannerMode = ScanType.snapshot;\r\n\t\tthis.menuItemModeSnapshot.active = true;\r\n\t\tthis.setupService();\r\n\t}\r\n\r\n\tsetModeScanner() {\r\n\t\tthis.menuScannerModes.clearActive();\r\n\t\tthis.scannerMode =  ScanType.scan;\r\n\t\tthis.menuItemModeScanner.active = true;\r\n\t\tthis.setupService();\r\n\t}\r\n\r\n\tsetModeMultiple() {\r\n\t\tthis.menuScannerModes.clearActive();\r\n\t\tthis.scannerMode = ScanType.multiple;\r\n\t\tthis.menuItemModeMultiple.active = true;\r\n\t\tthis.setupService();\r\n\t}\r\n\r\n\tngOnDestroy() { }\r\n\tngOnInit() {\r\n\t\tWebcamUtil.getAvailableVideoInputs()\r\n\t\t\t.then((mediaDevices: MediaDeviceInfo[]) => {\r\n\t\t\t\tthis.multipleWebcamsAvailable = mediaDevices && mediaDevices.length > 1;\r\n\t\t\t\tif (this.multipleWebcamsAvailable) {\r\n\t\t\t\t\t// Try to go to rear camera\r\n\t\t\t\t\tthis.showNextWebcam(mediaDevices[1].deviceId);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\tthis.loadSoundEffect();\r\n\r\n\t\tthis.titleService.setTitle(AppSettings.titlePrefix + 'Scanner');\r\n\r\n\t\tthis.checkboxBatchMode = new Checkbox({\r\n\t\t\tchecked: false,\r\n\t\t\ttext: \"Batch Mode\"\r\n\t\t});\r\n\r\n\t\t// Alert\r\n\t\tthis.alert = new Alert({\r\n\t\t\tmessage: `\r\n\t\t\t\t<ul class=\"unordered-list\">\r\n\t\t\t\t\t<li>\r\n\t\t\t\t\t\t<b>Single mode:</b> this algorithm looks for a single card name.\r\n\t\t\t\t\t</li>\r\n\t\t\t\t\t<li>\r\n\t\t\t\t\t\t<b>Multiple mode:</b> this algorithm looks for multiple card names.\r\n\t\t\t\t\t</li>\r\n\t\t\t\t\t<li>\r\n\t\t\t\t\t\tFor best results with either mode, make sure the card name is completely visible and in focus.\r\n\t\t\t\t\t</li>\r\n\t\t\t\t\t<li>\r\n\t\t\t\t\t\tOur algorithms primarily uses card name text detection, unfortunaly identifying specific sets is not supported.\r\n\t\t\t\t\t</li>\r\n\t\t\t\t</ul>\r\n\t\t\t`,\r\n\t\t});\r\n\r\n\t\t// Options\r\n\t\tlet scannerOptionMenuItems: MenuItem[] = [];\r\n\t\tlet switchCameraMenuItem = new MenuItem({\r\n\t\t\ttext: \"Switch Cameras\",\r\n\t\t\ticon: Icons.sync,\r\n\t\t\tclick: () => {\r\n\t\t\t\tthis.showNextWebcam(true);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\t// Only add switch camer option if multi cameras\r\n\t\tif (this.multipleWebcamsAvailable) {\r\n\t\t\tscannerOptionMenuItems.push(switchCameraMenuItem);\r\n\t\t}\r\n\r\n\t\t// Only show menu if have options available\r\n\t\tif (scannerOptionMenuItems.length) {\r\n\t\t\tthis.menuScannerOptions = new Menu({\r\n\t\t\t\tclasses: \"round bg\",\r\n\t\t\t\thorizontal: true,\r\n\t\t\t\titems: [\r\n\t\t\t\t\tnew MenuItem({\r\n\t\t\t\t\t\ticon: Icons.settings,\r\n\t\t\t\t\t\tmenu: new Menu({\r\n\t\t\t\t\t\t\tclasses: \"round bg\",\r\n\t\t\t\t\t\t\titems: scannerOptionMenuItems\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t})\r\n\t\t\t\t]\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\t// Modes menu\r\n\t\tthis.menuItemModeSnapshot = new MenuItem({\r\n\t\t\ticon: Icons.camera,\r\n\t\t\tclasses: \"box\",\r\n\t\t\ttext: \"Single\",\r\n\t\t\tclick: () => {\r\n\t\t\t\tthis.setModeSnapshot();\r\n\t\t\t}\r\n\t\t});\r\n\t\tthis.menuItemModeScanner = new MenuItem({\r\n\t\t\ticon: Icons.play,\r\n\t\t\tclasses: \"box\",\r\n\t\t\ttext: \"Scanner\",\r\n\t\t\tclick: () => {\r\n\t\t\t\tthis.setModeScanner();\r\n\t\t\t}\r\n\t\t});\r\n\t\tthis.menuItemModeMultiple = new MenuItem({\r\n\t\t\ticon: Icons.bringFront,\r\n\t\t\tclasses: \"box\",\r\n\t\t\ttext: \"Multiple\",\r\n\t\t\tclick: () => {\r\n\t\t\t\tthis.setModeMultiple();\r\n\t\t\t}\r\n\t\t});\r\n\t\tthis.menuScannerModes = new Menu({\r\n\t\t\tclearActiveClickOutside: false,\r\n\t\t\thorizontal: true,\r\n\t\t\tclasses: \"bg square\",\r\n\t\t\titems: [\r\n\t\t\t\tthis.menuItemModeSnapshot,\r\n\t\t\t\t//this.menuItemModeScanner,\r\n\t\t\t\tthis.menuItemModeMultiple\r\n\t\t\t]\r\n\t\t});\r\n\t\t\r\n\t\tif (this.scannerService.scannerList.cards.length) {\r\n\t\t\tthis.addMatches(this.scannerService.scannerList.cards);\r\n\t\t}\r\n\t\tthis.setMode();\r\n\t}\r\n\t\r\n\tsetupService() {\r\n\t\tswitch(this.scannerMode) {\r\n\t\t\tcase ScanType.snapshot:\r\n\t\t\tcase ScanType.scan: {\r\n\t\t\t\tthis.setupScannerService();\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase ScanType.multiple: {\r\n\t\t\t\tthis.setupMultipleScannerService()\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tsetupScannerService() {\r\n\t\tif (!this.scannerServiceSubscription) {\r\n\t\t\tthis.scannerServiceSubscription = this.scannerService.getScanCardObservable().subscribe((card: Card) => {\r\n\t\t\t\tthis.loaderService.clearItemLoading(\"scanning\");\r\n\t\t\t\tthis.searching = false;\r\n\t\t\t\tif (card) {\r\n\t\t\t\t\tif (this.scanning) {\r\n\t\t\t\t\t\tthis.totalNullResults = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (this.scannerMode == ScanType.snapshot || !this.lastMatchedCard || this.lastMatchedCard.id != card.id) {\r\n\t\t\t\t\t\tthis.addMatches([card]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tif (this.scanning) {\r\n\t\t\t\t\t\t// Stop scanner if 10 null results\r\n\t\t\t\t\t\t// Prevents spamming server if user is not doing anything\r\n\t\t\t\t\t\tthis.totalNullResults ++;\r\n\t\t\t\t\t\tif (this.totalNullResults > 10) {\r\n\t\t\t\t\t\t\tthis.scannerStop();\t\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (this.subscribedSingle) {\r\n\t\t\t\t\t\tthis.notificationService.addNotifications([\r\n\t\t\t\t\t\t\tnew Notification({\r\n\t\t\t\t\t\t\t\talertType: AlertType.warning,\r\n\t\t\t\t\t\t\t\tmessage: \"No card(s) found\",\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t])\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tthis.subscribedSingle = true;\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\tsetupMultipleScannerService() {\r\n\t\tif (!this.scannerMultipleServiceSubscription) {\r\n\t\t\tthis.scannerMultipleServiceSubscription = this.scannerService.getScanCardsObservable().subscribe((cards: Card[]) => {\r\n\t\t\t\tthis.loaderService.clearItemLoading(\"scanning\");\r\n\t\t\t\tthis.searching = false;\r\n\t\t\t\tif (cards && cards.length > 0) {\r\n\t\t\t\t\tthis.addMatches(cards);\r\n\t\t\t\t}\r\n\t\t\t\telse if (this.subscribedMulti) {\r\n\t\t\t\t\tthis.notificationService.addNotifications([\r\n\t\t\t\t\t\tnew Notification({\r\n\t\t\t\t\t\t\talertType: AlertType.warning,\r\n\t\t\t\t\t\t\tmessage: \"No card(s) found\",\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t])\r\n\t\t\t\t}\r\n\t\t\t\tthis.subscribedMulti = true;\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\taddMatches(cards: Card[]) {\r\n\t\tif (this.scanned) {\r\n\t\t\tthis.playSoundEffect();\r\n\t\t}\r\n\t\tcards.forEach((card) => {\r\n\t\t\tthis.addMatch(card);\r\n\t\t});\r\n\t}\r\n\r\n\taddMatch(card: Card) {\r\n\t\tcard.tempId = this.scannerService.getTempId();\r\n\r\n\t\t// Limit tray to 10\r\n\t\tif (this.visibleMatches.length >= 6) {\r\n\t\t\tthis.visibleMatches.shift();\r\n\t\t}\r\n\t\tthis.visibleMatches.push(card);\r\n\t\tthis.matches.push(card);\r\n\t\tthis.lastMatchedCard = card;\r\n\r\n\t\t// Update service cache\r\n\t\tthis.scannerService.scannerList.cards = this.matches;\r\n\t}\r\n\r\n\tloadSoundEffect() {\r\n\t\tthis.soundEffect = new Audio();\r\n\t\tthis.soundEffect.src = \"../../assets/audio/soundeffect.mp3\";\r\n\t\tthis.soundEffect.load();\r\n\t}\r\n\r\n\tplaySoundEffect() {\r\n\t\tthis.soundEffect.play();\r\n\t}\r\n\r\n\ttriggerSnapshot(): void {\r\n\t\tthis.trigger.next();\r\n\t}\r\n\r\n\ttoggleWebcam(): void {\r\n\t\tthis.showWebcam = !this.showWebcam;\r\n\t}\r\n\r\n\thandleInitError(error: WebcamInitError): void {\r\n\t\tthis.errors.push(error);\r\n\t}\r\n\r\n\tshowNextWebcam(directionOrDeviceId: boolean | string): void {\r\n\t\t// true => move forward through devices\r\n\t\t// false => move backwards through devices\r\n\t\t// string => move to device with given deviceId\r\n\t\tthis.nextWebcam.next(directionOrDeviceId);\r\n\t}\r\n\r\n\thandleImage(webcamImage: WebcamImage): void {\r\n\t\tthis.scanned = true;\r\n\t\tconsole.info('received webcam image', webcamImage);\r\n\t\tthis.webcamImage = webcamImage;\r\n\t\tlet bytes = (webcamImage.imageAsBase64.length * (3/4)) - 2;\r\n\t\tlet kilobytes = bytes / 1000;\r\n\t\tthis.lastImageSize = `${kilobytes}kb`;\r\n\r\n\t\t// Send request to server\r\n\t\tswitch (this.scannerMode) {\r\n\t\t\tcase ScanType.scan: {\r\n\t\t\t\tthis.scannerService.getScanCard({\r\n\t\t\t\t\timage: webcamImage.imageAsBase64\r\n\t\t\t\t});\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase ScanType.snapshot: {\r\n\t\t\t\tthis.scannerService.getScanCard({\r\n\t\t\t\t\timage: webcamImage.imageAsBase64\r\n\t\t\t\t});\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase ScanType.multiple: {\r\n\t\t\t\tthis.searching = true;\r\n\t\t\t\tthis.scannerService.getScanCards({\r\n\t\t\t\t\timage: webcamImage.imageAsBase64\r\n\t\t\t\t});\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tcameraWasSwitched(deviceId: string): void {\r\n\t\tconsole.log('active device: ' + deviceId);\r\n\t\tthis.deviceId = deviceId;\r\n\t}\r\n\r\n\tget triggerObservable(): Observable<void> {\r\n\t\treturn this.trigger.asObservable();\r\n\t}\r\n\r\n\tget nextWebcamObservable(): Observable<boolean | string> {\r\n\t\treturn this.nextWebcam.asObservable();\r\n\t}\r\n\r\n\t// Start\r\n\tscannerStart() {\r\n\t\tthis.timer = setInterval(() => {\r\n\t\t\tthis.runScan();\r\n\t\t}, 250);\r\n\t\tthis.scanning = true;\r\n\t}\r\n\r\n\t// Stop\r\n\tscannerStop() {\r\n\t\tclearInterval(this.timer);\r\n\t\tthis.scanning = false;\r\n\t}\r\n\r\n\t// Start/stop scanner\r\n\tscannerToggle() {\r\n\t\tif (this.scanning) {\r\n\t\t\tthis.scannerStop();\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.scannerStart();\r\n\t\t}\r\n\t\tthis.runScan();\r\n\t}\r\n\r\n\t// Trigger a scan\r\n\trunScan() {\r\n\t\tif (!this.searching) {\r\n\t\t\tif (this.scannerMode != ScanType.scan) {\r\n\t\t\t\tthis.loaderService.addItemLoading(\"scanning\");\r\n\t\t\t}\r\n\t\t\tif (this.trigger) {\r\n\t\t\t\tthis.trigger.next();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.scannerStop();\r\n\t\t\t\talert('NO TRIGGER');\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"settings\",\r\n\t\t\"scaffold/typography\";\r\n\r\n.scanner-wrapper {\r\n    margin: 0 auto;\r\n    width: 400px;\r\n    .scanner {\r\n        border-radius: $border-radius;\r\n        position: relative;\r\n        padding-bottom: percentage(3.5/2.5);\r\n\t\toverflow: hidden;\r\n\t\tbox-shadow: $shadow;\r\n\t}\r\n\t.scanner-modes {\r\n\t\tposition: absolute;\r\n\t\tleft: 0;\r\n\t\tright: 0;\r\n\t\tbottom: 0;\r\n\t\tz-index: 3;\r\n\t}\r\n    .scanner-camera-wrapper {\r\n        z-index: 1;\r\n        position: absolute;\r\n        top: 0;\r\n        left: 0;\r\n        right: 0;\r\n        bottom: 0;\r\n        webcam {\r\n\t\t\theight: 100%;\r\n\t\t\twidth: 100%;\r\n\t\t\tposition: absolute;\r\n\t\t\tbackground: black;\r\n            .webcam-wrapper {\r\n\t\t\t\tbackground: black;\r\n\t\t\t\tposition: absolute;\r\n\t\t\t\twidth: 100%;\r\n\t\t\t\ttop: 40px;\r\n\t\t\t\tleft: 0;\r\n\t\t\t\tright: 0;\r\n\t\t\t\tbottom: 40px;\r\n\t\t\t\theight: calc(100% - 80px); // Subtract header/footer menus to prevent video overlap\r\n                video {\r\n\t\t\t\t\tdisplay: block;\r\n\t\t\t\t\twidth: auto;\r\n\t\t\t\t\ttop: 50%;\r\n\t\t\t\t\tleft: 50%;\r\n\t\t\t\t\ttransform: translate(-50%, -50%);\r\n\t\t\t\t\tposition: absolute;\r\n\t\t\t\t\tmax-width: 100%;\r\n\t\t\t\t\tmax-height: 100%;\r\n                }\r\n            }\r\n        }\r\n        .scanner-camera-overlay {\r\n            position: absolute;\r\n            top: 50%;\r\n            left: 50%;\r\n            transform: translate(-50%, -50%);\r\n            transition: $transition;\r\n            height: 80%;\r\n            width: 80%;\r\n            border: 1px solid $red;\r\n            box-shadow: 0 0 4px 4px rgba($red, .4), inset 0 0 4px 4px rgba($red, .4);\r\n            border-radius: 4%;\r\n            &.scanning {\r\n                border-color: $green;\r\n                box-shadow: 0 0 4px 4px rgba($green, .4), inset 0 0 4px 4px rgba($green, .4);\r\n            }\r\n        }\r\n    }\r\n    .scanner-status {\r\n        position: absolute;\r\n        z-index: 50;\r\n        top: 3.5 * 10px;\r\n        right: 2.5 * 10px;\r\n        width: 24px;\r\n        height: 24px;\r\n        background: $red;\r\n        border-radius: 50%;\r\n        box-shadow: 0 0 4px 4px rgba($red, .4);\r\n        transition: $transition;\r\n        &.scanning {\r\n            background: $green;\r\n            box-shadow: 0 0 4px 4px rgba($green, .4);\r\n\t\t}\r\n\t\t.scanner-fps {\r\n\t\t\tposition: absolute;\r\n\t\t\ttop: 50%;\r\n\t\t\ttransform: translateY(-50%);\r\n\t\t\tright: 100%;\r\n\t\t\tmargin-right: $spacing;\r\n\t\t\tbackground: rgba(white, .5);\r\n\t\t\twhite-space: nowrap;\r\n\t\t\tborder-radius: $border-radius;\r\n\t\t\tpadding: 2px 8px;\r\n\t\t\t@extend .subheading;\r\n\t\t}\r\n    }\r\n    .scanner-options {\r\n\t\tposition: absolute;\r\n\t\tleft: 0;\r\n\t\tz-index: 5;\r\n\t\t> mb-menu {\r\n\t\t\t> .panel {\r\n\t\t\t\tborder-top-left-radius: 0;\r\n\t\t\t\tborder-bottom-left-radius: 0;\r\n\t\t\t\tborder-top-right-radius: 0;\r\n\t\t\t\t> ul > li {\r\n\t\t\t\t\t> a {\r\n\t\t\t\t\t\tborder-bottom-right-radius: $border-radius;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n    }\r\n    .scanner-action {\r\n\t\tposition: absolute;\r\n\t\toverflow: hidden;\r\n        z-index: 1;\r\n        bottom: 40px;\r\n        left: 50%;\r\n        transform: translateX(-50%);\r\n        width: 72px;\r\n        height: 72px;\r\n\t\tborder-top-left-radius: 50%;\r\n\t\tborder-top-right-radius: 50%;\r\n        transition: $transition;\r\n        color: white;\r\n        cursor: pointer;\r\n        user-select: none;\r\n\t\tbackground: $green;\r\n\t\tbox-shadow: 0 0 4px 4px rgba($green, .4);\r\n\t\t&:hover {\r\n\t\t\tbox-shadow: 0 0 4px 8px rgba($green, .4);\r\n\t\t}\r\n\t\tfa-icon {\r\n            position: absolute;\r\n            top: 14px;\r\n            left: 50%;\r\n            transform: translateX(-50%);\r\n            width: 24px;\r\n            height: 24px;\r\n\t\t}\r\n        &.scanning {\r\n\t\t\tbackground: $red;\r\n\t\t\tbox-shadow: 0 0 4px 4px rgba($red, .4);\r\n\t\t\t&:hover {\r\n\t\t\t\tbox-shadow: 0 0 4px 8px rgba($red, .4);\r\n\t\t\t}\r\n        }\r\n        span {\r\n            position: absolute;\r\n            bottom: 12px;\r\n            left: 50%;\r\n            transform: translateX(-50%);\r\n            @extend .subheading;\r\n        }\r\n\t}\r\n\t.scanner-result {\r\n\t\tposition: absolute;\r\n\t\ttop: 0;\r\n\t\tright: 0;\r\n\t\tz-index: 5;\r\n\t\tmb-menu {\r\n\t\t\t.panel {\r\n\t\t\t\tborder-top-left-radius: 0;\r\n\t\t\t\tborder-top-right-radius: 0;\r\n\t\t\t\tborder-bottom-right-radius: 0;\r\n\t\t\t\t> ul > li > a {\r\n\t\t\t\t\tborder-bottom-left-radius: $border-radius;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n    .scanner-results-wrapper {\r\n        position: absolute;\r\n        bottom: 40px;\r\n        left: 0;\r\n        transition: $transition;\r\n        z-index: 2;\r\n        background: rgba(black, .5);\r\n        border-radius: 4%;\r\n\t\tborder-bottom-left-radius: 0;\r\n\t\tcursor: pointer;\r\n        &.prompt {\r\n            top: 0;\r\n            left: 0;\r\n            right: 0;\r\n            bottom: 0;\r\n        }\r\n        .scanner-results {\r\n            width: 100px;\r\n            overflow: hidden;\r\n            padding-bottom: percentage(3.5/2.5);\r\n            border-radius: 4%;\r\n            .scanner-result {\r\n                position: absolute;\r\n                top: 0;\r\n                left: 0;\r\n                right: 0;\r\n                bottom: 0;\r\n                padding-bottom: percentage(3.5/2.5);\r\n                width: 100px;\r\n                box-shadow: $shadow;\r\n                border-radius: 4%;\r\n\t\t\t\ttransition: $transition;\r\n\t\t\t\ttransform-origin: bottom center;\r\n\t\t\t\tbox-shadow: $shadow;\r\n                .scanner-result-image {\r\n                    display: block;\r\n                    border-radius: 4%;\r\n                }\r\n                @for $i from 1 through 20 {\r\n                    &:nth-child(#{$i}) {\r\n                        margin-top: 14px * ($i - 1);\r\n                        //margin-left: 4px * ($i - 1);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        .scanner-results-count {\r\n            z-index: 10;\r\n            background: $green;\r\n            color: white;\r\n            border-radius: 999px;\r\n            position: absolute;\r\n            top: -8px;\r\n            right: -8px;\r\n            box-shadow: $shadow;\r\n            width: 32px;\r\n            height: 32px;\r\n            span {\r\n                position: absolute;\r\n                top: 50%;\r\n                left: 50%;\r\n                transform: translate(-50%, -50%);\r\n            }\r\n        }\r\n    }\r\n    .scanner-errors {\r\n        position: absolute;\r\n        top: 50%;\r\n        left: 50%;\r\n        transform: translate(-50%, -50%);\r\n        background: white;\r\n        border-radius: $border-radius;\r\n        box-shadow: $shadow;\r\n        z-index: 4;\r\n        padding: 32px;\r\n        width: 90%;\r\n        overflow: auto;\r\n        max-width: 90%;\r\n        max-height: 90%;\r\n    }\r\n    .scanner-errors-overlay {\r\n        position: absolute;\r\n        top: 0;\r\n        left: 0;\r\n        right: 0;\r\n        bottom: 0;\r\n        background: rgba(black, .8);\r\n        z-index: 3;\r\n    }\r\n}",
                    "styleUrl": "./scanner.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "titleService",
                        "type": "Title",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "scannerService",
                        "type": "ScannerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cardsService",
                        "type": "CardsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "loaderService",
                        "type": "LoaderService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "notificationService",
                        "type": "NotificationsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "titleService",
                        "type": "Title",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "scannerService",
                        "type": "ScannerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cardsService",
                        "type": "CardsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "loaderService",
                        "type": "LoaderService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "notificationService",
                        "type": "NotificationsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "showActionScan": {
                    "name": "showActionScan",
                    "getSignature": {
                        "name": "showActionScan",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 81
                    }
                },
                "showActionSnapshot": {
                    "name": "showActionSnapshot",
                    "getSignature": {
                        "name": "showActionSnapshot",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 84
                    }
                },
                "showActionMultiple": {
                    "name": "showActionMultiple",
                    "getSignature": {
                        "name": "showActionMultiple",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 87
                    }
                },
                "triggerObservable": {
                    "name": "triggerObservable",
                    "getSignature": {
                        "name": "triggerObservable",
                        "type": "",
                        "returnType": "Observable<void>",
                        "line": 404
                    }
                },
                "nextWebcamObservable": {
                    "name": "nextWebcamObservable",
                    "getSignature": {
                        "name": "nextWebcamObservable",
                        "type": "",
                        "returnType": "Observable<boolean | string>",
                        "line": 408
                    }
                }
            },
            "templateData": "<div class=\"scanner-wrapper padding\">\r\n\t<div class=\"scanner\">\r\n\t\t<div class=\"scanner-errors-overlay\" (click)=\"errors = []\" *ngIf=\"errors.length > 0\">\r\n\t\t\t<div class=\"scanner-errors\">\r\n\t\t\t\t<h4>Errors</h4>\r\n\t\t\t\t<ul>\r\n\t\t\t\t\t<li *ngFor=\"let error of errors\">{{error | json}}</li>\r\n\t\t\t\t</ul>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t<div class=\"scanner-camera-wrapper\">\r\n\r\n\t\t\t<!-- Webcam -->\r\n\t\t\t<webcam *ngIf=\"showWebcam\" [height]=\"600\" [width]=\"400\" [trigger]=\"triggerObservable\"\r\n\t\t\t\t[allowCameraSwitch]=\"allowCameraSwitch\" [switchCamera]=\"nextWebcamObservable\"\r\n\t\t\t\t[videoOptions]=\"videoOptions\" [imageQuality]=\"1\" (imageCapture)=\"handleImage($event)\"\r\n\t\t\t\t(cameraSwitched)=\"cameraWasSwitched($event)\" (initError)=\"handleInitError($event)\"></webcam>\r\n\t\t\t\r\n\t\t\t<!-- Overlay -->\t\r\n\t\t\t<div *ngIf=\"false\" class=\"scanner-camera-overlay {{scanning ? 'scanning' : ''}}\"></div>\r\n\t\t\t\r\n\t\t\t<!-- FPS -->\r\n\t\t\t<div *ngIf=\"false\" class=\"scanner-status {{scanning ? 'scanning' : ''}}\">\r\n\t\t\t\t<div class=\"scanner-fps\">fps</div>\r\n\t\t\t</div>\r\n\t\t\t\r\n\t\t\t<!-- Scan -->\r\n\t\t\t<div *ngIf=\"showActionScan\" (click)=\"scannerToggle()\" class=\"scanner-action scanner-scan {{scanning ? 'scanning' : ''}}\">\r\n\t\t\t\t<fa-icon icon=\"{{scanning ? 'pause' : 'play'}}\"></fa-icon>\r\n\t\t\t\t<span>{{scanning ? 'Stop' : 'Start'}}</span>\r\n\t\t\t</div>\r\n\r\n\t\t\t<!-- Snapshot -->\r\n\t\t\t<div *ngIf=\"showActionSnapshot\" (click)=\"runScan()\" class=\"scanner-action scanner-snapshot\">\r\n\t\t\t\t<fa-icon icon=\"camera\"></fa-icon>\r\n\t\t\t\t<span>Capture</span>\r\n\t\t\t</div>\r\n\r\n\t\t\t<!-- Mutiple -->\r\n\t\t\t<div *ngIf=\"showActionMultiple\" (click)=\"runScan()\" class=\"scanner-action scanner-multiple\">\r\n\t\t\t\t<fa-icon icon=\"bring-front\"></fa-icon>\r\n\t\t\t\t<span>Capture</span>\r\n\t\t\t</div>\r\n\r\n\t\t</div>\r\n\r\n\t\t<!-- Options -->\r\n\t\t<div class=\"scanner-options\">\r\n\t\t\t<mb-menu [menu]=\"menuScannerOptions\"></mb-menu>\r\n\t\t</div>\r\n\r\n\t\t<!-- Mode -->\r\n\t\t<div class=\"scanner-modes\">\r\n\t\t\t<mb-menu [menu]=\"menuScannerModes\"></mb-menu>\r\n\t\t</div>\r\n\r\n\t\t<!-- Result -->\r\n\t\t<div *ngIf=\"visibleMatches.length && scannerResultMenu\" class=\"scanner-result {{showResult ? 'active' : ''}}\">\r\n\t\t\t<mb-menu [menu]=\"scannerResultMenu\"></mb-menu>\r\n\t\t</div>\r\n\r\n\t\t<!-- Results -->\r\n\t\t<a [routerLink]=\"'/scanner/lists/1'\" class=\"scanner-results-wrapper animated fadeInUp {{prompt ? 'prompt' : ''}}\" *ngIf=\"visibleMatches.length > 0\">\r\n\t\t\t<div class=\"scanner-results\">\r\n\t\t\t\t<div *ngFor=\"let match of visibleMatches\" class=\"scanner-result animated zoomIn\">\r\n\t\t\t\t\t<img class=\"scanner-result-image\" [src]=\"match.images.normal\" />\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class=\"scanner-results-count\"><span>{{matches.length}}</span></div>\r\n\t\t\t</div>\r\n\t\t</a>\r\n\t</div>\r\n</div>\r\n\r\n<div class=\"flex justify-center padding\" style=\"padding-top: 0;\">\r\n\t<mb-alert [alert]=\"alert\"></mb-alert>\r\n</div>"
        },
        {
            "name": "ScannerListComponent",
            "id": "component-ScannerListComponent-81b1b81714adbd9e0f0ff31057eb305055618a872a420b1e7a475a6e50b7259b6df41e1656481d9dc869c1d32c369329739af5793ce2c0a66b7f93d69ab7b57e",
            "file": "src/app/pages/scanner/scanner-lists/scanner-list/scanner-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "mb-scanner-list",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./scanner-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "addToDeckMenuItem",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MenuItem",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Items",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "loading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "page",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "pageSize",
                    "defaultValue": "12",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "query",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "sortBy",
                    "defaultValue": "\"created_date\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "sortDirection",
                    "defaultValue": "\"desc\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 29
                }
            ],
            "methodsClass": [
                {
                    "name": "buildCardMenu",
                    "args": [
                        {
                            "name": "card",
                            "type": "Card",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 177,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "card",
                            "type": "Card",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "search",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 202,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { Card } from '@app/pages/cards/card';\r\nimport { ScannerService } from '@app/services/scanner.service';\r\nimport { Cards } from '@app/pages/cards/cards';\r\nimport { MenuItem, Menu } from '@app/controls/menu';\r\nimport { Textbox } from '@app/controls/textbox';\r\nimport { Button } from '@app/controls/button';\r\nimport { Select } from '@app/controls/select';\r\nimport { AutoUnsubscribe } from \"ngx-auto-unsubscribe\";\r\nimport { CardsService } from '@app/pages/cards';\r\nimport { ItemsHeader, ItemsFooter, ItemsFilter, ItemGroup } from '@app/layout/main';\r\nimport { Items } from '@app/layout/main/items/items';\r\nimport { Icons } from '@app/models/icons';\r\nimport { AuthenticationService } from '@app/services/auth.service';\r\nimport { ScannerList } from './scanner-list';\r\n\r\n@AutoUnsubscribe()\r\n@Component({\r\n\tselector: 'mb-scanner-list',\r\n\ttemplateUrl: './scanner-list.component.html',\r\n})\r\n\r\nexport class ScannerListComponent implements OnInit {\r\n\r\n\tquery: string = \"\";\r\n\tpage: number = 1;\r\n\tpageSize: number = 12;\r\n\tsortBy: string = \"created_date\";\r\n\tsortDirection: string = \"desc\";\r\n\tloading: boolean;\r\n\titems: Items;\r\n\taddToDeckMenuItem: MenuItem;\r\n\r\n\tconstructor(\r\n\t\tprivate authenticationService: AuthenticationService,\r\n\t\tprivate scannerService: ScannerService,\r\n\t\tprivate cardsService: CardsService) { }\r\n\r\n\tngOnDestroy() { }\r\n\tngOnInit() {\r\n\r\n\t\tlet addToMenuItem = new MenuItem({\r\n\t\t\ttext: \"Add to...\",\r\n\t\t\ticon: Icons.plus,\r\n\t\t\tclick: () => {\r\n\t\t\t\tthis.addToDeckMenuItem = new MenuItem({\r\n\t\t\t\t\ttext: \"Deck\",\r\n\t\t\t\t\ticon: Icons.deck,\r\n\t\t\t\t\tmenu: new Menu({\r\n\t\t\t\t\t\tmaxHeight: \"320px\"\r\n\t\t\t\t\t})\r\n\t\t\t\t});\r\n\t\t\t\t\r\n\t\t\t\tlet addToBinderMenuItem = new MenuItem({\r\n\t\t\t\t\ttext: \"Binder\",\r\n\t\t\t\t\ticon: Icons.binders,\r\n\t\t\t\t\tclick: () => {\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\taddToMenuItem.menu = new Menu({\r\n\t\t\t\t\tclasses: \"anchor-right\",\r\n\t\t\t\t\titems: [\r\n\t\t\t\t\t\tthis.addToDeckMenuItem,\r\n\t\t\t\t\t\taddToBinderMenuItem\r\n\t\t\t\t\t]\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\t// Initalize cards\r\n\t\tthis.items = new Items({\r\n\t\t\tbuttonNoResults: new Button({\r\n\t\t\t\ttext: \"Scan Cards\",\r\n\t\t\t\ticon: Icons.scanner,\r\n\t\t\t\troute: \"/scanner\"\r\n\t\t\t}),\r\n\t\t\theader: new ItemsHeader({\r\n\t\t\t\ttitle: \"Scanner Results\",\r\n\t\t\t\ticon: Icons.scanner,\r\n\t\t\t\tmenu: new Menu({\r\n\t\t\t\t\titems: [\r\n\t\t\t\t\t\tnew MenuItem({\r\n\t\t\t\t\t\t\tmenu: new Menu({\r\n\t\t\t\t\t\t\t\tclasses: \"anchor-right\",\r\n\t\t\t\t\t\t\t\titems: [\r\n\t\t\t\t\t\t\t\t\taddToMenuItem,\r\n\t\t\t\t\t\t\t\t\tnew MenuItem({\r\n\t\t\t\t\t\t\t\t\t\ttext: \"Clear Scans\",\r\n\t\t\t\t\t\t\t\t\t\ticon: Icons.close,\r\n\t\t\t\t\t\t\t\t\t\tclick: () => {\r\n\t\t\t\t\t\t\t\t\t\t\tthis.items.header.menu.clearActive();\r\n\t\t\t\t\t\t\t\t\t\t\tthis.items.itemGroups = [];\r\n\t\t\t\t\t\t\t\t\t\t\tthis.scannerService.clearScans();\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t})\r\n\t\t\t}),\r\n\t\t\tfilter: new ItemsFilter({\r\n\t\t\t\ttextboxSearch: new Textbox({\r\n\t\t\t\t\ticon: Icons.search,\r\n\t\t\t\t\tplaceholder: \"Search Scanner Results...\",\r\n\t\t\t\t\tclickIcon: value => {\r\n\t\t\t\t\t\tthis.query = value;\r\n\t\t\t\t\t\tthis.search();\r\n\t\t\t\t\t},\r\n\t\t\t\t\tkeydownEnter: value => {\r\n\t\t\t\t\t\tthis.query = value;\r\n\t\t\t\t\t\tthis.search();\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\tselectSortBy: new Select({\r\n\t\t\t\t\tchange: value => {\r\n\t\t\t\t\t\tthis.sortBy = value;\r\n\t\t\t\t\t\t// this.getcards();\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\tselectSortDirection: new Select({\r\n\t\t\t\t\tchange: value => {\r\n\t\t\t\t\t\tthis.sortDirection = value;\r\n\t\t\t\t\t\t// this.getCards();\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t}),\r\n\t\t\tfooter: new ItemsFooter({\r\n\t\t\t\tbuttonPrev: new Button({\r\n\t\t\t\t\tclick: () => {\r\n\t\t\t\t\t\tthis.page--;\r\n\t\t\t\t\t\t// this.getCards();\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\tbuttonNext: new Button({\r\n\t\t\t\t\tclick: () => {\r\n\t\t\t\t\t\tthis.page++;\r\n\t\t\t\t\t\t//this.nextPage();\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\tselectPageSize: new Select({\r\n\t\t\t\t\tchange: value => {\r\n\t\t\t\t\t\tthis.pageSize = +value;\r\n\t\t\t\t\t\t// this.getCards();\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\ttextboxPage: new Textbox({\r\n\t\t\t\t}),\r\n\t\t\t})\r\n\t\t});\r\n\r\n\t\t// Response from get scans request\r\n\t\tthis.scannerService.getScansObservable().subscribe(scans => {\r\n\t\t\tscans.forEach(card => {\r\n\t\t\t\tthis.buildCardMenu(card);\r\n\t\t\t});\r\n\t\t\tthis.items.itemGroups = [\r\n\t\t\t\tnew ItemGroup({\r\n\t\t\t\t\titems: scans\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t\tthis.items.header.subtitle = \"cards: \" + scans.length;\r\n\t\t\tlet price: number = 0;\r\n\t\t\tthis.items.itemGroups[0].items.forEach(card => {\r\n\t\t\t\tif (card.price) {\r\n\t\t\t\t\tprice += card.price;\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\tthis.items.header.price = price;\r\n\t\t});\r\n\r\n\t\t// Request scans\r\n\t\tthis.scannerService.getScans();\r\n\t}\r\n\r\n\tbuildCardMenu(card: Card) {\r\n\r\n\t\tlet removeMenuItem = new MenuItem({\r\n\t\t\ticon: Icons.trash,\r\n\t\t\ttext: \"Remove\",\r\n\t\t\tclick: (event: Event) => {\r\n\t\t\t\tevent.stopPropagation();\r\n\t\t\t\tthis.scannerService.removeCard(card);\r\n\t\t\t\tthis.items.itemGroups = [\r\n\t\t\t\t\tnew ItemGroup({\r\n\t\t\t\t\t\titems: this.scannerService.scannerList.cards\r\n\t\t\t\t\t})\r\n\t\t\t\t];\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tlet cardMenuItem = new MenuItem({\r\n\t\t\tmenu: new Menu({\r\n\t\t\t\tclasses: \"anchor-bottom anchor-left\",\r\n\t\t\t})\r\n\t\t});\r\n\t\t\r\n\t\tcardMenuItem.menu.items.push(removeMenuItem);\r\n\t}\r\n\r\n\tsearch() {\r\n\t\tif (this.query.length) {\r\n\t\t\tlet searchCards = this.scannerService.scannerList.cards.filter(card => {\r\n\t\t\t\treturn card.name.toLowerCase().includes(this.query.toLowerCase());\r\n\t\t\t});\r\n\t\t\tthis.items.itemGroups = [\r\n\t\t\t\tnew ItemGroup({\r\n\t\t\t\t\titems: searchCards\r\n\t\t\t\t})\r\n\t\t\t];\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.items.itemGroups = [\r\n\t\t\t\tnew ItemGroup({\r\n\t\t\t\t\titems: this.scannerService.scannerList.cards\r\n\t\t\t\t})\r\n\t\t\t];\r\n\t\t}\r\n\t}\r\n\r\n}",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authenticationService",
                        "type": "AuthenticationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "scannerService",
                        "type": "ScannerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cardsService",
                        "type": "CardsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 32,
                "jsdoctags": [
                    {
                        "name": "authenticationService",
                        "type": "AuthenticationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "scannerService",
                        "type": "ScannerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cardsService",
                        "type": "CardsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mb-items\r\n\ttitle=\"Scan Results\"\r\n\t[items]=\"items\">\r\n</mb-items>"
        },
        {
            "name": "ScannerListsComponent",
            "id": "component-ScannerListsComponent-04fc096e1d711247e09d6836c2213d2e57e02d4cfce957208b06fc395901408c17202362ac4ee3532cb839ea427d39f8669d465eaead0565faa3ee65c26c29bf",
            "file": "src/app/pages/scanner/scanner-lists/scanner-lists.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "mb-scanner-lists",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./scanner-lists.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n\tselector: 'mb-scanner-lists',\r\n\ttemplateUrl: './scanner-lists.component.html',\r\n})\r\n\r\nexport class ScannerListsComponent implements OnInit {\r\n\r\n\tconstructor() { }\r\n\r\n\tngOnInit() {\r\n\r\n\t}\r\n\r\n}",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": ""
        },
        {
            "name": "SearchComponent",
            "id": "component-SearchComponent-f7ab020f92bf886f16a50de313567eda4921b6614bc553c977271e47e9de4f2cdeca80354326d6554c0ed0e4fd57eb904a525ef53e24feee01a786a2c1877a94",
            "file": "src/app/layout/header/search/search.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "mb-search",
            "styleUrls": [
                "./search.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./search.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "query",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "textbox",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Textbox",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "clear",
                    "args": [
                        {
                            "name": "textboxEl",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "textboxEl",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "search",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ViewEncapsulation } from '@angular/core';\r\nimport { SearchService } from '@app/services/search.service';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { Card } from '@app/pages/cards/card';\r\nimport { Menu, MenuItem } from '@app/controls/menu';\r\nimport { CardsService } from '@app/services/cards.service';\r\nimport { Textbox } from '@app/controls';\r\nimport { Icons } from '@app/models';\r\n\r\n@Component({\r\n\tselector: 'mb-search',\r\n\ttemplateUrl: './search.component.html',\r\n\tstyleUrls: ['./search.component.scss'],\r\n\tencapsulation: ViewEncapsulation.None,\r\n})\r\nexport class SearchComponent implements OnInit {\r\n\tquery: string = '';\r\n\ttextbox: Textbox;\r\n\r\n\tconstructor(\r\n\t\tprivate searchService: SearchService,\r\n\t\tprivate router: Router,\r\n\t\tprivate route: ActivatedRoute,\r\n\t\tprivate cardsService: CardsService\r\n\t) {}\r\n\r\n\tngOnInit(): void {\r\n\t\t// Get query from route\r\n\t\tthis.route.queryParams.subscribe((params) => {\r\n\t\t\tif (params['quicksearch']) {\r\n\t\t\t\tthis.query = params['quicksearch'];\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tthis.textbox = new Textbox({\r\n\t\t\tplaceholder: 'Search Cards...',\r\n\t\t\ticon: Icons.search,\r\n\t\t\tclasses: 'bg-white color-dark',\r\n\t\t\tkeydownEnter: (value) => {\r\n\t\t\t\tthis.query = value;\r\n\t\t\t\tthis.search();\r\n\t\t\t},\r\n\t\t\tclickIcon: (value) => {\r\n\t\t\t\tthis.query = value;\r\n\t\t\t\tthis.search();\r\n\t\t\t},\r\n\t\t});\r\n\t}\r\n\r\n\tsearch() {\r\n\t\tthis.router.navigate(['/cards'], {\r\n\t\t\tqueryParams: {\r\n\t\t\t\tsearch: this.query,\r\n\t\t\t},\r\n\t\t});\r\n\t}\r\n\r\n\tclear(textboxEl: HTMLElement) {\r\n\t\tthis.query = '';\r\n\t\t// Set focus\r\n\t\ttextboxEl.focus();\r\n\t}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"settings\";",
                    "styleUrl": "./search.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "searchService",
                        "type": "SearchService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cardsService",
                        "type": "CardsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "searchService",
                        "type": "SearchService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cardsService",
                        "type": "CardsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"search relative\">\r\n\t<!-- <input\r\n\t\t#textboxEl\r\n\t\ttype=\"text\"\r\n\t\tplaceholder=\"Search...\"\r\n\t\t[(ngModel)]=\"query\"\r\n\t\t(keydown.enter)=\"search()\" />\r\n\t<fa-icon\r\n\t\t*ngIf=\"!query.length\"\r\n\t\ticon=\"search\"\r\n\t\t(click)=\"search()\">\r\n\t</fa-icon>\r\n\t<fa-icon \r\n\t\t*ngIf=\"query.length\"\r\n\t\ticon=\"times\"\r\n\t\t(click)=\"clear(textboxEl)\">\r\n\t</fa-icon> -->\r\n\t<mb-textbox [textbox]=\"textbox\"></mb-textbox>\r\n</div>"
        },
        {
            "name": "SelectComponent",
            "id": "component-SelectComponent-a0eaf36ed70f1276d90f5968a61a026759dc2c635f1e2df0cfc0f9bb578d0c64902bc4c7ead704ccc9a1c7d2befd271898c4dca339d6ab7a81eb053fda41f3d0",
            "file": "src/app/controls/select/select.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => SelectComponent), multi: true,\n}",
                    "type": "component"
                }
            ],
            "selector": "mb-select",
            "styleUrls": [
                "./select.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./select.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "select",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 53,
                    "type": "Select",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "textboxSearch",
                    "defaultValue": "new Textbox({\r\n\t\tplaceholder: 'Search...',\r\n\t\ttype: 'search',\r\n\t\ticon: Icons.search,\r\n\t\tsize: Size.small,\r\n\t\tkeyup: (_value) => {\r\n\t\t\tthis.select.searchValue = _value;\r\n\t\t},\r\n\t})",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Textbox",
                    "optional": false,
                    "description": "",
                    "line": 55
                }
            ],
            "methodsClass": [
                {
                    "name": "change",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "click",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "clickOutside",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectOption",
                    "args": [
                        {
                            "name": "option",
                            "type": "SelectOption",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "option",
                            "type": "SelectOption",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "unselectOption",
                    "args": [
                        {
                            "name": "option",
                            "type": "SelectOption",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "option",
                            "type": "SelectOption",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "_value",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "_value",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit, forwardRef } from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { Icons, Size } from '@app/models';\r\n\r\nimport { Select } from './select';\r\nimport { SelectOption } from '@app/controls';\r\nimport { Textbox } from './../textbox/textbox';\r\n\r\n@Component({\r\n\tselector: 'mb-select',\r\n\ttemplateUrl: './select.component.html',\r\n\tstyleUrls: ['./select.component.scss'],\r\n\r\n\tproviders: [\r\n\t\t{\r\n\t\t\tprovide: NG_VALUE_ACCESSOR,\r\n\t\t\tuseExisting: forwardRef(() => SelectComponent),\r\n\t\t\tmulti: true,\r\n\t\t},\r\n\t],\r\n})\r\nexport class SelectComponent implements ControlValueAccessor {\r\n\tconstructor() {}\r\n\r\n\tonChange: any = () => {};\r\n\tonTouched: any = () => {};\r\n\tregisterOnChange(fn) {\r\n\t\tthis.onChange = fn;\r\n\t}\r\n\tregisterOnTouched(fn) {\r\n\t\tthis.onTouched = fn;\r\n\t}\r\n\twriteValue(_value) {\r\n\t\tthis.value = _value;\r\n\t}\r\n\tget value() {\r\n\t\treturn this.select.value;\r\n\t}\r\n\tset value(_value) {\r\n\t\tthis.select.value = _value;\r\n\t\tthis.select.options.forEach((option) => {\r\n\t\t\toption.selected = option.value === _value;\r\n\t\t});\r\n\t\tthis.select.optionGroups.forEach((group) => {\r\n\t\t\tgroup.options.forEach((option) => {\r\n\t\t\t\toption.selected = option.value === _value;\r\n\t\t\t});\r\n\t\t});\r\n\t\tthis.onChange(_value);\r\n\t\tthis.onTouched();\r\n\t}\r\n\r\n\t@Input() select: Select;\r\n\r\n\ttextboxSearch: Textbox = new Textbox({\r\n\t\tplaceholder: 'Search...',\r\n\t\ttype: 'search',\r\n\t\ticon: Icons.search,\r\n\t\tsize: Size.small,\r\n\t\tkeyup: (_value) => {\r\n\t\t\tthis.select.searchValue = _value;\r\n\t\t},\r\n\t});\r\n\r\n\tclick() {\r\n\t\tif (this.select.multiple || !this.select.value.length)\r\n\t\t\tthis.select.open = true;\r\n\t}\r\n\r\n\tclickOutside() {\r\n\t\tthis.select.open = false;\r\n\t}\r\n\r\n\tchange() {\r\n\t\tif (this.select.change) this.select.change(this.select.value);\r\n\t}\r\n\r\n\tselectOption(option: SelectOption) {\r\n\t\toption.selected = true;\r\n\t}\r\n\r\n\tunselectOption(option: SelectOption) {\r\n\t\toption.selected = false;\r\n\t}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"settings\";\r\n\r\n.select {\r\n\tposition: relative;\r\n\tcolor: $font-color;\r\n\tfa-icon {\r\n\t\tposition: absolute;\r\n\t\ttop: 50%;\r\n\t\ttransform: translateY(-50%);\r\n\t\tright: $spacing;\r\n\t\tpointer-events: none;\r\n\t}\r\n\t&.dark {\r\n\t\tselect {\r\n\t\t\tborder: $border-strong;\r\n\t\t}\r\n\t}\r\n}\r\nselect {\r\n\theight: 40px;\r\n\tappearance: none;\r\n\tborder: $border;\r\n\tpadding: $spacing ($spacing * 1.5);\r\n\tpadding-right: 24px;\r\n\tborder-radius: $border-radius;\r\n\ttransition: $transition;\r\n\twidth: 100%;\r\n\tfont-size: $font-size;\r\n\tcolor: $font-color;\r\n\toutline: 0 !important;\r\n\tbackground: $input-bg;\r\n\tcursor: pointer;\r\n\toption,\r\n\toptgroup {\r\n\t\tcolor: $font-color;\r\n\t}\r\n\t&:focus {\r\n\t\tbox-shadow: $shadow-focus, $shadow-focus-inset;\r\n\t\toutline: 0 !important;\r\n\t\tborder-color: $primary-color;\r\n\t}\r\n\t&:hover {\r\n\t\tborder-color: $primary-color;\r\n\t}\r\n\t&:active {\r\n\t\toutline: 0 !important;\r\n\t}\r\n\t&.small {\r\n\t\theight: 28px;\r\n\t\tpadding: 0 12px;\r\n\t}\r\n}\r\n.select-advanced {\r\n\tmin-height: 40px;\r\n\tborder: $border;\r\n\tborder-radius: $border-radius;\r\n\tposition: relative;\r\n\tcursor: pointer;\r\n\tbackground: $input-bg;\r\n\tuser-select: none;\r\n\t&:hover {\r\n\t\tborder-color: $primary-color;\r\n\t}\r\n\t&:focus {\r\n\t\tborder-color: $primary-color;\r\n\t\tbox-shadow: $shadow-focus, $shadow-focus-inset;\r\n\t}\r\n\t> fa-icon {\r\n\t\tposition: absolute;\r\n\t\ttop: 50%;\r\n\t\tright: 16px;\r\n\t\ttransform: translateY(-50%);\r\n\t}\r\n\t.placeholder {\r\n\t\tline-height: 38px;\r\n\t\tpadding: 0 16px;\r\n\t\topacity: 0.5;\r\n\t}\r\n\t.selected-options {\r\n\t\tdisplay: flex;\r\n\t\tflex-wrap: wrap;\r\n\t\tpadding: 3px 32px 0 3px;\r\n\t\t.select-option {\r\n\t\t\tpadding: 6px 10px;\r\n\t\t\tborder-radius: $border-radius;\r\n\t\t\tbackground: $input-bg;\r\n\t\t\tmargin-right: 3px;\r\n\t\t\tmargin-bottom: 3px;\r\n\t\t\t.text {\r\n\t\t\t\tpadding-right: 8px;\r\n\t\t\t}\r\n\t\t\t[icon=\"times\"] {\r\n\t\t\t\theight: 14px;\r\n\t\t\t\t&:hover {\r\n\t\t\t\t\tcolor: $primary-color;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t.available-options {\r\n\t\tposition: absolute;\r\n\t\ttop: 100%;\r\n\t\tleft: -1px;\r\n\t\tright: -1px;\r\n\t\tbackground: $main-bg;\r\n\t\tbox-shadow: $shadow;\r\n\t\tborder-radius: $border-radius;\r\n\t\toverflow: hidden;\r\n\t\tmax-height: 300px;\r\n\t\tborder: $border;\r\n\t\t.select-option {\r\n\t\t\tpadding: 8px 16px;\r\n\t\t\tbackground: $input-bg;\r\n\t\t\t&:hover {\r\n\t\t\t\tbackground: $primary-color;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t.search-options {\r\n\t\tpadding: 8px 0;\r\n\t\t&::ng-deep .textbox {\r\n\t\t\tborder: 0;\r\n\t\t\tbackground: transparent;\r\n\t\t\toutline: 0 !important;\r\n\t\t\tbox-shadow: none !important;\r\n\t\t}\r\n\t}\r\n\t.select-option {\r\n\t\tdisplay: flex;\r\n\t\talign-items: center;\r\n\t\ttransition: $transition;\r\n\t\tcursor: pointer;\r\n\t\t&:hover {\r\n\t\t\tbackground: $primary-color;\r\n\t\t}\r\n\t\t.text {\r\n\t\t\tflex: 1;\r\n\t\t\tpadding-left: 8px;\r\n\t\t}\r\n\t\tfa-icon {\r\n\t\t\twidth: 16px;\r\n\t\t}\r\n\t}\r\n}\r\n",
                    "styleUrl": "./select.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 22
            },
            "implements": [
                "ControlValueAccessor"
            ],
            "accessors": {
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "_value",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 39,
                        "jsdoctags": [
                            {
                                "name": "_value",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "",
                        "line": 36
                    }
                }
            },
            "templateData": "<label *ngIf=\"select.label\" class=\"label\">\r\n\t{{ select.label }}\r\n</label>\r\n\r\n<div *ngIf=\"!select.advancedSelect\" class=\"select\" [class.dark]=\"select.dark\">\r\n\t<fa-icon icon=\"caret-down\"></fa-icon>\r\n\t<select\r\n\t\t[(ngModel)]=\"value\"\r\n\t\t(change)=\"change()\"\r\n\t\tclass=\"{{ select.classes ? select.classes : '' }}\"\r\n\t>\r\n\t\t<option\r\n\t\t\t*ngFor=\"let option of select.options\"\r\n\t\t\t[ngValue]=\"option.value\"\r\n\t\t\t[value]=\"option.value\"\r\n\t\t>\r\n\t\t\t{{ option.text }}\r\n\t\t</option>\r\n\t\t<optgroup\r\n\t\t\t*ngFor=\"let optionGroup of select.optionGroups\"\r\n\t\t\t[label]=\"optionGroup.label\"\r\n\t\t>\r\n\t\t\t<option\r\n\t\t\t\t*ngFor=\"let option of optionGroup.options\"\r\n\t\t\t\t[ngValue]=\"option.value\"\r\n\t\t\t\t[value]=\"option.value\"\r\n\t\t\t>\r\n\t\t\t\t{{ option.text }}\r\n\t\t\t</option>\r\n\t\t</optgroup>\r\n\t</select>\r\n</div>\r\n\r\n<div\r\n\t*ngIf=\"select.advancedSelect\"\r\n\tclass=\"select-advanced\"\r\n\t(click)=\"click()\"\r\n\t(clickOutside)=\"clickOutside()\"\r\n>\r\n\t<div class=\"placeholder\" *ngIf=\"select.getSelectedOptions().length <= 0\">\r\n\t\t{{ select.placeholder }}\r\n\t</div>\r\n\t<div\r\n\t\tclass=\"selected-options\"\r\n\t\t*ngIf=\"select.getSelectedOptions().length > 0\"\r\n\t>\r\n\t\t<div\r\n\t\t\tclass=\"select-option\"\r\n\t\t\t*ngFor=\"let option of select.getSelectedOptions()\"\r\n\t\t>\r\n\t\t\t<fa-icon [icon]=\"option.icon\"></fa-icon>\r\n\t\t\t<span class=\"text\">{{ option.text }}</span>\r\n\t\t\t<fa-icon (click)=\"unselectOption(option)\" icon=\"times\"></fa-icon>\r\n\t\t</div>\r\n\t</div>\r\n\t<div class=\"available-options\" *ngIf=\"select.open\">\r\n\t\t<div class=\"search-options\">\r\n\t\t\t<mb-textbox [textbox]=\"textboxSearch\"></mb-textbox>\r\n\t\t</div>\r\n\t\t<div\r\n\t\t\tclass=\"select-option\"\r\n\t\t\t*ngFor=\"let option of select.getUnselectedOptions()\"\r\n\t\t\t(click)=\"selectOption(option)\"\r\n\t\t>\r\n\t\t\t<fa-icon [icon]=\"option.icon\"></fa-icon>\r\n\t\t\t<span class=\"text\">{{ option.text }}</span>\r\n\t\t</div>\r\n\t</div>\r\n\t<fa-icon icon=\"caret-down\"></fa-icon>\r\n</div>\r\n"
        },
        {
            "name": "SignInComponent",
            "id": "component-SignInComponent-983fb61e1e99dc990b0741ca41611c6af7ada72a88fc14cd958283c163ba679d96299a81e12911bdaacb29831a684874151d88742e98a6142c9c004fb71c5853",
            "file": "src/app/pages/auth/signin/signin.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "mb-signin",
            "styleUrls": [
                "./signin.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./signin.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "buttonSubmit",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Button",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "rememberMeCheckbox",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Checkbox",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "returnUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "textboxEmail",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Textbox",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "textboxPassword",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Textbox",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "submit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { Textbox } from '@app/controls/textbox/textbox';\r\nimport { Button, ButtonType } from '@app/controls/button';\r\nimport { Checkbox } from '@app/controls/checkbox';\r\nimport { AuthenticationService } from '@app/services/auth.service';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { first } from 'rxjs/operators';\r\nimport { NotificationsService, Notification, AlertType } from '@app/controls';\r\n\r\n@Component({\r\n\tselector: 'mb-signin',\r\n\ttemplateUrl: './signin.component.html',\r\n\tstyleUrls: ['./signin.component.scss'],\r\n})\r\nexport class SignInComponent implements OnInit {\r\n\tloading: boolean = false;\r\n\treturnUrl: string;\r\n\tform: FormGroup;\r\n\ttextboxEmail: Textbox;\r\n\ttextboxPassword: Textbox;\r\n\trememberMeCheckbox: Checkbox;\r\n\tbuttonSubmit: Button;\r\n\r\n\tconstructor(\r\n\t\tprivate notificationService: NotificationsService,\r\n\t\tprivate formBuilder: FormBuilder,\r\n\t\tprivate router: Router,\r\n\t\tprivate route: ActivatedRoute,\r\n\t\tprivate authenticationService: AuthenticationService\r\n\t) {\r\n\t\tif (this.authenticationService.currentUserValue) {\r\n\t\t\tthis.router.navigateByUrl('/');\r\n\t\t}\r\n\t}\r\n\r\n\tngOnInit(): void {\r\n\t\tthis.form = this.formBuilder.group({\r\n\t\t\temailControl: ['', Validators.required],\r\n\t\t\tpasswordControl: ['', Validators.required],\r\n\t\t\trememberMeControl: [''],\r\n\t\t});\r\n\t\tthis.textboxEmail = new Textbox({\r\n\t\t\tlabel: 'Email',\r\n\t\t});\r\n\t\tthis.textboxPassword = new Textbox({\r\n\t\t\tlabel: 'Password',\r\n\t\t\ttype: 'password',\r\n\t\t});\r\n\t\tthis.rememberMeCheckbox = new Checkbox({\r\n\t\t\ttext: 'Remember Me',\r\n\t\t\tid: 'rememberMe',\r\n\t\t});\r\n\t\tthis.buttonSubmit = new Button({\r\n\t\t\ttext: 'Sign In',\r\n\t\t\ttype: ButtonType.submit,\r\n\t\t});\r\n\r\n\t\t// Get return url from route params, else default to /\r\n\t\tthis.returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/';\r\n\t}\r\n\r\n\tsubmit() {\r\n\t\tif (this.form.invalid) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis.loading = true;\r\n\t\tthis.authenticationService\r\n\t\t\t.login(\r\n\t\t\t\tthis.form.controls.emailControl.value,\r\n\t\t\t\tthis.form.controls.passwordControl.value\r\n\t\t\t)\r\n\t\t\t.pipe(first())\r\n\t\t\t.subscribe(\r\n\t\t\t\t(data) => {\r\n\t\t\t\t\tthis.router.navigateByUrl(this.returnUrl);\r\n\t\t\t\t\tthis.notificationService.addNotifications([\r\n\t\t\t\t\t\tnew Notification({\r\n\t\t\t\t\t\t\talertType: AlertType.success,\r\n\t\t\t\t\t\t\tmessage: 'Successfully signed in',\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t]);\r\n\t\t\t\t},\r\n\t\t\t\t(error) => {\r\n\t\t\t\t\tthis.loading = false;\r\n\t\t\t\t}\r\n\t\t\t);\r\n\t}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./signin.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "notificationService",
                        "type": "NotificationsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authenticationService",
                        "type": "AuthenticationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "notificationService",
                        "type": "NotificationsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authenticationService",
                        "type": "AuthenticationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<form\r\n\tclass=\"padding-y-8 flex vertical flex-center\"\r\n\t[formGroup]=\"form\"\r\n\t(ngSubmit)=\"submit()\"\r\n>\r\n\t<div class=\"flex vertical padded-2\">\r\n\t\t<div>\r\n\t\t\t<h1>Sign In</h1>\r\n\t\t</div>\r\n\t\t<div>\r\n\t\t\t<mb-textbox\r\n\t\t\t\t[formControl]=\"form.controls.emailControl\"\r\n\t\t\t\t[textbox]=\"textboxEmail\"\r\n\t\t\t></mb-textbox>\r\n\t\t</div>\r\n\t\t<div>\r\n\t\t\t<mb-textbox\r\n\t\t\t\t[formControl]=\"form.controls.passwordControl\"\r\n\t\t\t\t[textbox]=\"textboxPassword\"\r\n\t\t\t></mb-textbox>\r\n\t\t</div>\r\n\t\t<!-- <div>\r\n\t\t\t<mb-checkbox\r\n\t\t\t\t[formControl]=\"form.controls.rememberMeControl\"\r\n\t\t\t\t[checkbox]=\"rememberMeCheckbox\"\r\n\t\t\t></mb-checkbox>\r\n\t\t</div> -->\r\n\t\t<div>\r\n\t\t\t<div class=\"flex padded flex-center\">\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<mb-button [button]=\"buttonSubmit\"></mb-button>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<a routerLink=\"/forgot\">Forgot Password?</a>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n</form>\r\n"
        },
        {
            "name": "SignUpComponent",
            "id": "component-SignUpComponent-0bf4ed158a101ec55a2f5d40ae38aac46ba45310a2534e1a00c30ece56ea14f574d6dd09f2ea64ed4cfac10f35fc5896b990d34bc392d7144511ff6c74283b2f",
            "file": "src/app/pages/auth/signup/signup.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "mb-signup",
            "styleUrls": [
                "./signup.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./signup.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "buttonSubmit",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Button",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "returnUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "textboxConfirmPassword",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Textbox",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "textboxEmail",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Textbox",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "textboxPassword",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Textbox",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "textboxUsername",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Textbox",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "submit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { Textbox } from '@app/controls/textbox/textbox';\r\nimport { Button, ButtonType } from '@app/controls/button';\r\nimport { AuthenticationService } from '@app/services/auth.service';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { first } from 'rxjs/operators';\r\nimport { LoaderService } from '@app/controls';\r\n\r\n@Component({\r\n\tselector: 'mb-signup',\r\n\ttemplateUrl: './signup.component.html',\r\n\tstyleUrls: ['./signup.component.scss']\r\n})\r\n\r\nexport class SignUpComponent implements OnInit {\r\n\r\n\treturnUrl: string;\r\n\tform: FormGroup;\r\n\ttextboxEmail: Textbox;\r\n\ttextboxUsername: Textbox;\r\n\ttextboxPassword: Textbox;\r\n\ttextboxConfirmPassword: Textbox;\r\n\tbuttonSubmit: Button;\r\n\r\n\tconstructor(\r\n\t\tprivate loaderService: LoaderService,\r\n\t\tprivate formBuilder: FormBuilder,\r\n\t\tprivate router: Router,\r\n\t\tprivate route: ActivatedRoute,\r\n\t\tprivate authenticationService: AuthenticationService) {\r\n\t\tif (this.authenticationService.currentUserValue) {\r\n\t\t\tthis.router.navigateByUrl(\"/\");\r\n\t\t}\r\n\t}\r\n\r\n\tngOnInit(): void {\r\n\t\tthis.form = this.formBuilder.group({\r\n\t\t\temailControl: ['', Validators.required],\r\n\t\t\tusernameControl: ['', Validators.required],\r\n\t\t\tpasswordControl: ['', Validators.required],\r\n\t\t\tpasswordConfirmControl: ['', Validators.required]\r\n\t\t});\r\n\t\tthis.textboxEmail = new Textbox({\r\n\t\t\tlabel: \"Email\",\r\n\t\t\ttype: \"email\"\r\n\t\t});\r\n\t\tthis.textboxUsername = new Textbox({\r\n\t\t\tlabel: \"Username\"\r\n\t\t});\r\n\t\tthis.textboxPassword = new Textbox({\r\n\t\t\tlabel: \"Password\",\r\n\t\t\ttype: \"password\"\r\n\t\t});\r\n\t\tthis.textboxConfirmPassword = new Textbox({\r\n\t\t\tlabel: \"Confirm Password\",\r\n\t\t\ttype: \"password\"\r\n\t\t});\r\n\t\tthis.buttonSubmit = new Button({\r\n\t\t\ttext: \"Sign Up\",\r\n\t\t\ttype: ButtonType.submit\r\n\t\t});\r\n\r\n\t\t// Get return url from route params, else default to /\r\n\t\tthis.returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/';\r\n\t}\r\n\r\n\tsubmit() {\r\n\t\tif (this.form.invalid) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis.loaderService.addItemLoading(\"register\");\r\n\t\tthis.authenticationService.register(\r\n\t\t\tthis.form.controls.emailControl.value,\r\n\t\t\tthis.form.controls.usernameControl.value,\r\n\t\t\tthis.form.controls.passwordControl.value,\r\n\t\t\tthis.form.controls.passwordConfirmControl.value)\r\n\t\t\t.pipe(first())\r\n\t\t\t.subscribe(\r\n\t\t\t\tdata => {\r\n\t\t\t\t\tthis.router.navigateByUrl(this.returnUrl);\r\n\t\t\t\t},\r\n\t\t\t\terror => {\r\n\t\t\t\t\tthis.loaderService.clearItemLoading(\"register\");\r\n\t\t\t\t}\r\n\t\t\t)\r\n\t}\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./signup.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "loaderService",
                        "type": "LoaderService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authenticationService",
                        "type": "AuthenticationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "loaderService",
                        "type": "LoaderService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authenticationService",
                        "type": "AuthenticationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div id=\"page-register\">\r\n    <form class=\"padding-large\" [formGroup]=\"form\" (ngSubmit)=\"submit()\">\r\n        <div class=\"flex vertical padded flex-center\">\r\n\t\t\t<div>\r\n\t\t\t\t<h1>Sign Up</h1>\r\n\t\t\t</div>\r\n            <div>\r\n                <mb-textbox [formControl]=\"form.controls.emailControl\" [textbox]=\"textboxEmail\"></mb-textbox>\r\n            </div>\r\n            <div>\r\n                <mb-textbox [formControl]=\"form.controls.usernameControl\" [textbox]=\"textboxUsername\"></mb-textbox>\r\n            </div>\r\n            <div>\r\n                <mb-textbox [formControl]=\"form.controls.passwordControl\" [textbox]=\"textboxPassword\"></mb-textbox>\r\n            </div>\r\n            <div>\r\n                <mb-textbox [formControl]=\"form.controls.passwordConfirmControl\" [textbox]=\"textboxConfirmPassword\"></mb-textbox>\r\n            </div>\r\n            <div>\r\n                <mb-button [button]=\"buttonSubmit\"></mb-button>\r\n            </div>\r\n        </div>\r\n    </form>\r\n</div>"
        },
        {
            "name": "TagComponent",
            "id": "component-TagComponent-5435b45e9850698ff8a01ca6723d24e0d1220be0b466d986de312f053c16debf55289f7b775c0751459daa46773e8a3c2fc1901454ba28893fd7a2df260360a2",
            "file": "src/app/controls/tag/tag.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "mb-tag",
            "styleUrls": [
                "./tag.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "tag.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "tag",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "Tag",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input } from '@angular/core';\r\nimport { Tag } from './tag';\r\n\r\n@Component({\r\n\tselector: 'mb-tag',\r\n\ttemplateUrl: 'tag.component.html',\r\n\tstyleUrls: ['./tag.component.scss']\r\n})\r\n\r\nexport class TagComponent implements OnInit {\r\n\r\n\t@Input() tag: Tag;\r\n\r\n\tconstructor() { }\r\n\r\n\tngOnInit() { }\r\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"settings\";\r\n\r\n.tag {\r\n\tdisplay: flex;\r\n\tpadding: 4px 6px;\r\n\ttext-transform: uppercase;\r\n\tfont-size: 12px;\r\n\tline-height: 1;\r\n\tbackground: $panel-bg;\r\n\tborder-radius: $border-radius;\r\n\talign-items: center;\r\n\tbox-shadow: $shadow-sheen;\r\n\tposition: relative;\r\n\t&.primary {\r\n\t\tbackground: $primary-color;\r\n\t\tcolor: white;\r\n\t}\r\n\t&.transparent {\r\n\t\tbackground: transparent;\r\n\t\tcolor: inherit;\r\n\t}\r\n\r\n\t&.card-rarity {\r\n\t\ttransition: $transition;\r\n\t\tcursor: pointer;\r\n\t\t&:hover {\r\n\t\t\tbox-shadow: $shadow-sheen, $shadow-focus;\r\n\t\t}\r\n\t}\r\n\r\n\tfa-icon {\r\n\t\t+ span {\r\n\t\t\tpadding-left: $spacing / 2;\r\n\t\t}\r\n\t}\r\n\r\n\t// Sheen\r\n\t&:after {\r\n\t\tcontent: \"\";\r\n\t\tborder-radius: $border-radius;\r\n\t\twidth: 100%;\r\n\t\theight: 100%;\r\n\t\tbox-shadow: $shadow-sheen;\r\n\t\tz-index: 10;\r\n\t\tposition: absolute;\r\n\t\tborder: $border-strong;\r\n\t\ttop: 0;\r\n\t\tleft: 0;\r\n\t}\r\n\r\n\t$promo: black;\r\n\t$common: grey;\r\n\t$uncommon: darken(white, 10%);\r\n\t$rare-non-holo: #119100;\r\n\t$rare-holo: #004180;\r\n\t$rare-ultra: #5d1e89;\r\n\t$rare-secret: #bb6005;\r\n\r\n\t$rarity: (\r\n\t\t\"promo\": $promo,\r\n\t\t\"common\": $common,\r\n\t\t\"uncommon\": $uncommon,\r\n\t\t\"rare\": $rare-non-holo,\r\n\t\t\"rare-holo\": $rare-holo,\r\n\t\t\"rare-ultra\": $rare-ultra,\r\n\t\t\"rare-secret\": $rare-secret,\r\n\t\t\"rare-prime\": $rare-ultra,\r\n\t);\r\n\r\n\t@each $rarity-name, $rarity-color in $rarity {\r\n\t\t&.#{$rarity-name} {\r\n\t\t\tbackground: $rarity-color;\r\n\t\t\tcolor: lighten($rarity-color, 50%);\r\n\t\t\t//box-shadow: 0 0 8px 4px rgba(lighten($rarity-color, 10%), .5);\r\n\t\t\tborder-color: darken($rarity-color, 10%);\r\n\t\t\t&:before {\r\n\t\t\t\tbackground-color: lighten($rarity-color, 50%);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t&.common {\r\n\t\t&:before {\r\n\t\t\tcontent: \"\";\r\n\t\t\tborder-radius: 50%;\r\n\t\t\twidth: 10px;\r\n\t\t\theight: 10px;\r\n\t\t\tdisplay: inline-block;\r\n\t\t\tmargin-right: 4px;\r\n\t\t}\r\n\t}\r\n\t&.uncommon {\r\n\t\tcolor: rgba(black, 0.5);\r\n\t\t//box-shadow: 0 0 8px 4px rgba($font-color, .1);\r\n\t\t&:before {\r\n\t\t\tcontent: \"\";\r\n\t\t\tdisplay: inline-block;\r\n\t\t\twidth: 8px;\r\n\t\t\theight: 8px;\r\n\t\t\ttransform: rotate(45deg);\r\n\t\t\tbackground: rgba(black, 0.5);\r\n\t\t}\r\n\t\tspan {\r\n\t\t\tmargin-left: 6px;\r\n\t\t}\r\n\t}\r\n\t&.promo,\r\n\t&.rare,\r\n\t&.rare-ultra,\r\n\t&.rare-holo {\r\n\t\t&:before {\r\n\t\t\tcontent: \"\";\r\n\t\t\tdisplay: inline-block;\r\n\t\t\tmargin-right: 4px;\r\n\t\t\twidth: 12px;\r\n\t\t\theight: 12px;\r\n\t\t\tclip-path: polygon(\r\n\t\t\t\t50% 0%,\r\n\t\t\t\t61% 35%,\r\n\t\t\t\t98% 35%,\r\n\t\t\t\t68% 57%,\r\n\t\t\t\t79% 91%,\r\n\t\t\t\t50% 70%,\r\n\t\t\t\t21% 91%,\r\n\t\t\t\t32% 57%,\r\n\t\t\t\t2% 35%,\r\n\t\t\t\t39% 35%\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\t&.promo {\r\n\t\tcolor: white;\r\n\t\topacity: 0.8;\r\n\t\t&:before {\r\n\t\t\tbackground: white;\r\n\t\t}\r\n\t}\r\n\t&.rare-secret {\r\n\t\t&:before {\r\n\t\t\tcontent: \"\";\r\n\t\t\tdisplay: inline-block;\r\n\t\t\tmargin-right: 4px;\r\n\t\t\twidth: 12px;\r\n\t\t\theight: 12px;\r\n\t\t\tclip-path: polygon(\r\n\t\t\t\t50% 0%,\r\n\t\t\t\t61% 35%,\r\n\t\t\t\t98% 35%,\r\n\t\t\t\t68% 57%,\r\n\t\t\t\t79% 91%,\r\n\t\t\t\t50% 70%,\r\n\t\t\t\t21% 91%,\r\n\t\t\t\t32% 57%,\r\n\t\t\t\t2% 35%,\r\n\t\t\t\t39% 35%\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\t&.amazing-rare {\r\n\t\tbackground: conic-gradient(\r\n\t\t\t#fae521,\r\n\t\t\t#ef3594,\r\n\t\t\t#60469c,\r\n\t\t\t#3dc4e6,\r\n\t\t\t#42b64a,\r\n\t\t\t#fae521\r\n\t\t);\r\n\t\tcolor: white;\r\n\t\ttext-shadow: $text-shadow;\r\n\t\t//box-shadow: 0 0 8px 4px rgba(#42B64A, .5);\r\n\t\tpadding: 5px 7px;\r\n\t\t&:before {\r\n\t\t\tcontent: \"\";\r\n\t\t\tdisplay: inline-block;\r\n\t\t\tmargin-right: 4px;\r\n\t\t\twidth: 12px;\r\n\t\t\theight: 12px;\r\n\t\t\tbackground: white;\r\n\t\t\tfilter: drop-shadow($text-shadow);\r\n\t\t\tclip-path: polygon(\r\n\t\t\t\t50% 0%,\r\n\t\t\t\t61% 35%,\r\n\t\t\t\t98% 35%,\r\n\t\t\t\t68% 57%,\r\n\t\t\t\t79% 91%,\r\n\t\t\t\t50% 70%,\r\n\t\t\t\t21% 91%,\r\n\t\t\t\t32% 57%,\r\n\t\t\t\t2% 35%,\r\n\t\t\t\t39% 35%\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\t&.rare-rainbow {\r\n\t\tbackground: linear-gradient(\r\n\t\t\tto left,\r\n\t\t\t#fae521,\r\n\t\t\t#ef3594,\r\n\t\t\t#60469c,\r\n\t\t\t#3dc4e6,\r\n\t\t\t#42b64a,\r\n\t\t\t#fae521\r\n\t\t);\r\n\t\tcolor: white;\r\n\t\ttext-shadow: $text-shadow;\r\n\t\t//box-shadow: 0 0 8px 4px rgba(#42B64A, .5);\r\n\t\tpadding: 5px 7px;\r\n\t\t&:before {\r\n\t\t\tcontent: \"\";\r\n\t\t\tdisplay: inline-block;\r\n\t\t\tmargin-right: 4px;\r\n\t\t\twidth: 12px;\r\n\t\t\theight: 12px;\r\n\t\t\tbackground: white;\r\n\t\t\tfilter: drop-shadow($text-shadow);\r\n\t\t\tclip-path: polygon(\r\n\t\t\t\t50% 0%,\r\n\t\t\t\t61% 35%,\r\n\t\t\t\t98% 35%,\r\n\t\t\t\t68% 57%,\r\n\t\t\t\t79% 91%,\r\n\t\t\t\t50% 70%,\r\n\t\t\t\t21% 91%,\r\n\t\t\t\t32% 57%,\r\n\t\t\t\t2% 35%,\r\n\t\t\t\t39% 35%\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n}\r\n",
                    "styleUrl": "./tag.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 12
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div\r\n\tclass=\"tag {{tag.classes}}\" \r\n\t[routerLink]=\"tag.route\">\r\n\t<fa-icon\r\n\t\t*ngIf=\"tag.icon\"\r\n\t\t[icon]=\"tag.icon\">\r\n\t</fa-icon>\r\n\t<span>{{tag.text}}</span>\r\n</div>"
        },
        {
            "name": "TextareaComponent",
            "id": "component-TextareaComponent-16951d1d7dd48796d3e43820151407cfaaf9993e984c3c333ece2d8c4481422ff74765dfddec071bca6f11aac5663327324f6bd0d09e5be5b4fbbc1c41908440",
            "file": "src/app/controls/textarea/textarea.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => TextareaComponent), multi: true,\n}",
                    "type": "component"
                }
            ],
            "selector": "mb-textarea",
            "styleUrls": [
                "./textarea.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./textarea.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "textarea",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 47,
                    "type": "Textarea",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "clickIcon",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 49,
                    "type": "EventEmitter<string>"
                },
                {
                    "name": "outputKeydownEnter",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 48,
                    "type": "EventEmitter<string>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 28
                }
            ],
            "methodsClass": [
                {
                    "name": "change",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "keydownEnter",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "_value",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "_value",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n\tComponent,\r\n\tEventEmitter,\r\n\tInput,\r\n\tOnInit,\r\n\tOutput,\r\n\tforwardRef,\r\n} from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\n\r\nimport { Textarea } from './textarea';\r\n\r\n@Component({\r\n\tselector: 'mb-textarea',\r\n\ttemplateUrl: './textarea.component.html',\r\n\tstyleUrls: ['./textarea.component.scss'],\r\n\r\n\tproviders: [\r\n\t\t{\r\n\t\t\tprovide: NG_VALUE_ACCESSOR,\r\n\t\t\tuseExisting: forwardRef(() => TextareaComponent),\r\n\t\t\tmulti: true,\r\n\t\t},\r\n\t],\r\n})\r\nexport class TextareaComponent implements ControlValueAccessor {\r\n\tonChange: any = () => {};\r\n\tonTouched: any = () => {};\r\n\tregisterOnChange(fn) {\r\n\t\tthis.onChange = fn;\r\n\t}\r\n\tregisterOnTouched(fn) {\r\n\t\tthis.onTouched = fn;\r\n\t}\r\n\twriteValue(_value) {\r\n\t\tthis.value = _value;\r\n\t}\r\n\tget value() {\r\n\t\treturn this.textarea.value;\r\n\t}\r\n\tset value(_value) {\r\n\t\tthis.textarea.value = _value;\r\n\t\tthis.onChange(_value);\r\n\t\tthis.onTouched();\r\n\t}\r\n\r\n\t@Input() textarea: Textarea;\r\n\t@Output() outputKeydownEnter: EventEmitter<string> = new EventEmitter();\r\n\t@Output() clickIcon: EventEmitter<string> = new EventEmitter();\r\n\r\n\tkeydownEnter() {\r\n\t\tthis.outputKeydownEnter.emit(this.value);\r\n\t\tif (this.textarea.keydownEnter) {\r\n\t\t\tthis.textarea.keydownEnter(this.value);\r\n\t\t}\r\n\t}\r\n\r\n\tchange() {\r\n\t\tif (this.textarea.change) {\r\n\t\t\tthis.textarea.change(this.value);\r\n\t\t}\r\n\t}\r\n\r\n\tconstructor() {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"settings\";\r\n\r\n.textarea-wrapper {\r\n\tposition: relative;\r\n\tdisplay: flex;\r\n\tflex-wrap: wrap;\r\n\tflex-direction: column;\r\n\tfa-icon {\r\n\t\tposition: absolute;\r\n\t\ttop: 50%;\r\n\t\ttransform: translateY(-50%);\r\n\t\tright: 16px;\r\n\t\tcursor: pointer;\r\n\t}\r\n}\r\n.textarea {\r\n\tborder-radius: $border-radius;\r\n\tpadding: 16px;\r\n\tpadding-right: 32px;\r\n\ttext-overflow: ellipsis;\r\n\tmin-height: 64px;\r\n\tborder: $border;\r\n\tbox-shadow: $shadow-inset;\r\n\ttransition: $transition;\r\n\tmax-width: 100%;\r\n\tresize: vertical;\r\n\tfont-family: $font-family;\r\n\tfont-size: $font-size;\r\n\tcolor: $font-color;\r\n\tbackground: $input-bg;\r\n\t&:focus {\r\n\t\toutline: 0;\r\n\t\tborder-color: $primary-color;\r\n\t\tbox-shadow: $shadow-focus, $shadow-focus-inset;\r\n\t}\r\n\t&:hover {\r\n\t\tborder-color: $primary-color;\r\n\t}\r\n\t&[type=\"number\"] {\r\n\t\tpadding: 0;\r\n\t\tpadding-left: 16px;\r\n\t\tline-height: 40px;\r\n\t}\r\n}\r\nmb-textarea {\r\n\t&.ng-invalid {\r\n\t\t.textbox {\r\n\t\t\tborder-color: $error;\r\n\t\t\tbox-shadow: $shadow-inset;\r\n\t\t\t&:focus {\r\n\t\t\t\tbox-shadow: $shadow-focus-inset, $shadow-error;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n",
                    "styleUrl": "./textarea.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 62
            },
            "implements": [
                "ControlValueAccessor"
            ],
            "accessors": {
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "_value",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 41,
                        "jsdoctags": [
                            {
                                "name": "_value",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "",
                        "line": 38
                    }
                }
            },
            "templateData": "<div class=\"textarea-wrapper\">\r\n\t<label *ngIf=\"textarea.label\" class=\"label\">{{ textarea.label }}</label>\r\n\t<textarea\r\n\t\t[style.width]=\"textarea.width ? textarea.width + 'px' : null\"\r\n\t\tplaceholder=\"{{ textarea.placeholder ? textarea.placeholder : null }}\"\r\n\t\tclass=\"textarea {{ textarea.classes }}\"\r\n\t\t(keydown.enter)=\"keydownEnter()\"\r\n\t\t(change)=\"change()\"\r\n\t\t[disabled]=\"textarea.disabled ? textarea.disabled : null\"\r\n\t\t[(ngModel)]=\"value\"\r\n\t>\r\n\t</textarea>\r\n</div>\r\n"
        },
        {
            "name": "TextboxComponent",
            "id": "component-TextboxComponent-e54ea7a1b299f20e288b70b780acf132f2a3f64f8d2e3d6d61e5c5d61c08b440f6c5756e8dc64aca58d6fa6ff540750d02266a1e95b6ee07e79b0617d8e77145",
            "file": "src/app/controls/textbox/textbox.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => TextboxComponent), multi: true,\n}",
                    "type": "component"
                }
            ],
            "selector": "mb-textbox",
            "styleUrls": [
                "./textbox.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./textbox.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "alert",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 50,
                    "type": "Alert",
                    "decorators": []
                },
                {
                    "name": "textbox",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 49,
                    "type": "Textbox",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "outputClickClear",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 53,
                    "type": "EventEmitter<string>"
                },
                {
                    "name": "outputClickIcon",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 52,
                    "type": "EventEmitter<string>"
                },
                {
                    "name": "outputKeydownEnter",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 51,
                    "type": "EventEmitter<string>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "click",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "previousValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 39
                }
            ],
            "methodsClass": [
                {
                    "name": "change",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 126,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "clickClear",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "clickIcon",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "colorPickerChange",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 140,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "keydown",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "keydownEnter",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "keyup",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setPreviousValue",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "validate",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "_value",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "_value",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n\tComponent,\r\n\tEventEmitter,\r\n\tInput,\r\n\tOnInit,\r\n\tOutput,\r\n\tforwardRef,\r\n} from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\n\r\nimport { Alert } from '../alert';\r\nimport { Textbox } from './textbox';\r\n\r\n@Component({\r\n\tselector: 'mb-textbox',\r\n\ttemplateUrl: './textbox.component.html',\r\n\tstyleUrls: ['./textbox.component.scss'],\r\n\r\n\tproviders: [\r\n\t\t{\r\n\t\t\tprovide: NG_VALUE_ACCESSOR,\r\n\t\t\tuseExisting: forwardRef(() => TextboxComponent),\r\n\t\t\tmulti: true,\r\n\t\t},\r\n\t],\r\n})\r\nexport class TextboxComponent implements ControlValueAccessor {\r\n\tonChange: any = () => {};\r\n\tonTouched: any = () => {};\r\n\tregisterOnChange(fn) {\r\n\t\tthis.onChange = fn;\r\n\t}\r\n\tregisterOnTouched(fn) {\r\n\t\tthis.onTouched = fn;\r\n\t}\r\n\twriteValue(_value) {\r\n\t\tthis.value = _value;\r\n\t}\r\n\tpreviousValue: string;\r\n\tget value() {\r\n\t\treturn this.textbox.value;\r\n\t}\r\n\tset value(_value) {\r\n\t\tthis.textbox.value = _value;\r\n\t\tthis.onChange(_value);\r\n\t\tthis.onTouched();\r\n\t}\r\n\r\n\t@Input() textbox: Textbox;\r\n\t@Input() alert: Alert;\r\n\t@Output() outputKeydownEnter: EventEmitter<string> = new EventEmitter();\r\n\t@Output() outputClickIcon: EventEmitter<string> = new EventEmitter();\r\n\t@Output() outputClickClear: EventEmitter<string> = new EventEmitter();\r\n\r\n\tconstructor() {}\r\n\r\n\tclick = (e: MouseEvent) => {\r\n\t\te.preventDefault();\r\n\t\te.stopPropagation();\r\n\t};\r\n\r\n\tkeyup() {\r\n\t\tif (this.textbox.keyup) this.textbox.keyup(this.value);\r\n\t}\r\n\r\n\tkeydown() {\r\n\t\tif (this.textbox.keydown) this.textbox.keydown(this.value);\r\n\t}\r\n\r\n\tkeydownEnter() {\r\n\t\tthis.outputKeydownEnter.emit(this.value);\r\n\t\tif (this.textbox.keydownEnter) this.textbox.keydownEnter(this.value);\r\n\t}\r\n\r\n\tclickIcon() {\r\n\t\tthis.outputClickIcon.emit(this.value);\r\n\t\tif (this.textbox.clickIcon) this.textbox.clickIcon(this.value);\r\n\t}\r\n\r\n\tclickClear() {\r\n\t\tthis.textbox.clear();\r\n\t\tthis.outputClickClear.emit(this.value);\r\n\t\tif (this.textbox.clickClear) this.textbox.clickClear();\r\n\t}\r\n\r\n\tsetPreviousValue() {\r\n\t\tthis.value = this.previousValue;\r\n\t}\r\n\r\n\tvalidate() {\r\n\t\tthis.textbox.valid = true;\r\n\r\n\t\t// If max, check it\r\n\t\tif (this.textbox.max) {\r\n\t\t\tlet num = Number(this.value);\r\n\r\n\t\t\t// Not a number\r\n\t\t\tif (isNaN(num)) {\r\n\t\t\t\tthis.textbox.valid = false;\r\n\t\t\t}\r\n\r\n\t\t\t// No large\r\n\t\t\tif (num > this.textbox.max) {\r\n\t\t\t\tthis.textbox.valid = false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// If min, check it\r\n\t\tif (this.textbox.min) {\r\n\t\t\tlet num = Number(this.value);\r\n\r\n\t\t\t// Not a number\r\n\t\t\tif (isNaN(num)) {\r\n\t\t\t\tthis.textbox.valid = false;\r\n\t\t\t}\r\n\r\n\t\t\t// No large\r\n\t\t\tif (num < this.textbox.min) {\r\n\t\t\t\tthis.textbox.valid = false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn this.textbox.valid;\r\n\t}\r\n\r\n\tchange() {\r\n\t\t// If valid\r\n\t\tif (this.validate()) {\r\n\t\t\tif (this.textbox.change) {\r\n\t\t\t\tthis.textbox.change(this.value);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tthis.setPreviousValue();\r\n\t\t}\r\n\r\n\t\t// Set previous value after change\r\n\t\tthis.previousValue = this.value;\r\n\t}\r\n\r\n\tcolorPickerChange(value: string) {\r\n\t\tthis.textbox.value = value;\r\n\t\tthis.change();\r\n\t}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"settings\";\r\n\r\n.textbox-wrapper {\r\n\tposition: relative;\r\n\tdisplay: flex;\r\n\tflex-wrap: wrap;\r\n\tflex-direction: column;\r\n\tcolor: $font-color;\r\n\tfa-icon {\r\n\t\tposition: absolute;\r\n\t\ttop: 50%;\r\n\t\ttransform: translateY(-50%);\r\n\t\tright: 16px;\r\n\t\tcursor: pointer;\r\n\t}\r\n\t&.dark {\r\n\t\t.textbox {\r\n\t\t\tborder: $border-strong;\r\n\t\t}\r\n\t}\r\n\t&.small {\r\n\t\t.textbox {\r\n\t\t\theight: 24px;\r\n\t\t\tline-height: 24px;\r\n\t\t\tfont-size: 12px;\r\n\t\t\t&[type=\"number\"] {\r\n\t\t\t\tpadding: 0 0 0 8px;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n.textbox {\r\n\tborder-radius: $border-radius;\r\n\tpadding: 0 32px 0 16px;\r\n\ttext-overflow: ellipsis;\r\n\theight: 40px;\r\n\tborder: $border;\r\n\ttransition: $transition;\r\n\tmax-width: 100%;\r\n\tcursor: text;\r\n\tbackground: $input-bg;\r\n\t&:focus {\r\n\t\tborder-color: $primary-color;\r\n\t\tbox-shadow: $shadow-focus, $shadow-focus-inset;\r\n\t}\r\n\t&:hover {\r\n\t\tborder-color: $primary-color;\r\n\t}\r\n\t&[type=\"number\"] {\r\n\t\tpadding: 0 0 0 16px;\r\n\t\tline-height: 40px;\r\n\t}\r\n}\r\n\r\n// Validation\r\n:host {\r\n\t&.ng-invalid {\r\n\t\t.textbox {\r\n\t\t\tborder-color: $error;\r\n\t\t\tbox-shadow: $shadow-inset;\r\n\t\t\t&:focus {\r\n\t\t\t\tbox-shadow: $shadow-focus-inset, $shadow-error;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n",
                    "styleUrl": "./textbox.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 53
            },
            "implements": [
                "ControlValueAccessor"
            ],
            "accessors": {
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "_value",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 43,
                        "jsdoctags": [
                            {
                                "name": "_value",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "",
                        "line": 40
                    }
                }
            },
            "templateData": "<div\r\n\t(click)=\"click($event)\"\r\n\t*ngIf=\"textbox\"\r\n\tclass=\"textbox-wrapper {{ textbox.wrapperClasses }} {{ textbox.size }}\"\r\n\t[class.dark]=\"textbox.dark\"\r\n>\r\n\t<label *ngIf=\"textbox.label\" class=\"label\">\r\n\t\t{{ textbox.label }}\r\n\t</label>\r\n\r\n\t<!-- Not color picker -->\r\n\t<input\r\n\t\t(click)=\"click($event)\"\r\n\t\t*ngIf=\"!textbox.colorPicker\"\r\n\t\t#textboxEl\r\n\t\t[style.width]=\"textbox.width ? textbox.width + 'px' : null\"\r\n\t\tplaceholder=\"{{ textbox.placeholder ? textbox.placeholder : null }}\"\r\n\t\ttype=\"{{ textbox.type }}\"\r\n\t\tclass=\"textbox {{ textbox.classes }}\"\r\n\t\t(keyup)=\"keyup()\"\r\n\t\t(keydown)=\"keydown()\"\r\n\t\t(keydown.enter)=\"keydownEnter()\"\r\n\t\t[readOnly]=\"textbox.readOnly\"\r\n\t\t[value]=\"value\"\r\n\t\t(change)=\"change()\"\r\n\t\t[min]=\"textbox.min\"\r\n\t\t[max]=\"textbox.max\"\r\n\t\t[autocomplete]=\"textbox.autoComplete\"\r\n\t\t[disabled]=\"textbox.disabled ? textbox.disabled : null\"\r\n\t\t[(ngModel)]=\"value\"\r\n\t/>\r\n\r\n\t<!-- Color picker -->\r\n\t<input\r\n\t\t*ngIf=\"textbox.colorPicker\"\r\n\t\t[style.width]=\"textbox.width ? textbox.width + 'px' : null\"\r\n\t\tplaceholder=\"{{ textbox.placeholder ? textbox.placeholder : null }}\"\r\n\t\ttype=\"{{ textbox.type }}\"\r\n\t\tclass=\"textbox {{ textbox.classes }}\"\r\n\t\t(keyup)=\"keyup()\"\r\n\t\t(keydown)=\"keydown()\"\r\n\t\t(keydown.enter)=\"keydownEnter()\"\r\n\t\t(change)=\"change()\"\r\n\t\t[min]=\"textbox.min\"\r\n\t\t[max]=\"textbox.max\"\r\n\t\t[autocomplete]=\"textbox.autoComplete\"\r\n\t\t[disabled]=\"textbox.disabled ? textbox.disabled : null\"\r\n\t\t[(ngModel)]=\"value\"\r\n\t\t[(colorPicker)]=\"textbox.value\"\r\n\t\t(colorPickerChange)=\"colorPickerChange($event)\"\r\n\t\t[cpOutputFormat]=\"'hex'\"\r\n\t/>\r\n\r\n\t<!-- Icon -->\r\n\t<fa-icon\r\n\t\t(click)=\"clickIcon()\"\r\n\t\t*ngIf=\"textbox.icon && (!textbox.clearable || !textbox.value.length)\"\r\n\t\t[icon]=\"textbox.icon\"\r\n\t>\r\n\t</fa-icon>\r\n\r\n\t<!-- Clear -->\r\n\t<fa-icon\r\n\t\t(click)=\"clickClear()\"\r\n\t\t*ngIf=\"textbox.clearable && textbox.value.length\"\r\n\t\ticon=\"times\"\r\n\t>\r\n\t</fa-icon>\r\n</div>\r\n\r\n<mb-alert *ngIf=\"alert\" [alert]=\"alert\"></mb-alert>\r\n"
        },
        {
            "name": "ToggleComponent",
            "id": "component-ToggleComponent-e2010d311a996e899c82093781e8a95caf66c721cf09aab04f0828df56ccee9dcae2c4273f56a2894610edbfa26909659e9659934c92a0ff9abaa5afd0d6d214",
            "file": "src/app/controls/toggle/toggle.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => ToggleComponent), multi: true\n}",
                    "type": "component"
                }
            ],
            "selector": "mb-toggle",
            "styleUrls": [
                "./toggle.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "toggle.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "toggle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "Toggle",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methodsClass": [
                {
                    "name": "change",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "_value",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "_value",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, forwardRef } from '@angular/core';\r\nimport { Toggle } from './toggle';\r\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\r\n\r\n@Component({\r\n\tselector: 'mb-toggle',\r\n\ttemplateUrl: 'toggle.component.html',\r\n\tstyleUrls: ['./toggle.component.scss'],\r\n\r\n\tproviders: [\r\n\t\t{\r\n\t\t\tprovide: NG_VALUE_ACCESSOR,\r\n\t\t\tuseExisting: forwardRef(() => ToggleComponent),\r\n\t\t\tmulti: true\r\n\t\t}\r\n\t]\r\n})\r\n\r\nexport class ToggleComponent implements ControlValueAccessor {\r\n\r\n\tonChange: any = () => {};\r\n\tonTouched: any = () => {};\r\n\tregisterOnChange(fn) { this.onChange = fn }\r\n\tregisterOnTouched(fn) { this.onTouched = fn }\r\n\twriteValue(_value) { this.value = _value; }\r\n\tget value() { return this.toggle.checked; }\r\n\tset value(_value) {\r\n\t\tthis.toggle.checked = _value;\r\n\t\tthis.onChange(_value);\r\n\t\tthis.onTouched();\r\n\t}\r\n\r\n\t@Input() toggle: Toggle;\r\n\r\n\tconstructor() { }\r\n\r\n\tngOnInit() { }\r\n\r\n\tchange() {\r\n\t\t\r\n\t}\r\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"settings\";\r\n\r\n.toggle-wrapper {\r\n\tdisplay: flex;\r\n}\r\n\r\n.toggle {\r\n\tdisplay: block;\r\n\tposition: relative;\r\n\tuser-select: none;\r\n\tcursor: pointer;\r\n\tinput[type=\"checkbox\"] {\r\n\t\tmargin: 0;\r\n\t\tappearance: none;\r\n\t\twidth: 100%;\r\n\t\theight: 40px;\r\n\t\tborder-radius: $border-radius;\r\n\t\tbackground: $input-bg;\r\n\t\tborder: $border;\r\n\t\tvertical-align: middle;\r\n\t\tposition: absolute;\r\n\t\t&:before {\r\n\t\t\tcontent: \"\";\r\n\t\t\tposition: absolute;\r\n\t\t\twidth: 34px;\r\n\t\t\ttop: 2px;\r\n\t\t\tleft: 2px;\r\n\t\t\tbackground: rgba($font-color, 0.5);\r\n\t\t\tbottom: 2px;\r\n\t\t\ttransition: $transition;\r\n\t\t\tborder-radius: $border-radius;\r\n\t\t}\r\n\t\t&:checked {\r\n\t\t\t&:before {\r\n\t\t\t\tleft: calc(100% - 34px - 2px);\r\n\t\t\t\tbackground: $primary-color;\r\n\t\t\t}\r\n\t\t\t~ .textChecked {\r\n\t\t\t\topacity: 1;\r\n\t\t\t}\r\n\t\t\t~ .text {\r\n\t\t\t\topacity: 0;\r\n\t\t\t}\r\n\t\t}\r\n\t\t&:hover {\r\n\t\t\tborder-color: $primary-color;\r\n\t\t}\r\n\t\t&:focus {\r\n\t\t\tborder-color: $primary-color;\r\n\t\t\tbox-shadow: $shadow-focus, $shadow;\r\n\t\t}\r\n\t}\r\n\t.text {\r\n\t\tz-index: 1;\r\n\t\tposition: relative;\r\n\t\tpadding: 10px 48px;\r\n\t\tdisplay: block;\r\n\t\ttext-align: center;\r\n\t\ttransition: $transition;\r\n\t\tpadding-right: 16px;\r\n\t}\r\n\t.textChecked {\r\n\t\tz-index: 1;\r\n\t\tposition: relative;\r\n\t\tpadding: 10px 48px;\r\n\t\tdisplay: block;\r\n\t\ttext-align: center;\r\n\t\ttransition: $transition;\r\n\t\tposition: relative;\r\n\t\tmargin-top: -40px;\r\n\t\topacity: 0;\r\n\t\tpadding-left: 16px;\r\n\t}\r\n}\r\n",
                    "styleUrl": "./toggle.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 33
            },
            "implements": [
                "ControlValueAccessor"
            ],
            "accessors": {
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "_value",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 27,
                        "jsdoctags": [
                            {
                                "name": "_value",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "",
                        "line": 26
                    }
                }
            },
            "templateData": "<label *ngIf=\"toggle.label\" class=\"label\">\r\n\t{{ toggle.label }}\r\n</label>\r\n<div class=\"toggle-wrapper\">\r\n\t<label class=\"toggle\">\r\n\t\t<input [(ngModel)]=\"value\" (change)=\"change()\" type=\"checkbox\" />\r\n\t\t<span *ngIf=\"toggle.text\" class=\"text\">{{ toggle.text }}</span>\r\n\t\t<span *ngIf=\"toggle.textChecked\" class=\"textChecked\">{{\r\n\t\t\ttoggle.textChecked\r\n\t\t}}</span>\r\n\t</label>\r\n</div>\r\n"
        },
        {
            "name": "TypeTagComponent",
            "id": "component-TypeTagComponent-5ff1d96fe23787c7111a617490e2f41c2a7030364fb41030a61135d9f0d59e7c17c9f16ee724f22a0307c3bda9c5081035256e5832dd2e789e4d3294e7c1c381",
            "file": "src/app/controls/type-tag/type-tag.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "mb-type-tag",
            "styleUrls": [
                "./type-tag.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "type-tag.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "typeTag",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TypeTag",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\r\nimport { TypeTag } from './type-tag';\r\n\r\n@Component({\r\n\tselector: 'mb-type-tag',\r\n\ttemplateUrl: 'type-tag.component.html',\r\n\tstyleUrls: ['./type-tag.component.scss'],\r\n})\r\nexport class TypeTagComponent implements OnInit {\r\n\t@Input() type: string;\r\n\ttypeTag: TypeTag;\r\n\r\n\tconstructor() {}\r\n\r\n\tngOnInit() {\r\n\t\tthis.typeTag = new TypeTag({\r\n\t\t\ttype: this.type,\r\n\t\t});\r\n\t}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"settings\",\r\n\t\t\"custom\";\r\n\r\n.type-tag {\r\n\ttransition: $transition;\r\n\tcursor: pointer;\r\n\tdisplay: flex;\r\n\tvertical-align: middle;\r\n\tborder-radius: $border-radius-small;\r\n\toverflow: hidden;\r\n\tposition: relative;\r\n\t&:hover {\r\n\t\tbox-shadow: $shadow-focus;\r\n\t}\r\n\timg {\r\n\t\twidth: 20px;\r\n\t\tpadding: $spacing / 2;\r\n\t\tbox-shadow: $shadow-sheen;\r\n\t\tborder: 1px solid rgba(black, .2);\r\n\t\tborder-right: 0;\r\n\t\tborder-top-left-radius: $border-radius-small;\r\n\t\tborder-bottom-left-radius: $border-radius-small;\r\n\t}\r\n\tspan {\r\n\t\tdisplay: block;\r\n\t\tpadding: ($spacing / 2) $spacing;\r\n\t\tcolor: white;\r\n\t\tfont-size: 10px;\r\n\t\ttext-transform: uppercase;\r\n\t\tposition: relative;\r\n\t\toverflow: hidden;\r\n\t\tborder: 1px solid rgba(black, .2);\r\n\r\n\t\t// Glow\r\n\t\t&:before {\r\n\t\t\tcontent: '';\r\n\t\t\tborder-radius: 0 $border-radius-small $border-radius-small 0;\r\n\t\t\twidth: 100%;\r\n\t\t\theight: 100%;\r\n\t\t\tposition: absolute;\r\n\t\t\tbox-shadow: $shadow-sheen;\r\n\t\t\tz-index: 10;\r\n\t\t\tleft: 0;\r\n\t\t\ttop: 0;\r\n\t\t}\r\n\t}\r\n\t@each $type, $color in $poke-types {\r\n\t\t&.#{$type} {\r\n\t\t\tbackground: $color;\r\n\t\t\tspan {\r\n\t\t\t\tbackground: darken($color, 35%);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}",
                    "styleUrl": "./type-tag.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 11
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<a\r\n\tclass=\"type-tag {{ type.toLowerCase() }}\"\r\n\t[routerLink]=\"typeTag.route && typeTag.route\"\r\n>\r\n\t<img\r\n\t\tsrc=\"https://duiker101.github.io/pokemon-type-svg-icons/icons/{{\r\n\t\t\ttype.toLowerCase()\r\n\t\t}}.svg\"\r\n\t/>\r\n\t<span>{{ type }}</span>\r\n</a>\r\n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-24899dc5f6e7a2998f681af45476b8d0ae42da4347b6921a89b837ce42246af4a62767d604e32bae32d78cfc1affdb392c705924c2a2fe0b6e1f029cd22d7a37",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "// Angular\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { DatePipe } from '@angular/common';\r\nimport { DragDropModule } from '@angular/cdk/drag-drop';\r\nimport { OverlayModule } from '@angular/cdk/overlay';\r\nimport { ColorPickerModule } from 'ngx-color-picker';\r\n\r\n// Third party\r\nimport { CKEditorModule } from '@ckeditor/ckeditor5-angular';\r\nimport {\r\n\tFontAwesomeModule,\r\n\tFaIconLibrary,\r\n\tFaConfig,\r\n} from '@fortawesome/angular-fontawesome';\r\nimport { WebcamModule } from 'ngx-webcam';\r\nimport { InlineSVGModule } from 'ng-inline-svg';\r\nimport { AngularFittextModule } from 'angular-fittext';\r\n\r\n// App\r\nimport { AppRoutingModule } from './helpers/app-routing.module';\r\nimport { AppComponent } from './app.component';\r\n\r\n// Controls\r\nimport {\r\n\tAlertComponent,\r\n\tButtonComponent,\r\n\tCheckboxComponent,\r\n\tEditorComponent,\r\n\tFormComponent,\r\n\tFormGroupComponent,\r\n\tFormControlComponent,\r\n\tLoaderComponent,\r\n\tMenuComponent,\r\n\tNotificationsComponent,\r\n\tSelectComponent,\r\n\tTagComponent,\r\n\tTextareaComponent,\r\n\tTextboxComponent,\r\n\tToggleComponent,\r\n\tProgressBarComponent,\r\n\tTypeTagComponent,\r\n\tDialogComponent,\r\n\tEmptyComponent,\r\n\tHeroComponent,\r\n} from './controls';\r\n\r\n// Components\r\nimport {\r\n\tCardCollectionComponent,\r\n\tCardCollectionItemComponent,\r\n} from './components';\r\n\r\n// Pages\r\nimport {\r\n\tSignInComponent,\r\n\tSignUpComponent,\r\n\tForgotComponent,\r\n\tResetComponent,\r\n\tCardsComponent,\r\n\tCardComponent,\r\n\tCardItemGridComponent,\r\n\tHomeComponent,\r\n\tScannerComponent,\r\n\tScannerListsComponent,\r\n\tScannerListComponent,\r\n\tExpansionsComponent,\r\n\tExpansionComponent,\r\n\tExpansionItemGridComponent,\r\n\tExpansionItemListComponent,\r\n\tPokemonsComponent,\r\n\tPokemonItemGridComponent,\r\n\tPokmeonItemListComponent,\r\n\tPokemonComponent,\r\n\tCollectionComponent,\r\n\tCollectionDashboardComponent,\r\n\tCollectionCardGroupComponent,\r\n\tEditProfileComponent,\r\n} from './pages';\r\n\r\n// Page\r\nimport {\r\n\tFooterComponent,\r\n\tHeaderComponent,\r\n\tProfileComponent,\r\n\tSearchComponent,\r\n\tItemsComponent,\r\n\tItemsHeaderComponent,\r\n\tItemsFilterComponent,\r\n\tItemsFooterComponent,\r\n\tItemsGridComponent,\r\n\tItemsListComponent,\r\n\tItemsGroupsComponent,\r\n} from './layout';\r\n\r\n// Helpers\r\nimport {\r\n\tErrorIntercept,\r\n\tJwtInterceptor,\r\n\tClickOutsideDirective,\r\n} from './helpers';\r\n\r\n// Icons\r\nimport {\r\n\tfaSearch,\r\n\tfaList,\r\n\tfaArchive,\r\n\tfaBookSpells,\r\n\tfaChartLine,\r\n\tfaUser,\r\n\tfaCrown,\r\n\tfaLightSwitchOn,\r\n\tfaCog,\r\n\tfaBox,\r\n\tfaFolders,\r\n\tfaUsers,\r\n\tfaEllipsisV,\r\n\tfaArrowUp,\r\n\tfaArrowDown,\r\n\tfaHorizontalRule,\r\n\tfaTrash,\r\n\tfaPalette,\r\n\tfaCrosshairs,\r\n\tfaHistory,\r\n\tfaExternalLink,\r\n\tfaDollarSign,\r\n\tfaAngleLeft,\r\n\tfaAngleRight,\r\n\tfaArrowLeft,\r\n\tfaArrowRight,\r\n\tfaCaretUp,\r\n\tfaCaretRight,\r\n\tfaCaretDown,\r\n\tfaCaretLeft,\r\n\tfaSignIn,\r\n\tfaPlus,\r\n\tfaSignOut,\r\n\tfaUserPlus,\r\n\tfaTh,\r\n\tfaVideo,\r\n\tfaCamera,\r\n\tfaBringFront,\r\n\tfaSync,\r\n\tfaPlay,\r\n\tfaStop,\r\n\tfaPause,\r\n\tfaDonate,\r\n\tfaTachometer,\r\n\tfaCheck,\r\n\tfaInfo,\r\n\tfaExclamationTriangle,\r\n\tfaTimesOctagon,\r\n\tfaTimes,\r\n\tfaLayerGroup,\r\n\tfaRectanglePortrait,\r\n\tfaAlbumCollection,\r\n\tfaShoppingCart,\r\n\tfaGavel,\r\n\tfaBalanceScale,\r\n\tfaSave,\r\n\tfaLineColumns,\r\n\tfaShieldAlt,\r\n\tfaSwords,\r\n\tfaAlignLeft,\r\n\tfaEye,\r\n\tfaRepeat,\r\n\tfaUndo,\r\n\tfaArrowToTop,\r\n\tfaArrowToBottom,\r\n\tfaRandom,\r\n\tfaHandHoldingMedical,\r\n\tfaTombstoneAlt,\r\n\tfaLevelUp,\r\n\tfaLevelDown,\r\n\tfaSortSizeUp,\r\n\tfaSortSizeDownAlt,\r\n\tfaSortAlt,\r\n\tfaDiceThree,\r\n\tfaDice,\r\n\tfaExclamationCircle,\r\n\tfaThumbsUp,\r\n\tfaExclamation,\r\n\tfaCoin,\r\n\tfaForward,\r\n\tfaHourglassStart,\r\n\tfaHourglassEnd,\r\n\tfaKeyboard,\r\n\tfaDiceD4,\r\n\tfaDiceD6,\r\n\tfaDiceD10,\r\n\tfaDiceD12,\r\n\tfaDiceD20,\r\n\tfaDiceD8,\r\n\tfaClone,\r\n\tfaFlaskPotion,\r\n\tfaFolder,\r\n\tfaEdit,\r\n\tfaAngleUp,\r\n\tfaAngleDown,\r\n\tfaMinus,\r\n\tfaCompress,\r\n\tfaExpand,\r\n\tfaLock,\r\n\tfaLockOpen,\r\n\tfaImage,\r\n\tfaPawClaws,\r\n\tfaTrophy,\r\n\tfaBolt,\r\n\tfaMagic,\r\n\tfaMountains,\r\n\tfaEclipse,\r\n\tfaHoodCloak,\r\n\tfaDragon,\r\n\tfaTools,\r\n\tfaToolbox,\r\n\tfaHeart,\r\n\tfaHeartbeat,\r\n\tfaThunderstorm,\r\n\tfaNewspaper,\r\n\tfaSparkles,\r\n\tfaQuestion,\r\n\tfaBars,\r\n\tfaHouse,\r\n\tfaCopy,\r\n\tfaExpandArrowsAlt,\r\n\tfaOtter,\r\n\tfaDotCircle,\r\n\tfaInfoCircle,\r\n\tfaBrush,\r\n\tfaPaintBrush,\r\n\tfaHashtag,\r\n\tfaBookOpen,\r\n\tfaInbox,\r\n\tfaExchange,\r\n} from '@fortawesome/pro-duotone-svg-icons';\r\nimport { CardItemListComponent } from './pages/cards/card-item/card-item-list/card-item-list.component';\r\n\r\n@NgModule({\r\n\tdeclarations: [\r\n\t\tAppComponent,\r\n\r\n\t\t// Page\r\n\t\t// ====================\r\n\t\tHeaderComponent,\r\n\t\tSearchComponent,\r\n\t\tProfileComponent,\r\n\t\tFooterComponent,\r\n\t\tItemsComponent,\r\n\t\tItemsHeaderComponent,\r\n\t\tItemsFilterComponent,\r\n\t\tItemsFooterComponent,\r\n\t\tItemsGridComponent,\r\n\t\tItemsListComponent,\r\n\t\tItemsGroupsComponent,\r\n\t\tCollectionCardGroupComponent,\r\n\t\tCollectionDashboardComponent,\r\n\r\n\t\t// Controls\r\n\t\t// ====================\r\n\t\tMenuComponent,\r\n\t\tButtonComponent,\r\n\t\tCheckboxComponent,\r\n\t\tLoaderComponent,\r\n\t\tSelectComponent,\r\n\t\tTextboxComponent,\r\n\t\tTextareaComponent,\r\n\t\tNotificationsComponent,\r\n\t\tFormComponent,\r\n\t\tFormGroupComponent,\r\n\t\tFormControlComponent,\r\n\t\tEditorComponent,\r\n\t\tToggleComponent,\r\n\t\tTagComponent,\r\n\t\tAlertComponent,\r\n\t\tProgressBarComponent,\r\n\t\tTypeTagComponent,\r\n\t\tDialogComponent,\r\n\t\tCardCollectionComponent,\r\n\t\tCardCollectionItemComponent,\r\n\t\tEmptyComponent,\r\n\t\tHeroComponent,\r\n\r\n\t\t// Pages\r\n\t\t// ====================\r\n\t\t// Website\r\n\t\tHomeComponent,\r\n\t\t// Cards\r\n\t\tCardsComponent,\r\n\t\tCardItemGridComponent,\r\n\t\tCardItemListComponent,\r\n\t\tCardComponent,\r\n\t\t// Auth\r\n\t\tSignInComponent,\r\n\t\tSignUpComponent,\r\n\t\tForgotComponent,\r\n\t\tResetComponent,\r\n\t\tEditProfileComponent,\r\n\t\t// Scanner\r\n\t\tScannerComponent,\r\n\t\tScannerListsComponent,\r\n\t\tScannerListComponent,\r\n\t\t// Expansion\r\n\t\tExpansionsComponent,\r\n\t\tExpansionItemGridComponent,\r\n\t\tExpansionItemListComponent,\r\n\t\tExpansionComponent,\r\n\t\t// Pokemon\r\n\t\tPokemonsComponent,\r\n\t\tPokemonItemGridComponent,\r\n\t\tPokmeonItemListComponent,\r\n\t\tPokemonComponent,\r\n\t\t// Social\r\n\t\tProfileComponent,\r\n\t\t// Collection\r\n\t\tCollectionComponent,\r\n\r\n\t\t// Helpers\r\n\t\tClickOutsideDirective,\r\n\t],\r\n\timports: [\r\n\t\tDragDropModule,\r\n\t\tBrowserModule,\r\n\t\tHttpClientModule,\r\n\t\tFormsModule,\r\n\t\tAppRoutingModule,\r\n\t\t//ChartsModule,\r\n\t\tFontAwesomeModule,\r\n\t\tWebcamModule,\r\n\t\tReactiveFormsModule,\r\n\t\tCKEditorModule,\r\n\t\tOverlayModule,\r\n\t\tAngularFittextModule,\r\n\t\tColorPickerModule,\r\n\t\tInlineSVGModule.forRoot(),\r\n\t],\r\n\tproviders: [\r\n\t\t{\r\n\t\t\tprovide: HTTP_INTERCEPTORS,\r\n\t\t\tuseClass: JwtInterceptor,\r\n\t\t\tmulti: true,\r\n\t\t},\r\n\t\t{\r\n\t\t\tprovide: HTTP_INTERCEPTORS,\r\n\t\t\tuseClass: ErrorIntercept,\r\n\t\t\tmulti: true,\r\n\t\t},\r\n\t\tDatePipe,\r\n\t],\r\n\tbootstrap: [AppComponent],\r\n})\r\nexport class AppModule {\r\n\tconstructor(private library: FaIconLibrary, private faConfig: FaConfig) {\r\n\t\tlibrary.addIcons(\r\n\t\t\tfaSearch,\r\n\t\t\tfaList,\r\n\t\t\tfaArchive,\r\n\t\t\tfaBookSpells,\r\n\t\t\tfaChartLine,\r\n\t\t\tfaUser,\r\n\t\t\tfaCrown,\r\n\t\t\tfaLightSwitchOn,\r\n\t\t\tfaCog,\r\n\t\t\tfaBox,\r\n\t\t\tfaFolders,\r\n\t\t\tfaUsers,\r\n\t\t\tfaEllipsisV,\r\n\t\t\tfaArrowUp,\r\n\t\t\tfaArrowDown,\r\n\t\t\tfaHorizontalRule,\r\n\t\t\tfaTrash,\r\n\t\t\tfaPalette,\r\n\t\t\tfaCrosshairs,\r\n\t\t\tfaHistory,\r\n\t\t\tfaExternalLink,\r\n\t\t\tfaDollarSign,\r\n\t\t\tfaCog,\r\n\t\t\tfaAngleLeft,\r\n\t\t\tfaAngleRight,\r\n\t\t\tfaArrowLeft,\r\n\t\t\tfaArrowRight,\r\n\t\t\tfaCaretUp,\r\n\t\t\tfaCaretRight,\r\n\t\t\tfaCaretDown,\r\n\t\t\tfaCaretLeft,\r\n\t\t\tfaSignIn,\r\n\t\t\tfaSignOut,\r\n\t\t\tfaPlus,\r\n\t\t\tfaUserPlus,\r\n\t\t\tfaTh,\r\n\t\t\tfaCamera,\r\n\t\t\tfaVideo,\r\n\t\t\tfaBringFront,\r\n\t\t\tfaSync,\r\n\t\t\tfaPlay,\r\n\t\t\tfaPause,\r\n\t\t\tfaStop,\r\n\t\t\tfaDonate,\r\n\t\t\tfaTachometer,\r\n\t\t\tfaCheck,\r\n\t\t\tfaInfo,\r\n\t\t\tfaExclamationTriangle,\r\n\t\t\tfaTimesOctagon,\r\n\t\t\tfaTimes,\r\n\t\t\tfaLayerGroup,\r\n\t\t\tfaRectanglePortrait,\r\n\t\t\tfaAlbumCollection,\r\n\t\t\tfaShoppingCart,\r\n\t\t\tfaGavel,\r\n\t\t\tfaBalanceScale,\r\n\t\t\tfaSave,\r\n\t\t\tfaLineColumns,\r\n\t\t\tfaShieldAlt,\r\n\t\t\tfaPalette,\r\n\t\t\tfaSwords,\r\n\t\t\tfaAlignLeft,\r\n\t\t\tfaEye,\r\n\t\t\tfaRepeat,\r\n\t\t\tfaUndo,\r\n\t\t\tfaArrowToTop,\r\n\t\t\tfaArrowToBottom,\r\n\t\t\tfaRandom,\r\n\t\t\tfaHandHoldingMedical,\r\n\t\t\tfaTombstoneAlt,\r\n\t\t\tfaLevelUp,\r\n\t\t\tfaLevelDown,\r\n\t\t\tfaSwords,\r\n\t\t\tfaSortSizeUp,\r\n\t\t\tfaSortSizeDownAlt,\r\n\t\t\tfaSortAlt,\r\n\t\t\tfaDiceThree,\r\n\t\t\tfaDice,\r\n\t\t\tfaDiceD4,\r\n\t\t\tfaDiceD6,\r\n\t\t\tfaDiceD8,\r\n\t\t\tfaDiceD10,\r\n\t\t\tfaDiceD12,\r\n\t\t\tfaDiceD20,\r\n\t\t\tfaExclamationCircle,\r\n\t\t\tfaThumbsUp,\r\n\t\t\tfaExclamation,\r\n\t\t\tfaCoin,\r\n\t\t\tfaForward,\r\n\t\t\tfaHourglassStart,\r\n\t\t\tfaHourglassEnd,\r\n\t\t\tfaKeyboard,\r\n\t\t\tfaClone,\r\n\t\t\tfaFlaskPotion,\r\n\t\t\tfaFolder,\r\n\t\t\tfaEdit,\r\n\t\t\tfaAngleUp,\r\n\t\t\tfaAngleRight,\r\n\t\t\tfaAngleDown,\r\n\t\t\tfaAngleLeft,\r\n\t\t\tfaMinus,\r\n\t\t\tfaExpand,\r\n\t\t\tfaCompress,\r\n\t\t\tfaLock,\r\n\t\t\tfaLockOpen,\r\n\t\t\tfaImage,\r\n\t\t\tfaPawClaws,\r\n\t\t\tfaTrophy,\r\n\t\t\tfaBolt,\r\n\t\t\tfaMagic,\r\n\t\t\tfaMountains,\r\n\t\t\tfaEclipse,\r\n\t\t\tfaHoodCloak,\r\n\t\t\tfaDragon,\r\n\t\t\tfaTools,\r\n\t\t\tfaToolbox,\r\n\t\t\tfaHeart,\r\n\t\t\tfaHeartbeat,\r\n\t\t\tfaThunderstorm,\r\n\t\t\tfaNewspaper,\r\n\t\t\tfaSparkles,\r\n\t\t\tfaQuestion,\r\n\t\t\tfaBars,\r\n\t\t\tfaHouse,\r\n\t\t\tfaCopy,\r\n\t\t\tfaExpandArrowsAlt,\r\n\t\t\tfaOtter,\r\n\t\t\tfaDotCircle,\r\n\t\t\tfaBox,\r\n\t\t\tfaAlignLeft,\r\n\t\t\tfaInfoCircle,\r\n\t\t\tfaDollarSign,\r\n\t\t\tfaBrush,\r\n\t\t\tfaPaintBrush,\r\n\t\t\tfaHashtag,\r\n\t\t\tfaBookOpen,\r\n\t\t\tfaInbox,\r\n\t\t\tfaBalanceScale,\r\n\t\t\tfaExchange\r\n\t\t);\r\n\t\tfaConfig.defaultPrefix = 'fad';\r\n\t}\r\n}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "ErrorIntercept"
                        },
                        {
                            "name": "JwtInterceptor"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AlertComponent"
                        },
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "ButtonComponent"
                        },
                        {
                            "name": "CardCollectionComponent"
                        },
                        {
                            "name": "CardCollectionItemComponent"
                        },
                        {
                            "name": "CardComponent"
                        },
                        {
                            "name": "CardItemGridComponent"
                        },
                        {
                            "name": "CardItemListComponent"
                        },
                        {
                            "name": "CardsComponent"
                        },
                        {
                            "name": "CheckboxComponent"
                        },
                        {
                            "name": "ClickOutsideDirective"
                        },
                        {
                            "name": "CollectionCardGroupComponent"
                        },
                        {
                            "name": "CollectionComponent"
                        },
                        {
                            "name": "CollectionDashboardComponent"
                        },
                        {
                            "name": "DialogComponent"
                        },
                        {
                            "name": "EditProfileComponent"
                        },
                        {
                            "name": "EditorComponent"
                        },
                        {
                            "name": "EmptyComponent"
                        },
                        {
                            "name": "ExpansionComponent"
                        },
                        {
                            "name": "ExpansionItemGridComponent"
                        },
                        {
                            "name": "ExpansionItemListComponent"
                        },
                        {
                            "name": "ExpansionsComponent"
                        },
                        {
                            "name": "FooterComponent"
                        },
                        {
                            "name": "ForgotComponent"
                        },
                        {
                            "name": "FormComponent"
                        },
                        {
                            "name": "FormControlComponent"
                        },
                        {
                            "name": "FormGroupComponent"
                        },
                        {
                            "name": "HeaderComponent"
                        },
                        {
                            "name": "HeroComponent"
                        },
                        {
                            "name": "HomeComponent"
                        },
                        {
                            "name": "ItemsComponent"
                        },
                        {
                            "name": "ItemsFilterComponent"
                        },
                        {
                            "name": "ItemsFooterComponent"
                        },
                        {
                            "name": "ItemsGridComponent"
                        },
                        {
                            "name": "ItemsGroupsComponent"
                        },
                        {
                            "name": "ItemsHeaderComponent"
                        },
                        {
                            "name": "ItemsListComponent"
                        },
                        {
                            "name": "LoaderComponent"
                        },
                        {
                            "name": "MenuComponent"
                        },
                        {
                            "name": "NotificationsComponent"
                        },
                        {
                            "name": "PokemonComponent"
                        },
                        {
                            "name": "PokemonItemGridComponent"
                        },
                        {
                            "name": "PokemonsComponent"
                        },
                        {
                            "name": "PokmeonItemListComponent"
                        },
                        {
                            "name": "ProfileComponent"
                        },
                        {
                            "name": "ProfileComponent"
                        },
                        {
                            "name": "ProgressBarComponent"
                        },
                        {
                            "name": "ResetComponent"
                        },
                        {
                            "name": "ScannerComponent"
                        },
                        {
                            "name": "ScannerListComponent"
                        },
                        {
                            "name": "ScannerListsComponent"
                        },
                        {
                            "name": "SearchComponent"
                        },
                        {
                            "name": "SelectComponent"
                        },
                        {
                            "name": "SignInComponent"
                        },
                        {
                            "name": "SignUpComponent"
                        },
                        {
                            "name": "TagComponent"
                        },
                        {
                            "name": "TextareaComponent"
                        },
                        {
                            "name": "TextboxComponent"
                        },
                        {
                            "name": "ToggleComponent"
                        },
                        {
                            "name": "TypeTagComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-c8a2a5266a750de54edcdfc4d28bd1393a959613dc0f623374a25fc9097ccf6d209b7f819b6e02af3143f3d98dbc20eda3ecc74133e481b092361d8a71397d15",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/helpers/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { EditProfileComponent } from './../pages/edit-profile/edit.profile.component';\r\nimport { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { AuthGuard } from './auth.guard';\r\n\r\n// Pages\r\nimport {\r\n\tCardComponent,\r\n\tCardsComponent,\r\n\tHomeComponent,\r\n\tExpansionsComponent,\r\n\tExpansionComponent,\r\n\tScannerComponent,\r\n\tScannerListsComponent,\r\n\tScannerListComponent,\r\n\tPokemonsComponent,\r\n\tPokemonComponent,\r\n\tCollectionComponent,\r\n\tSignInComponent,\r\n\tSignUpComponent,\r\n\tForgotComponent,\r\n\tResetComponent,\r\n\tCollectionCardGroupComponent,\r\n} from '../pages';\r\n\r\nconst routes: Routes = [\r\n\t// Home\r\n\t{\r\n\t\tpath: '',\r\n\t\tcomponent: HomeComponent,\r\n\t\tdata: {\r\n\t\t\ttransparentHeader: true,\r\n\t\t},\r\n\t},\r\n\r\n\t// Cards\r\n\t{\r\n\t\tpath: 'cards',\r\n\t\t//canActivate: [AuthGuard],\r\n\t\tcomponent: CardsComponent,\r\n\t},\r\n\t{\r\n\t\tpath: 'cards/:slug',\r\n\t\tcomponent: CardComponent,\r\n\t},\r\n\t{\r\n\t\tpath: 'cards/types/:type',\r\n\t\tcomponent: CardsComponent,\r\n\t},\r\n\t{\r\n\t\tpath: 'cards/rarity/:rarity',\r\n\t\tcomponent: CardsComponent,\r\n\t},\r\n\t{\r\n\t\tpath: 'cards/artists/:artist',\r\n\t\tcomponent: CardsComponent,\r\n\t},\r\n\t{\r\n\t\tpath: 'cards/supertype/:supertype',\r\n\t\tcomponent: CardsComponent,\r\n\t},\r\n\t{\r\n\t\tpath: 'cards/subtype/:subtype',\r\n\t\tcomponent: CardsComponent,\r\n\t},\r\n\r\n\t// Collection\r\n\t{\r\n\t\tpath: 'collection/dashboard',\r\n\t\tcomponent: CollectionComponent,\r\n\t},\r\n\t{\r\n\t\tpath: 'collection',\r\n\t\tcomponent: CollectionComponent,\r\n\t},\r\n\t{\r\n\t\tpath: 'collection/add',\r\n\t\tcomponent: CollectionComponent,\r\n\t},\r\n\r\n\t// Scanner\r\n\t// {\r\n\t// \tpath: 'scanner',\r\n\t// \tcomponent: ScannerComponent,\r\n\t// },\r\n\t// {\r\n\t// \tpath: 'scanner/lists',\r\n\t// \tcomponent: ScannerListsComponent,\r\n\t// },\r\n\t// {\r\n\t// \tpath: 'scanner/lists/:id',\r\n\t// \tcomponent: ScannerListComponent,\r\n\t// },\r\n\r\n\t// Auth\r\n\t{\r\n\t\tpath: 'signin',\r\n\t\tcomponent: SignInComponent,\r\n\t},\r\n\t{\r\n\t\tpath: 'signup',\r\n\t\tcomponent: SignUpComponent,\r\n\t},\r\n\t{\r\n\t\tpath: 'forgot',\r\n\t\tcomponent: ForgotComponent,\r\n\t},\r\n\t{\r\n\t\tpath: 'reset/:token',\r\n\t\tcomponent: ResetComponent,\r\n\t},\r\n\r\n\t// Edit profile\r\n\t{\r\n\t\tpath: 'profile',\r\n\t\tcomponent: EditProfileComponent,\r\n\t},\r\n\t{\r\n\t\tpath: 'profile/edit',\r\n\t\tcomponent: EditProfileComponent,\r\n\t},\r\n\r\n\t// Expansions\r\n\t{\r\n\t\tpath: 'expansions',\r\n\t\tcomponent: ExpansionsComponent,\r\n\t},\r\n\t{\r\n\t\tpath: 'expansions/:code',\r\n\t\tcomponent: ExpansionComponent,\r\n\t},\r\n\r\n\t// Pokemon\r\n\t{\r\n\t\tpath: 'pokemon',\r\n\t\tcomponent: PokemonsComponent,\r\n\t},\r\n\t{\r\n\t\tpath: 'pokemon/:slug',\r\n\t\tcomponent: PokemonComponent,\r\n\t},\r\n\t{\r\n\t\tpath: 'pokemon/type/:type',\r\n\t\tcomponent: PokemonsComponent,\r\n\t},\r\n\r\n\t// otherwise redirect to home\r\n\t{\r\n\t\tpath: '**',\r\n\t\tredirectTo: '',\r\n\t},\r\n];\r\n\r\n@NgModule({\r\n\timports: [RouterModule.forRoot(routes)],\r\n\texports: [RouterModule],\r\n})\r\nexport class AppRoutingModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "buildUrl",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/models/api.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(folder, queryString = '') => {\r\n\treturn `${environment.api}${folder}${\r\n\t\tqueryString.length ? '?' + queryString : ''\r\n\t}`;\r\n}"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "DEFAULT_IMAGE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/cards/card/card.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'/assets/back.jpg'"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  production: true,\r\n  api: \"https://api.rotomdex.app/api/\",\r\n  images: \"https://images.rotomdex.app/\",\r\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  production: false,\r\n  api: \"https://api.rotomdex.app/api/\",\r\n  images: \"https://images.rotomdex.app/\",\r\n  //api: \"http://api.manabinder.local/api/\"\r\n}"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Button>",
                "defaultValue": "(args: Button) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Header>",
                "defaultValue": "(args: Header) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Page>",
                "defaultValue": "(args: Page) => ({\n  props: args,\n})"
            }
        ],
        "functions": [
            {
                "name": "GUID",
                "file": "src/app/helpers/guid.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": []
            },
            {
                "name": "SetPageSize",
                "file": "src/app/pages/expansions/expansion/expansion.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "itemFooter",
                        "type": "ItemsFooter",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "itemFooter",
                        "type": "ItemsFooter",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "SetSortByCards",
                "file": "src/app/pages/cards/card/card.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "itemFilter",
                        "type": "ItemsFilter",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "itemFilter",
                        "type": "ItemsFilter",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "SetSortByExpansion",
                "file": "src/app/pages/expansions/expansion/expansion.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "itemFilter",
                        "type": "ItemsFilter",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "itemFilter",
                        "type": "ItemsFilter",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "SetSortByExpansions",
                "file": "src/app/pages/expansions/expansion/expansion.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "itemFilter",
                        "type": "ItemsFilter",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "itemFilter",
                        "type": "ItemsFilter",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "SetSortByPokemon",
                "file": "src/app/pages/pokemons/pokemon/pokemon.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "select",
                        "type": "Select",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "select",
                        "type": "Select",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [],
        "enumerations": [
            {
                "name": "AlertType",
                "childs": [
                    {
                        "name": "success",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "success"
                    },
                    {
                        "name": "info",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "info"
                    },
                    {
                        "name": "warning",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "warning"
                    },
                    {
                        "name": "error",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "error"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/controls/alert/alert.ts"
            },
            {
                "name": "ButtonType",
                "childs": [
                    {
                        "name": "button",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "button"
                    },
                    {
                        "name": "submit",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "submit"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/controls/button/button.ts"
            },
            {
                "name": "Condition",
                "childs": [
                    {
                        "name": "Mint",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Mint"
                    },
                    {
                        "name": "NearMint",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Near Mint"
                    },
                    {
                        "name": "LightlyPlayed",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Lightly Played"
                    },
                    {
                        "name": "ModeratelyPlayed",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Moderately Played"
                    },
                    {
                        "name": "HeavilyPlayed",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Heavily Played"
                    },
                    {
                        "name": "Damaged",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Damaged"
                    },
                    {
                        "name": "Misprint",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Misprint"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/models/condition.ts"
            },
            {
                "name": "ConditionGraded",
                "childs": [
                    {
                        "name": "Ten",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Graded 10"
                    },
                    {
                        "name": "NineFive",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Graded 9.5"
                    },
                    {
                        "name": "Nine",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Graded 9"
                    },
                    {
                        "name": "EightFive",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Graded 8.5"
                    },
                    {
                        "name": "Eight",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Graded 8"
                    },
                    {
                        "name": "SevenFive",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Graded 7.5"
                    },
                    {
                        "name": "Seven",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Graded 7"
                    },
                    {
                        "name": "SixFive",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Graded 6.5"
                    },
                    {
                        "name": "Six",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Graded 6"
                    },
                    {
                        "name": "FiveFive",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Graded 5.5"
                    },
                    {
                        "name": "Five",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Graded 5"
                    },
                    {
                        "name": "FourFive",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Graded 4.5"
                    },
                    {
                        "name": "Four",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Graded 4"
                    },
                    {
                        "name": "ThreeFive",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Graded 3.5"
                    },
                    {
                        "name": "Three",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Graded 3"
                    },
                    {
                        "name": "TwoFive",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Graded 2.5"
                    },
                    {
                        "name": "Two",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Graded 2"
                    },
                    {
                        "name": "OneFive",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Graded 1.5"
                    },
                    {
                        "name": "One",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Graded 1"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/models/condition.ts"
            },
            {
                "name": "Corners",
                "childs": [
                    {
                        "name": "topRight",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Top Right"
                    },
                    {
                        "name": "topLeft",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Top Left"
                    },
                    {
                        "name": "bottomRight",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Bottom Right"
                    },
                    {
                        "name": "bottomLeft",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Bottom Left"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/models/sides.ts"
            },
            {
                "name": "GradingCompany",
                "childs": [
                    {
                        "name": "PSA",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "PSA"
                    },
                    {
                        "name": "BGS",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "BGS"
                    },
                    {
                        "name": "CGC",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "CGC"
                    },
                    {
                        "name": "SGC",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "SGC"
                    },
                    {
                        "name": "GAI",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "GIA"
                    },
                    {
                        "name": "CCS",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "CCS"
                    },
                    {
                        "name": "SCD",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "SCD"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/models/condition.ts"
            },
            {
                "name": "Icons",
                "childs": [
                    {
                        "name": "search",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "search"
                    },
                    {
                        "name": "list",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "list"
                    },
                    {
                        "name": "archive",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "archive"
                    },
                    {
                        "name": "deck",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "layer-group"
                    },
                    {
                        "name": "stats",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "chart-line"
                    },
                    {
                        "name": "user",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "user"
                    },
                    {
                        "name": "settings",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "cog"
                    },
                    {
                        "name": "signOut",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "sign-out"
                    },
                    {
                        "name": "binders",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "folders"
                    },
                    {
                        "name": "users",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "users"
                    },
                    {
                        "name": "ellipsisV",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "ellipsis-v"
                    },
                    {
                        "name": "arrowUp",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "arrow-up"
                    },
                    {
                        "name": "arrowDown",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "arrow-down"
                    },
                    {
                        "name": "arrowLeft",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "arrow-left"
                    },
                    {
                        "name": "arrowRight",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "arrow-right"
                    },
                    {
                        "name": "caretUp",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "caret-up"
                    },
                    {
                        "name": "caretRight",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "caret-right"
                    },
                    {
                        "name": "caretDown",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "caret-down"
                    },
                    {
                        "name": "caretLeft",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "caret-left"
                    },
                    {
                        "name": "trash",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "trash"
                    },
                    {
                        "name": "theme",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "palette"
                    },
                    {
                        "name": "scanner",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "crosshairs"
                    },
                    {
                        "name": "history",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "history"
                    },
                    {
                        "name": "externalLink",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "external-link"
                    },
                    {
                        "name": "price",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "dollar-sign"
                    },
                    {
                        "name": "signIn",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "sign-in"
                    },
                    {
                        "name": "plus",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "plus"
                    },
                    {
                        "name": "userPlus",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "user-plus"
                    },
                    {
                        "name": "grid",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "th"
                    },
                    {
                        "name": "camera",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "camera"
                    },
                    {
                        "name": "video",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "video"
                    },
                    {
                        "name": "bringFront",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "bring-front"
                    },
                    {
                        "name": "sync",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "sync"
                    },
                    {
                        "name": "play",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "play"
                    },
                    {
                        "name": "stop",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "stop"
                    },
                    {
                        "name": "pause",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "pause"
                    },
                    {
                        "name": "donate",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "donate"
                    },
                    {
                        "name": "dashboard",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "tachometer"
                    },
                    {
                        "name": "check",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "check"
                    },
                    {
                        "name": "info",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "info"
                    },
                    {
                        "name": "warning",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "exclamation-triangle"
                    },
                    {
                        "name": "error",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "times-octagon"
                    },
                    {
                        "name": "close",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "times"
                    },
                    {
                        "name": "cards",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "layer-group"
                    },
                    {
                        "name": "card",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "rectangle-portrait"
                    },
                    {
                        "name": "cart",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "shopping-cart"
                    },
                    {
                        "name": "scale",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "balance-scale"
                    },
                    {
                        "name": "judge",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "gavel"
                    },
                    {
                        "name": "save",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "save"
                    },
                    {
                        "name": "lineColumns",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "line-columns"
                    },
                    {
                        "name": "sets",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "shield-alt"
                    },
                    {
                        "name": "artists",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "palette"
                    },
                    {
                        "name": "formats",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "swords"
                    },
                    {
                        "name": "text",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "align-left"
                    },
                    {
                        "name": "eye",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "eye"
                    },
                    {
                        "name": "repeat",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "repeat"
                    },
                    {
                        "name": "tap",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "undo"
                    },
                    {
                        "name": "untap",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "undo"
                    },
                    {
                        "name": "top",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "arrow-to-top"
                    },
                    {
                        "name": "bottom",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "arrow-to-bottom"
                    },
                    {
                        "name": "shuffle",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "random"
                    },
                    {
                        "name": "hand",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "hand-holding-medical"
                    },
                    {
                        "name": "graveyard",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "tombstone-alt"
                    },
                    {
                        "name": "exile",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "times"
                    },
                    {
                        "name": "levelUp",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "level-up"
                    },
                    {
                        "name": "levelDown",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "level-down"
                    },
                    {
                        "name": "swords",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "swords"
                    },
                    {
                        "name": "sort",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "sort-alt"
                    },
                    {
                        "name": "moveForward",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "sort-size-up"
                    },
                    {
                        "name": "moveBackward",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "sort-size-down-alt"
                    },
                    {
                        "name": "moveTop",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "arrow-to-top"
                    },
                    {
                        "name": "moveBottom",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "arrow-to-bottom"
                    },
                    {
                        "name": "counters",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "dice-three"
                    },
                    {
                        "name": "diceThree",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "dice-three"
                    },
                    {
                        "name": "dice",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "dice"
                    },
                    {
                        "name": "d4",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "dice-d4"
                    },
                    {
                        "name": "d6",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "dice-d6"
                    },
                    {
                        "name": "d8",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "dice-d8"
                    },
                    {
                        "name": "d10",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "dice-d10"
                    },
                    {
                        "name": "d12",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "dice-d12"
                    },
                    {
                        "name": "d20",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "dice-d20"
                    },
                    {
                        "name": "alert",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "exclamation"
                    },
                    {
                        "name": "thumbsUp",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "thumbs-up"
                    },
                    {
                        "name": "coin",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "coin"
                    },
                    {
                        "name": "pass",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "forward"
                    },
                    {
                        "name": "hourglassStart",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "hourglass-start"
                    },
                    {
                        "name": "hourglassEnd",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "hourglass-end"
                    },
                    {
                        "name": "keyboard",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "keyboard"
                    },
                    {
                        "name": "clone",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "clone"
                    },
                    {
                        "name": "potion",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "flask-potion"
                    },
                    {
                        "name": "folder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "folder"
                    },
                    {
                        "name": "edit",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "edit"
                    },
                    {
                        "name": "minus",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "minus"
                    },
                    {
                        "name": "compress",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "compress"
                    },
                    {
                        "name": "expand",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "expand"
                    },
                    {
                        "name": "lock",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "lock"
                    },
                    {
                        "name": "unlock",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "lock-open"
                    },
                    {
                        "name": "image",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "image"
                    },
                    {
                        "name": "pawClaws",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "paw-claws"
                    },
                    {
                        "name": "trophy",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "trophy"
                    },
                    {
                        "name": "bolt",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "bolt"
                    },
                    {
                        "name": "magic",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "magic"
                    },
                    {
                        "name": "mountains",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "mountains"
                    },
                    {
                        "name": "eclipse",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "eclipse"
                    },
                    {
                        "name": "hoodCloak",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "hood-cloak"
                    },
                    {
                        "name": "dragon",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "dragon"
                    },
                    {
                        "name": "heartbeat",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "heartbeat"
                    },
                    {
                        "name": "heart",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "heart"
                    },
                    {
                        "name": "lightning",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "lightning"
                    },
                    {
                        "name": "tools",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "tools"
                    },
                    {
                        "name": "toolbox",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "toolbox"
                    },
                    {
                        "name": "thunderstorm",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "thunderstorm"
                    },
                    {
                        "name": "bars",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "bars"
                    },
                    {
                        "name": "house",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "house"
                    },
                    {
                        "name": "copy",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "copy"
                    },
                    {
                        "name": "expandArrows",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "expand-arrows-alt"
                    },
                    {
                        "name": "otter",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "otter"
                    },
                    {
                        "name": "dotCircle",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "dot-circle"
                    },
                    {
                        "name": "box",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "box"
                    },
                    {
                        "name": "alignLeft",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "align-left"
                    },
                    {
                        "name": "infoCircle",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "info-circle"
                    },
                    {
                        "name": "dollar",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "dollar-sign"
                    },
                    {
                        "name": "brush",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "brush"
                    },
                    {
                        "name": "paintBrush",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "paint-brush"
                    },
                    {
                        "name": "hashtag",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "hastag"
                    },
                    {
                        "name": "binder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "book-open"
                    },
                    {
                        "name": "inbox",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "inbox"
                    },
                    {
                        "name": "balanceScale",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "balance-scale"
                    },
                    {
                        "name": "exchange",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "exchange"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/models/icons.ts"
            },
            {
                "name": "ItemDisplayType",
                "childs": [
                    {
                        "name": "grid",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Grid"
                    },
                    {
                        "name": "list",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "List"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/layout/main/items/items-filter/items-filter.ts"
            },
            {
                "name": "Printings",
                "childs": [
                    {
                        "name": "Unlimited",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Unlimited"
                    },
                    {
                        "name": "ReverseFoil",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Reverse Foil"
                    },
                    {
                        "name": "Shadowless",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Shadowless"
                    },
                    {
                        "name": "FirstEdition",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "1st Edition"
                    },
                    {
                        "name": "Jumbo",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Jumbo"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/models/print-version.ts"
            },
            {
                "name": "ScanType",
                "childs": [
                    {
                        "name": "scan",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "scan"
                    },
                    {
                        "name": "multiple",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "scan_multiple"
                    },
                    {
                        "name": "snapshot",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "snapshot"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/services/scanner.service.ts"
            },
            {
                "name": "Sides",
                "childs": [
                    {
                        "name": "top",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "top"
                    },
                    {
                        "name": "right",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "right"
                    },
                    {
                        "name": "bottom",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "bottom"
                    },
                    {
                        "name": "left",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "left"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/models/sides.ts"
            },
            {
                "name": "Size",
                "childs": [
                    {
                        "name": "small",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "small"
                    },
                    {
                        "name": "medium",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "medium"
                    },
                    {
                        "name": "large",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "large"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/models/size.ts"
            },
            {
                "name": "Symbols",
                "childs": [
                    {
                        "name": "cards",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "assets/symbols/cards.svg"
                    },
                    {
                        "name": "pokeball",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "assets/symbols/pokeball.svg"
                    },
                    {
                        "name": "facebook",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "assets/symbols/facebook.svg"
                    },
                    {
                        "name": "patreon",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "assets/symbols/patreon.svg"
                    },
                    {
                        "name": "twitter",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "assets/symbols/twitter.svg"
                    },
                    {
                        "name": "youtube",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "assets/symbols/youtube.svg"
                    },
                    {
                        "name": "discord",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "assets/symbols/discord.svg"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/models/icons.ts"
            }
        ],
        "groupedVariables": {
            "src/app/models/api.ts": [
                {
                    "name": "buildUrl",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/models/api.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(folder, queryString = '') => {\r\n\treturn `${environment.api}${folder}${\r\n\t\tqueryString.length ? '?' + queryString : ''\r\n\t}`;\r\n}"
                }
            ],
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "src/app/pages/cards/card/card.ts": [
                {
                    "name": "DEFAULT_IMAGE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/cards/card/card.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'/assets/back.jpg'"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  production: true,\r\n  api: \"https://api.rotomdex.app/api/\",\r\n  images: \"https://images.rotomdex.app/\",\r\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  production: false,\r\n  api: \"https://api.rotomdex.app/api/\",\r\n  images: \"https://images.rotomdex.app/\",\r\n  //api: \"http://api.manabinder.local/api/\"\r\n}"
                }
            ],
            "src/stories/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Button>",
                    "defaultValue": "(args: Button) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/Header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Header>",
                    "defaultValue": "(args: Header) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/Page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Page>",
                    "defaultValue": "(args: Page) => ({\n  props: args,\n})"
                }
            ]
        },
        "groupedFunctions": {
            "src/app/helpers/guid.ts": [
                {
                    "name": "GUID",
                    "file": "src/app/helpers/guid.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": []
                }
            ],
            "src/app/pages/expansions/expansion/expansion.ts": [
                {
                    "name": "SetPageSize",
                    "file": "src/app/pages/expansions/expansion/expansion.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "itemFooter",
                            "type": "ItemsFooter",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "itemFooter",
                            "type": "ItemsFooter",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "SetSortByExpansion",
                    "file": "src/app/pages/expansions/expansion/expansion.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "itemFilter",
                            "type": "ItemsFilter",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "itemFilter",
                            "type": "ItemsFilter",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "SetSortByExpansions",
                    "file": "src/app/pages/expansions/expansion/expansion.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "itemFilter",
                            "type": "ItemsFilter",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "itemFilter",
                            "type": "ItemsFilter",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/pages/cards/card/card.ts": [
                {
                    "name": "SetSortByCards",
                    "file": "src/app/pages/cards/card/card.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "itemFilter",
                            "type": "ItemsFilter",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "itemFilter",
                            "type": "ItemsFilter",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/pages/pokemons/pokemon/pokemon.ts": [
                {
                    "name": "SetSortByPokemon",
                    "file": "src/app/pages/pokemons/pokemon/pokemon.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "select",
                            "type": "Select",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "select",
                            "type": "Select",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {
            "src/app/controls/alert/alert.ts": [
                {
                    "name": "AlertType",
                    "childs": [
                        {
                            "name": "success",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "success"
                        },
                        {
                            "name": "info",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "info"
                        },
                        {
                            "name": "warning",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "warning"
                        },
                        {
                            "name": "error",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "error"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/controls/alert/alert.ts"
                }
            ],
            "src/app/controls/button/button.ts": [
                {
                    "name": "ButtonType",
                    "childs": [
                        {
                            "name": "button",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "button"
                        },
                        {
                            "name": "submit",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "submit"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/controls/button/button.ts"
                }
            ],
            "src/app/models/condition.ts": [
                {
                    "name": "Condition",
                    "childs": [
                        {
                            "name": "Mint",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Mint"
                        },
                        {
                            "name": "NearMint",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Near Mint"
                        },
                        {
                            "name": "LightlyPlayed",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Lightly Played"
                        },
                        {
                            "name": "ModeratelyPlayed",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Moderately Played"
                        },
                        {
                            "name": "HeavilyPlayed",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Heavily Played"
                        },
                        {
                            "name": "Damaged",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Damaged"
                        },
                        {
                            "name": "Misprint",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Misprint"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/models/condition.ts"
                },
                {
                    "name": "ConditionGraded",
                    "childs": [
                        {
                            "name": "Ten",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Graded 10"
                        },
                        {
                            "name": "NineFive",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Graded 9.5"
                        },
                        {
                            "name": "Nine",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Graded 9"
                        },
                        {
                            "name": "EightFive",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Graded 8.5"
                        },
                        {
                            "name": "Eight",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Graded 8"
                        },
                        {
                            "name": "SevenFive",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Graded 7.5"
                        },
                        {
                            "name": "Seven",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Graded 7"
                        },
                        {
                            "name": "SixFive",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Graded 6.5"
                        },
                        {
                            "name": "Six",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Graded 6"
                        },
                        {
                            "name": "FiveFive",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Graded 5.5"
                        },
                        {
                            "name": "Five",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Graded 5"
                        },
                        {
                            "name": "FourFive",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Graded 4.5"
                        },
                        {
                            "name": "Four",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Graded 4"
                        },
                        {
                            "name": "ThreeFive",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Graded 3.5"
                        },
                        {
                            "name": "Three",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Graded 3"
                        },
                        {
                            "name": "TwoFive",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Graded 2.5"
                        },
                        {
                            "name": "Two",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Graded 2"
                        },
                        {
                            "name": "OneFive",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Graded 1.5"
                        },
                        {
                            "name": "One",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Graded 1"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/models/condition.ts"
                },
                {
                    "name": "GradingCompany",
                    "childs": [
                        {
                            "name": "PSA",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "PSA"
                        },
                        {
                            "name": "BGS",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "BGS"
                        },
                        {
                            "name": "CGC",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "CGC"
                        },
                        {
                            "name": "SGC",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "SGC"
                        },
                        {
                            "name": "GAI",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "GIA"
                        },
                        {
                            "name": "CCS",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "CCS"
                        },
                        {
                            "name": "SCD",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "SCD"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/models/condition.ts"
                }
            ],
            "src/app/models/sides.ts": [
                {
                    "name": "Corners",
                    "childs": [
                        {
                            "name": "topRight",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Top Right"
                        },
                        {
                            "name": "topLeft",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Top Left"
                        },
                        {
                            "name": "bottomRight",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Bottom Right"
                        },
                        {
                            "name": "bottomLeft",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Bottom Left"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/models/sides.ts"
                },
                {
                    "name": "Sides",
                    "childs": [
                        {
                            "name": "top",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "top"
                        },
                        {
                            "name": "right",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "right"
                        },
                        {
                            "name": "bottom",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "bottom"
                        },
                        {
                            "name": "left",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "left"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/models/sides.ts"
                }
            ],
            "src/app/models/icons.ts": [
                {
                    "name": "Icons",
                    "childs": [
                        {
                            "name": "search",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "search"
                        },
                        {
                            "name": "list",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "list"
                        },
                        {
                            "name": "archive",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "archive"
                        },
                        {
                            "name": "deck",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "layer-group"
                        },
                        {
                            "name": "stats",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "chart-line"
                        },
                        {
                            "name": "user",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "user"
                        },
                        {
                            "name": "settings",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "cog"
                        },
                        {
                            "name": "signOut",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "sign-out"
                        },
                        {
                            "name": "binders",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "folders"
                        },
                        {
                            "name": "users",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "users"
                        },
                        {
                            "name": "ellipsisV",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "ellipsis-v"
                        },
                        {
                            "name": "arrowUp",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "arrow-up"
                        },
                        {
                            "name": "arrowDown",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "arrow-down"
                        },
                        {
                            "name": "arrowLeft",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "arrow-left"
                        },
                        {
                            "name": "arrowRight",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "arrow-right"
                        },
                        {
                            "name": "caretUp",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "caret-up"
                        },
                        {
                            "name": "caretRight",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "caret-right"
                        },
                        {
                            "name": "caretDown",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "caret-down"
                        },
                        {
                            "name": "caretLeft",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "caret-left"
                        },
                        {
                            "name": "trash",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "trash"
                        },
                        {
                            "name": "theme",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "palette"
                        },
                        {
                            "name": "scanner",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "crosshairs"
                        },
                        {
                            "name": "history",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "history"
                        },
                        {
                            "name": "externalLink",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "external-link"
                        },
                        {
                            "name": "price",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "dollar-sign"
                        },
                        {
                            "name": "signIn",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "sign-in"
                        },
                        {
                            "name": "plus",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "plus"
                        },
                        {
                            "name": "userPlus",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "user-plus"
                        },
                        {
                            "name": "grid",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "th"
                        },
                        {
                            "name": "camera",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "camera"
                        },
                        {
                            "name": "video",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "video"
                        },
                        {
                            "name": "bringFront",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "bring-front"
                        },
                        {
                            "name": "sync",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "sync"
                        },
                        {
                            "name": "play",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "play"
                        },
                        {
                            "name": "stop",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "stop"
                        },
                        {
                            "name": "pause",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "pause"
                        },
                        {
                            "name": "donate",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "donate"
                        },
                        {
                            "name": "dashboard",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "tachometer"
                        },
                        {
                            "name": "check",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "check"
                        },
                        {
                            "name": "info",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "info"
                        },
                        {
                            "name": "warning",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "exclamation-triangle"
                        },
                        {
                            "name": "error",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "times-octagon"
                        },
                        {
                            "name": "close",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "times"
                        },
                        {
                            "name": "cards",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "layer-group"
                        },
                        {
                            "name": "card",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "rectangle-portrait"
                        },
                        {
                            "name": "cart",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "shopping-cart"
                        },
                        {
                            "name": "scale",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "balance-scale"
                        },
                        {
                            "name": "judge",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "gavel"
                        },
                        {
                            "name": "save",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "save"
                        },
                        {
                            "name": "lineColumns",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "line-columns"
                        },
                        {
                            "name": "sets",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "shield-alt"
                        },
                        {
                            "name": "artists",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "palette"
                        },
                        {
                            "name": "formats",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "swords"
                        },
                        {
                            "name": "text",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "align-left"
                        },
                        {
                            "name": "eye",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "eye"
                        },
                        {
                            "name": "repeat",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "repeat"
                        },
                        {
                            "name": "tap",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "undo"
                        },
                        {
                            "name": "untap",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "undo"
                        },
                        {
                            "name": "top",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "arrow-to-top"
                        },
                        {
                            "name": "bottom",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "arrow-to-bottom"
                        },
                        {
                            "name": "shuffle",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "random"
                        },
                        {
                            "name": "hand",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "hand-holding-medical"
                        },
                        {
                            "name": "graveyard",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "tombstone-alt"
                        },
                        {
                            "name": "exile",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "times"
                        },
                        {
                            "name": "levelUp",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "level-up"
                        },
                        {
                            "name": "levelDown",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "level-down"
                        },
                        {
                            "name": "swords",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "swords"
                        },
                        {
                            "name": "sort",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "sort-alt"
                        },
                        {
                            "name": "moveForward",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "sort-size-up"
                        },
                        {
                            "name": "moveBackward",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "sort-size-down-alt"
                        },
                        {
                            "name": "moveTop",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "arrow-to-top"
                        },
                        {
                            "name": "moveBottom",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "arrow-to-bottom"
                        },
                        {
                            "name": "counters",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "dice-three"
                        },
                        {
                            "name": "diceThree",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "dice-three"
                        },
                        {
                            "name": "dice",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "dice"
                        },
                        {
                            "name": "d4",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "dice-d4"
                        },
                        {
                            "name": "d6",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "dice-d6"
                        },
                        {
                            "name": "d8",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "dice-d8"
                        },
                        {
                            "name": "d10",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "dice-d10"
                        },
                        {
                            "name": "d12",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "dice-d12"
                        },
                        {
                            "name": "d20",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "dice-d20"
                        },
                        {
                            "name": "alert",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "exclamation"
                        },
                        {
                            "name": "thumbsUp",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "thumbs-up"
                        },
                        {
                            "name": "coin",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "coin"
                        },
                        {
                            "name": "pass",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "forward"
                        },
                        {
                            "name": "hourglassStart",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "hourglass-start"
                        },
                        {
                            "name": "hourglassEnd",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "hourglass-end"
                        },
                        {
                            "name": "keyboard",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "keyboard"
                        },
                        {
                            "name": "clone",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "clone"
                        },
                        {
                            "name": "potion",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "flask-potion"
                        },
                        {
                            "name": "folder",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "folder"
                        },
                        {
                            "name": "edit",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "edit"
                        },
                        {
                            "name": "minus",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "minus"
                        },
                        {
                            "name": "compress",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "compress"
                        },
                        {
                            "name": "expand",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "expand"
                        },
                        {
                            "name": "lock",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "lock"
                        },
                        {
                            "name": "unlock",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "lock-open"
                        },
                        {
                            "name": "image",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "image"
                        },
                        {
                            "name": "pawClaws",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "paw-claws"
                        },
                        {
                            "name": "trophy",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "trophy"
                        },
                        {
                            "name": "bolt",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "bolt"
                        },
                        {
                            "name": "magic",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "magic"
                        },
                        {
                            "name": "mountains",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "mountains"
                        },
                        {
                            "name": "eclipse",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "eclipse"
                        },
                        {
                            "name": "hoodCloak",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "hood-cloak"
                        },
                        {
                            "name": "dragon",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "dragon"
                        },
                        {
                            "name": "heartbeat",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "heartbeat"
                        },
                        {
                            "name": "heart",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "heart"
                        },
                        {
                            "name": "lightning",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "lightning"
                        },
                        {
                            "name": "tools",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "tools"
                        },
                        {
                            "name": "toolbox",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "toolbox"
                        },
                        {
                            "name": "thunderstorm",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "thunderstorm"
                        },
                        {
                            "name": "bars",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "bars"
                        },
                        {
                            "name": "house",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "house"
                        },
                        {
                            "name": "copy",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "copy"
                        },
                        {
                            "name": "expandArrows",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "expand-arrows-alt"
                        },
                        {
                            "name": "otter",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "otter"
                        },
                        {
                            "name": "dotCircle",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "dot-circle"
                        },
                        {
                            "name": "box",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "box"
                        },
                        {
                            "name": "alignLeft",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "align-left"
                        },
                        {
                            "name": "infoCircle",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "info-circle"
                        },
                        {
                            "name": "dollar",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "dollar-sign"
                        },
                        {
                            "name": "brush",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "brush"
                        },
                        {
                            "name": "paintBrush",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "paint-brush"
                        },
                        {
                            "name": "hashtag",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "hastag"
                        },
                        {
                            "name": "binder",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "book-open"
                        },
                        {
                            "name": "inbox",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "inbox"
                        },
                        {
                            "name": "balanceScale",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "balance-scale"
                        },
                        {
                            "name": "exchange",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "exchange"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/models/icons.ts"
                },
                {
                    "name": "Symbols",
                    "childs": [
                        {
                            "name": "cards",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "assets/symbols/cards.svg"
                        },
                        {
                            "name": "pokeball",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "assets/symbols/pokeball.svg"
                        },
                        {
                            "name": "facebook",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "assets/symbols/facebook.svg"
                        },
                        {
                            "name": "patreon",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "assets/symbols/patreon.svg"
                        },
                        {
                            "name": "twitter",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "assets/symbols/twitter.svg"
                        },
                        {
                            "name": "youtube",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "assets/symbols/youtube.svg"
                        },
                        {
                            "name": "discord",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "assets/symbols/discord.svg"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/models/icons.ts"
                }
            ],
            "src/app/layout/main/items/items-filter/items-filter.ts": [
                {
                    "name": "ItemDisplayType",
                    "childs": [
                        {
                            "name": "grid",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Grid"
                        },
                        {
                            "name": "list",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "List"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/layout/main/items/items-filter/items-filter.ts"
                }
            ],
            "src/app/models/print-version.ts": [
                {
                    "name": "Printings",
                    "childs": [
                        {
                            "name": "Unlimited",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Unlimited"
                        },
                        {
                            "name": "ReverseFoil",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Reverse Foil"
                        },
                        {
                            "name": "Shadowless",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Shadowless"
                        },
                        {
                            "name": "FirstEdition",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "1st Edition"
                        },
                        {
                            "name": "Jumbo",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Jumbo"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/models/print-version.ts"
                }
            ],
            "src/app/services/scanner.service.ts": [
                {
                    "name": "ScanType",
                    "childs": [
                        {
                            "name": "scan",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "scan"
                        },
                        {
                            "name": "multiple",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "scan_multiple"
                        },
                        {
                            "name": "snapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "snapshot"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/services/scanner.service.ts"
                }
            ],
            "src/app/models/size.ts": [
                {
                    "name": "Size",
                    "childs": [
                        {
                            "name": "small",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "small"
                        },
                        {
                            "name": "medium",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "medium"
                        },
                        {
                            "name": "large",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "large"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/models/size.ts"
                }
            ]
        },
        "groupedTypeAliases": {}
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/helpers/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "",
                        "component": "HomeComponent",
                        "data": {
                            "transparentHeader": true
                        }
                    },
                    {
                        "path": "cards",
                        "component": "CardsComponent"
                    },
                    {
                        "path": "cards/:slug",
                        "component": "CardComponent"
                    },
                    {
                        "path": "cards/types/:type",
                        "component": "CardsComponent"
                    },
                    {
                        "path": "cards/rarity/:rarity",
                        "component": "CardsComponent"
                    },
                    {
                        "path": "cards/artists/:artist",
                        "component": "CardsComponent"
                    },
                    {
                        "path": "cards/supertype/:supertype",
                        "component": "CardsComponent"
                    },
                    {
                        "path": "cards/subtype/:subtype",
                        "component": "CardsComponent"
                    },
                    {
                        "path": "collection/dashboard",
                        "component": "CollectionComponent"
                    },
                    {
                        "path": "collection",
                        "component": "CollectionComponent"
                    },
                    {
                        "path": "collection/add",
                        "component": "CollectionComponent"
                    },
                    {
                        "path": "signin",
                        "component": "SignInComponent"
                    },
                    {
                        "path": "signup",
                        "component": "SignUpComponent"
                    },
                    {
                        "path": "forgot",
                        "component": "ForgotComponent"
                    },
                    {
                        "path": "reset/:token",
                        "component": "ResetComponent"
                    },
                    {
                        "path": "profile",
                        "component": "EditProfileComponent"
                    },
                    {
                        "path": "profile/edit",
                        "component": "EditProfileComponent"
                    },
                    {
                        "path": "expansions",
                        "component": "ExpansionsComponent"
                    },
                    {
                        "path": "expansions/:code",
                        "component": "ExpansionComponent"
                    },
                    {
                        "path": "pokemon",
                        "component": "PokemonsComponent"
                    },
                    {
                        "path": "pokemon/:slug",
                        "component": "PokemonComponent"
                    },
                    {
                        "path": "pokemon/type/:type",
                        "component": "PokemonsComponent"
                    },
                    {
                        "path": "**",
                        "redirectTo": ""
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "e2e/src/app.po.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/app.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppSettings",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/components/card-collection/card-collection-item/card-collection-item.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CardCollectionItemComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/components/card-collection/card-collection-item/card-collection-item.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CardCollectionItem",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/components/card-collection/card-collection.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CardCollectionComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/components/card-collection/card-collection.service.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AddUserCard",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/components/card-collection/card-collection.service.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UpdateUserCard",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/components/card-collection/card-collection.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UserCardsService",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/controls/alert/alert.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AlertComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/controls/alert/alert.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Alert",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/controls/button/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/controls/button/button.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Button",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/controls/checkbox/checkbox.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CheckboxComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/controls/checkbox/checkbox.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Checkbox",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/controls/dialog/dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/controls/dialog/dialog.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DialogService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/controls/dialog/dialog.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Dialog",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/controls/editor/editor.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EditorComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/controls/editor/editor.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Editor",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/controls/empty/empty.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EmptyComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/controls/empty/empty.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Empty",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/controls/form/form-group/form-control/form-control.ts",
                "type": "class",
                "linktype": "classe",
                "name": "MBFormControl",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/controls/form/form-group/form-control/from-control.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FormControlComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/controls/form/form-group/form-group.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FormGroupComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/controls/form/form-group/form-group.ts",
                "type": "class",
                "linktype": "classe",
                "name": "MBFormGroup",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/controls/form/form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/controls/form/form.ts",
                "type": "class",
                "linktype": "classe",
                "name": "MBForm",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/controls/hero/hero.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeroComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/controls/loader/loader.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/controls/loader/loader.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LoaderService",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/controls/menu/menu.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MenuComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/controls/menu/menu.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Menu",
                "coveragePercent": 0,
                "coverageCount": "0/21",
                "status": "low"
            },
            {
                "filePath": "src/app/controls/menu/menu.ts",
                "type": "class",
                "linktype": "classe",
                "name": "MenuItem",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "src/app/controls/notifications/notification.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Notification",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/controls/notifications/notifications.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NotificationsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/controls/notifications/notifications.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "NotificationsService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/controls/progress-bar/progress-bar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProgressBarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/controls/progress-bar/progress-bar.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ProgressBar",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/controls/select/select.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SelectComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/controls/select/select.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Select",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "src/app/controls/select/select.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SelectOption",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/controls/select/select.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SelectOptionGroup",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/controls/tag/tag.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TagComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/controls/tag/tag.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Tag",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/controls/textarea/textarea.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TextareaComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/controls/textarea/textarea.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Textarea",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/controls/textbox/textbox.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TextboxComponent",
                "coveragePercent": 0,
                "coverageCount": "0/23",
                "status": "low"
            },
            {
                "filePath": "src/app/controls/textbox/textbox.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Textbox",
                "coveragePercent": 0,
                "coverageCount": "0/28",
                "status": "low"
            },
            {
                "filePath": "src/app/controls/toggle/toggle.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ToggleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/controls/toggle/toggle.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Toggle",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/controls/type-tag/type-tag.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TypeTagComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/controls/type-tag/type-tag.ts",
                "type": "class",
                "linktype": "classe",
                "name": "TypeTag",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/helpers/auth.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "AuthGuard",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/helpers/clickOutside.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "ClickOutsideDirective",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/helpers/error.interceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "ErrorIntercept",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/helpers/guid.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "GUID",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/helpers/jwt.interceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "JwtInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/helpers/string.extensions.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "String",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/footer/footer.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FooterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/header/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/header/profile/profile.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProfileComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/header/search/search.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SearchComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/main/items/items-filter/items-filter.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ItemsFilterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/main/items/items-filter/items-filter.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ItemsFilter",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/main/items/items-footer/items-footer-component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ItemsFooterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/main/items/items-footer/items-footer.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ItemsFooter",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/main/items/items-grid/items-grid.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ItemsGridComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/main/items/items-groups/item-group.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ItemGroup",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/main/items/items-groups/items-groups.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ItemsGroupsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/main/items/items-header/items-header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ItemsHeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/main/items/items-header/items-header.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ItemsHeader",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/main/items/items-list/items-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ItemsListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/main/items/items.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ItemsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/main/items/items.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Items",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/models/api.ts",
                "type": "class",
                "linktype": "classe",
                "name": "APIGetPaged",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/models/api.ts",
                "type": "class",
                "linktype": "classe",
                "name": "APIReponseMeta",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/models/api.ts",
                "type": "class",
                "linktype": "classe",
                "name": "APIResponse",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/models/api.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "buildUrl",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/models/user.ts",
                "type": "class",
                "linktype": "classe",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/auth/forgot/forgot.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ForgotComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/auth/reset/reset.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ResetComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/auth/signin/signin.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SignInComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/auth/signup/signup.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SignUpComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/cards/card-item/card-item-grid/card-item-grid.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CardItemGridComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/cards/card-item/card-item-list/card-item-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CardItemListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/cards/card/card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/22",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/cards/card/card.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Attack",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/cards/card/card.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Card",
                "coveragePercent": 0,
                "coverageCount": "0/31",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/cards/card/card.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CardCount",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/cards/card/card.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CardGroup",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/cards/card/card.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CardLastPrices",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/cards/card/card.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Weakness",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/cards/card/card.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "SetSortByCards",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/cards/card/card.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DEFAULT_IMAGE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/cards/cards.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CardsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/cards/cards.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Cards",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/collection/collection-card-group/collection-card-group-cards/collection-card-group-cards.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CollectionCardGroupCardsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/collection/collection-card-group/collection-card-group.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CollectionCardGroupComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/collection/collection-dashboard/collection-dashboard.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CollectionDashboardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/collection/collection.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CollectionComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/collection/collection.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Collection",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/edit-profile/edit.profile.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EditProfileComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/expansions/expansion-item/expansion-item-grid/expansion-item-grid.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ExpansionItemGridComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/expansions/expansion-item/expansion-item-list/expansion-item-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ExpansionItemListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/expansions/expansion/expansion.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ExpansionComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/expansions/expansion/expansion.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Expansion",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/expansions/expansion/expansion.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Series",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/expansions/expansion/expansion.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "SetPageSize",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/expansions/expansion/expansion.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "SetSortByExpansion",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/expansions/expansion/expansion.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "SetSortByExpansions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/expansions/expansions.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ExpansionsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/home/featured.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Featured",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/home/home.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HomeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/pokemons/pokemon-item/pokemon-item-grid/pokemon-item-grid.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PokemonItemGridComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/pokemons/pokemon-item/pokemon-item-list/pokemon-item-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PokmeonItemListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/pokemons/pokemon/pokemon.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PokemonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/pokemons/pokemon/pokemon.ts",
                "type": "class",
                "linktype": "classe",
                "name": "EvolutionChain",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/pokemons/pokemon/pokemon.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Pokemon",
                "coveragePercent": 0,
                "coverageCount": "0/24",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/pokemons/pokemon/pokemon.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PokemonGeneration",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/pokemons/pokemon/pokemon.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PokemonSprites",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/pokemons/pokemon/pokemon.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PokemonVariant",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/pokemons/pokemon/pokemon.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "SetSortByPokemon",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/pokemons/pokemons.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PokemonsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/scanner/scanner-lists/scanner-list/scanner-card.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ScannerCard",
                "coveragePercent": 0,
                "coverageCount": "0/31",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/scanner/scanner-lists/scanner-list/scanner-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ScannerListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/scanner/scanner-lists/scanner-list/scanner-list.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ScannerList",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/scanner/scanner-lists/scanner-lists.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ScannerListsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/scanner/scanner.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ScannerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/62",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/scanner/scanner.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Scanner",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/services/auth.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthenticationService",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/services/cache/globalCache.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CacheGlobal",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/services/card.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CardService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/services/cards.service.ts",
                "type": "class",
                "linktype": "classe",
                "name": "GetCards",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/services/cards.service.ts",
                "type": "class",
                "linktype": "classe",
                "name": "GetCardsFiltered",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/services/cards.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CardsService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/services/cards.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CardResults",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/services/expansion.service.ts",
                "type": "class",
                "linktype": "classe",
                "name": "GetExpansion",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/services/expansion.service.ts",
                "type": "class",
                "linktype": "classe",
                "name": "GetExpansionCards",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/services/expansion.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ExpansionService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/services/expansions.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ExpansionsService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/services/expansions.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "GetExpansions",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/services/factory/card.factory.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CardFactory",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/services/factory/expansion.factory.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ExpansionFactory",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/services/factory/expansion.factory.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SeriesFactory",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/services/factory/pokemon.factory.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PokemonFactory",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/services/featured.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "FeaturedService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/services/pokemon.service.ts",
                "type": "class",
                "linktype": "classe",
                "name": "GetPokemonVariantCards",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/services/pokemon.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PokemonService",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/services/pokemon.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ResPokemonVariantCards",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/services/pokemons.service.ts",
                "type": "class",
                "linktype": "classe",
                "name": "GetPokemons",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/services/pokemons.service.ts",
                "type": "class",
                "linktype": "classe",
                "name": "GetPokemonVariants",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/services/pokemons.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PokemonsService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/services/pokemons.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ResPokemons",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/services/pokemons.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ResPokemonVariants",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/services/release-notes.services.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ReleaseNotesServices",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/services/release-notes.services.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ReleaseNote",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/services/scanner.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ScannerService",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/services/scanner.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "GetScanCardParams",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/services/scanner.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "GetScanCardsParams",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/services/search.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SearchService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/User.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}